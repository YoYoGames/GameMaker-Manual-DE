<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Adressierung von Variablen in anderen Instanzen</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Adressierung von Variablen in anderen Instanzen</h1>
  <p>In den Abschnitten, die sich mit <a href="Variables_And_Variable_Scope.htm">Variablen</a> befassen, haben Sie erfahren, wie man Variablen innerhalb einer einzelnen Instanz oder auf globaler Ebene erstellt und verwendet, aber was passiert, wenn man von einer Instanz aus auf eine Variable in einer anderen Instanz zugreifen möchte? Es gibt viele Fälle, in denen man dies tun möchte, z. B. bei einer Kollision mit einem Geschossobjekt, wenn man herausfinden möchte, wie viel Schaden das Geschoss anrichtet, indem man auf eine Variable im Geschoss zugreift, oder wenn man die Bewegung aller Kugeln in einem Puzzle stoppen möchte, oder wenn man die Hauptfigur an eine bestimmte Position bewegen möchte, oder in einer beliebigen Anzahl von anderen Situationen, die in jedem Spiel vorkommen. Glücklicherweise ist <span class="notranslate">GameMaker Language</span> mit Mechanismen ausgestattet, die dies ermöglichen.</p>
  <p>Eine der gebräuchlichsten Methoden, auf eine Variable in einer <em>anderen </em>Instanz zuzugreifen oder sie zu ändern, besteht darin, ihren Objektnamen als Bezeichner zu verwenden und dann einen Punkt &quot;<span class="inline">.</span>&quot; zu verwenden, um <span data-keyref="GameMaker Name">GameMaker</span> mitzuteilen, dass die Variable, auf die verwiesen wird, innerhalb der Instanz dieses speziellen Objekts zugewiesen oder geändert werden soll. Dies wird als &quot;Punktnotation&quot; bezeichnet, und die <span class="notranslate">syntax</span> sieht folgendermaßen aus:</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p>
  <p>In der Praxis würde das folgendermaßen aussehen:</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>Mit der obigen <span class="notranslate">code</span> setzen Sie die Geschwindigkeit einer Instanz von &quot;<span class="inline">obj_ball</span>&quot;. Wenn Sie jedoch mehr als eine Instanz des gegebenen Objekts im Raum haben, <em>dann gilt es für ALLE gleichermaßen</em> - es sei denn, Sie verwenden <b>HTML5</b>, in diesem Fall wirkt es sich nur auf <em>eine</em> aus, aber Sie haben keine Möglichkeit zu wissen, auf welche - wenn Sie also auf alle Instanzen eines Objekts zugreifen müssen, sollten Sie <a href="Language_Features/with.htm"><span class="inline">with()</span></a>verwenden, da dies zu 100 % mit <span class="notranslate">platform</span> kompatibel ist. Im Allgemeinen sollte dieses Format nur verwendet werden, wenn du eine einzige Instanz des Objekts im Raum hast, oder (wie du im nächsten Teil sehen wirst) wenn du eine bestimmte <i> <b>Instanz-ID</b></i> hast.</p>
  <p>Du kannst auch auf eine einzelne Instanz eines Objekts zugreifen, wenn es mehrere Instanzen innerhalb des Raums gibt, indem du den eindeutigen <b>Instanznamen</b> verwendest, um <span data-keyref="GameMaker Name">GameMaker</span> mitzuteilen, welche Instanz genau angesprochen werden soll. Die <b>Instanznamenskonstante</b> ist die eindeutige Identifizierungskonstante, die jeder einzelnen Instanz, die einem Raum in deinem Spiel hinzugefügt wird, zugewiesen wird. Du kannst diese Konstante finden, indem du im <a href="../../The_Asset_Editors/Rooms.htm">Raumeditor</a> auf eine Instanz doppelklickst:</p>
  <p><img>Beachten Sie, dass dieser Name bearbeitet und mit einem aussagekräftigeren Namen versehen werden kann - obwohl der Name für das gesamte Spiel eindeutig sein <em>muss</em> - und er kann als linke Seite des Punktes verwendet werden:</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <p>Die bei weitem gebräuchlichste und praktischste Methode ist jedoch die Verwendung einer <i>Variablen</i> links vom Punkt, sofern die betreffende Variable<i> eine gültige <b>Instanz-ID</b></i> gespeichert hat. Die folgenden Beispiele veranschaulichen dies.</p>
  <p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if (instance_exists(_inst))<br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p>
  <p>In der obigen <span class="notranslate">code</span> für Beispiel 1 gibt es einen <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><span class="inline">instance_exists()</span></a> Aufruf in dem <span class="notranslate">code</span> Block. Das liegt daran, dass die Verwendung der Point-Methode, um auf den Wert einer anderen Instanz zuzugreifen oder diesen zu ändern, einen Fehler auslöst und das Spiel zum Absturz bringt, wenn die Instanz nicht existiert, und es besteht die Möglichkeit, dass dies in diesem Beispiel der Fall ist. In den Beispielen 2 und 3 brauchen wir diese Überprüfung jedoch nicht, da wir <i>wissen</i>, dass die Instanz vorhanden ist, da wir sie in Beispiel 2 erstellt haben, und in Beispiel 3 ist es die andere Instanz in einem Kollisionsereignis. Wenn jedoch die Möglichkeit <i>besteht</i>, dass die Instanz zerstört, deaktiviert oder anderweitig aus dem Raum entfernt werden könnte, während du diese Methode verwendest, solltest du <i>immer</i> vorher mit der <span class="inline">instance_exists()</span> Funktion oder der <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a> Funktion.</p>
  <p>Beachten Sie, dass Sie das spezielle <a href="Instance_Keywords.htm">Schlüsselwort</a> &quot;<span class="inline">all</span>&quot; mit dieser Methode nicht verwenden können, um alle Instanzen anzusprechen (z.B.: <span class="inline">all.val = 10</span> würde einen Fehler verursachen), aber Sie <i>können</i> die Schlüsselwörter &quot;<span class="inline">other</span>&quot; und &quot;<span class="inline">self</span>&quot; ohne Probleme verwenden. Beispiel: Verwendung von <span class="inline">other</span> in einem <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">Kollisionsereignis</a>:</p>
  <p class="code">// Example 3 other.hp -= 10;<br />
    if (other.hp &lt;= 0)<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }</p>
  <p>Es ist auch wichtig zu beachten, dass Sie keine Funktion selbst als linke Seite einer Zuweisung verwenden können. Zum Beispiel würde die folgende <span class="notranslate">code</span> einen Fehler verursachen:</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>Der Rückgabewert für den Ausdruck in diesem <span class="notranslate">code</span> Beispiel ist eine Ganzzahl (der eindeutige ID-Wert für die nächste Instanz) und muss daher in Klammern <span class="inline">()</span> eingeschlossen werden, um auf diese Weise verwendet werden zu können und die erforderliche Instanz korrekt zu adressieren. Die obige <span class="notranslate">code</span> würde korrekt geschrieben werden als:</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var _inst = instance_nearest(x, y, obj);<br />
    _inst.speed = 0;
  </p>
  <p>Dies sind alles vollkommen gültige Wege, um Variablen in anderen Instanzen zu lesen, zu ändern und zu setzen, und sie funktionieren, weil der Punkt eigentlich ein <i>Operator</i> ist. Er nimmt einen Wert als linken <a class="glossterm" data-glossterm="Operand" href="#">Operanden</a> und eine Variable als rechten Operanden und gibt die Adresse dieser bestimmten Variable im angegebenen Objekt oder der Instanz zurück. Alle Objektnamen, Konstanten, IDs usw. stellen einfach Werte dar, die wie jeder andere Wert behandelt werden können.</p>
  <p>Die andere Möglichkeit, auf Variablen in einer anderen Instanz zu verweisen, besteht in der Verwendung der Funktion <span class="notranslate">GameMaker Language</span> <span class="inline">with()</span> , die <a href="Language_Features/with.htm">hier</a> im Detail erläutert wird:</p>
  <p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if (instance_exists(_enemy))<br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="GML_Overview.htm">GML-Übersicht</a></div>
        <div style="float:right">Nächste: <a data-xref="{title}" href="Expressions_And_Operators.htm">Ausdrücke und Operatoren</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>