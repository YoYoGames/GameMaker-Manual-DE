<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>mit</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the with statement" />
  <meta name="rh-index-keywords" content="with" />
  <meta name="search-keywords" content="with" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>mit</h1>
  <p>Wie im Abschnitt <a href="../Addressing_Variables_In_Other_Instances.htm">Adressierung von Variablen in anderen Instanzen</a> beschrieben, ist es möglich, den Wert von Variablen in anderen Instanzen und <a href="../Structs.htm">Strukturen</a> zu lesen und zu ändern als diejenige, die gerade eine bestimmte <span class="notranslate">code</span> ausführt. In einer Reihe von Fällen möchten Sie jedoch viel mehr tun, als nur eine einzelne Variable innerhalb dieser anderen Instanzen zu ändern, und Sie möchten vielleicht komplexere <span class="notranslate">code</span> Aktionen durchführen, die mehrere Funktionen und Zeilen von <span class="notranslate">code</span> erfordern. Stellen Sie sich zum Beispiel vor, dass Sie alle Instanzen eines Ballobjekts in Ihrem Spiel um 8 Pixel nach unten verschieben möchten. Sie denken vielleicht, dass dies einfach durch das folgende Stück Code erreicht werden kann:</p>
  <p class="code">obj_ball.y = obj_ball.y + 8;</p>
  <p>Das ist aber nicht korrekt, denn die rechte Seite der Zuweisung erhält den Wert der y-Koordinate der ersten Kugel und addiert 8 dazu. Als nächstes wird dieser neue Wert als y-Koordinate <em>aller </em>Kugeln festgelegt, so dass das Ergebnis ist, dass alle Kugeln die gleiche y-Koordinate erhalten, und selbst wenn Sie das Folgende verwenden:</p>
  <p class="code">obj_ball.y += 8;</p>
  <p>hat genau die gleiche Wirkung, weil es einfach eine Abkürzung der ersten Anweisung ist. Wie <i>können</i> wir also so etwas erreichen? Aus diesem Grund gibt es die Anweisung <span class="inline">with</span> in <span class="notranslate">GML</span>. Die Anweisung <span class="inline">with</span> hat die folgende Syntax:</p>
  <p class="code">with (&lt;expression&gt;)<br />
    {<br />
    &lt;statement&gt;;<br />
    &lt;statement&gt;;<br />
    ...<br />
    }</p>
  <p>Für den <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdruck</a> können Sie eine oder mehrere Instanzen (oder eine Struktur) angeben, für die der <span class="notranslate">code</span> ausgeführt werden soll, indem Sie eine Instanz-ID, die Objekt-ID (die angibt, dass <i>alle Instanzen</i> im Raum dieses Objekts den <span class="notranslate">code</span> -Block ausführen sollen), die Struktur-ID oder eines der speziellen <a href="../Instance_Keywords.htm">Schlüsselwörter</a> (<span class="inline">all</span> oder <span class="inline">other</span>) verwenden. Dadurch wird der <strong>Geltungsbereich</strong> von <span class="notranslate">code</span> innerhalb der geschweiften Klammern <span class="inline">{}</span> von der Instanz, der Struktur oder der Funktion, die die <span class="notranslate">code</span> tatsächlich enthält, auf die im Ausdruck angegebene Instanz (oder Instanzen oder Struktur) geändert.</p>
  <p>Sobald der Ausdruck den Geltungsbereich von <span class="inline">with</span> festgelegt hat, wird die <a class="glossterm" data-glossterm="Anweisung" href="#">Anweisung</a> für jede der angegebenen Instanzen ausgeführt, als ob diese Instanz die aktuelle Instanz wäre ( <span class="inline">self</span>). Um auf unser ursprüngliches Problem zurückzukommen: Um alle Instanzen des Ball-Objekts um 8 Pixel nach unten zu verschieben, würden Sie also Folgendes eingeben:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        y += 8;<br />
    }</p>
  <p>Im Wesentlichen handelt es sich um ein <span class="notranslate">loop</span>, und jede <a class="glossterm" data-glossterm="Iteration" href="#">Iteration</a> des <span class="notranslate">loop</span>, das <span class="notranslate">code</span> wird auf einer Instanz des Objekts <span class="inline">obj_ball</span> ausgeführt.</p>
  <p>Wenn Sie mehrere Anweisungen ausführen möchten, schließen Sie diese einfach in geschweifte Klammern ein, wie Sie es auch bei jedem anderen <span class="notranslate">code</span> Block tun würden. Um zum Beispiel alle Bälle in unserem Beispiel an eine zufällige Position zu bewegen und ihnen eine zufällige Geschwindigkeit und Richtung zu geben, würden Sie verwenden:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        speed = 1 + random(2);<br />
        direction = random(360);<br />
    }</p>
  <p>Wie oben erwähnt, ist die angegebene Instanz oder Struktur innerhalb der Anweisung(en) zur Zielinstanz (<span class="inline">self</span>) geworden, die den Block <span class="notranslate">code</span> ausführt, was bedeutet, dass die ursprüngliche Instanz (die <span class="inline">with</span> und den gesamten Block <span class="notranslate">code</span> enthält) zur <a href="../Instance_Keywords.htm"><span class="inline">other</span></a> Instanz geworden ist. Um zum Beispiel alle Bälle an die Position der aktuellen Instanz zu verschieben, die den <span class="notranslate">code</span> enthält, kannst du Folgendes eingeben:</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = other.x;<br />
        y = other.y;<br />
    }</p>
  <p>Die Erklärung <span class="inline">with</span> ist ein äußerst leistungsfähiges Instrument, das in vielen, vielen Situationen nützlich ist, daher ist es wichtig, dass Sie genau wissen, wie es verwendet werden kann. Im Folgenden finden Sie einige weitere Beispiele für die Verwendung:</p>
  <p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br />
    {<br />
        speed = other.speed;<br />
        direction = other.direction;<br />
    }</p>
  <p>Die obige <span class="notranslate">code</span> erstellt eine Instanz von <span class="inline">obj_Ball</span> und weist ihr die Geschwindigkeit und Richtung der Instanz zu, die den gesamten Block <span class="notranslate">code</span> ausführt.</p>
  <p class="code">with (instance_nearest(x, y, obj_Ball))<br />
    {<br />
        instance_destroy();<br />
    }</p>
  <p>Die obige <span class="notranslate">code</span> wird die Instanz von <span class="inline">obj_Ball</span> zerstören, die der Instanz, auf der <span class="notranslate">code</span> läuft, am nächsten ist.</p>
  <p class="code">with(clone_struct)<br />
    {<br />
        xx = other.x;<br />
        yy = other.y;<br />
        spd = other.speed;<br />
        dir = other.direction;<br />
    }</p>
  <p>Das obige <span class="notranslate">code</span> verwendet <span class="inline">with</span>, um ein struct anzuvisieren und die gegebenen struct Membervariablen auf die Werte zu setzen, die in den Instanzvariablen der Instanz gespeichert sind, die <span class="notranslate">code</span> aufruft.</p>
  <p class="code">var _inst = noone;<br />
    with (obj_ball)<br />
    {<br />
        if (str &gt; other.str)<br />
        {<br />
            _inst = id;<br />
        }<br />
    }<br />
    if (_inst != noone)<br />
    {<br />
        target = _inst;<br />
    }</p>
  <p>Die obige <span class="notranslate">code</span> ist etwas komplexer als die vorherigen, da sie eine <a href="../Variables_And_Variable_Scope.htm">lokale Variable</a> verwendet. Diese Variable ist entweder für das <em>Ereignis</em> oder die<em>Skriptfunktion</em> und nicht für die Instanz oder die Struktur <strong>lokal </strong>und kann daher von allen Instanzen, auf die innerhalb des <span class="notranslate">code</span> -Blocks verwiesen wird, verwendet und aufgerufen werden. Im obigen <span class="notranslate">code</span> haben wir also eine lokale Variable auf das spezielle Schlüsselwort <span class="inline">noone</span> gesetzt und dann die Konstruktion <span class="inline">with</span> verwendet, um jede Instanz von <span class="inline">obj_Ball</span> zu veranlassen, ihre Variable <span class="inline">str</span> mit derjenigen der Instanz zu vergleichen, die den Block <span class="notranslate">code</span> ausführt. Wenn der Wert der Variable größer ist, dann speichern sie ihre eindeutige ID in der lokalen Variable <span class="inline">inst</span>, was bedeutet, dass am Ende des <span class="notranslate">code</span> nur die Instanz mit einem Wert größer als die aufrufende Instanz (oder das Schlüsselwort <span class="inline">noone</span>, wenn keine größer ist) in der lokalen Variable <span class="inline">_inst</span> gespeichert wird.</p>
  <p>Es ist erwähnenswert, dass Sie die speziellen Anweisungen <span class="inline"><a href="break.htm">break</a></span> und <span class="inline"><a href="continue.htm">continue</a></span> auch innerhalb eines Aufrufs verwenden können. <font face="Lucida Console"><span style="font-size: 16px;"><b>mit</b></span></font> Aufrufs verwenden können. Wenn Sie <span class="inline">break</span> verwenden, wird der <span class="inline">with</span> <span class="notranslate">code</span> -Block sofort verlassen und mit <span class="notranslate">code</span> fortgefahren, das sich in dem Ereignis oder der Funktion befindet, nachdem <span class="inline">with</span> beendet sein sollte, z. B:</p>
  <p class="code">var count = 0;<br />
    with (obj_Enemy)<br />
    {<br />
        if (++count &gt; 10)<br />
        {<br />
            break;<br />
        }<br />
        hp = 100;<br />
    }</p>
  <p>Das obige <span class="notranslate">code</span> <span class="notranslate">loops</span> durchsucht die Instanzen des Objekts <span class="inline">obj_Enemy</span> im Raum und setzt die Variable <span class="inline">hp</span> für die ersten 10, die es findet, auf 100. Wenn mehr als 10 Instanzen vorhanden sind, ruft <span class="notranslate">code</span> <span class="inline">break</span> auf und endet.</p>
  <p>Ein Beispiel für die Verwendung von <span class="inline">continue</span> in einer <span class="inline">with</span> -Schleife wäre:</p>
  <p class="code">with (obj_Enemy_Parent)<br />
    {<br />
        if (invulnerable == true)<br />
        {<br />
            continue;<br />
        }<br />
        hp -= 25;<br />
    }</p>
  <p> <span class="notranslate">code</span> Dieses <span class="notranslate">loop</span> durchläuft alle Instanzen mit dem übergeordneten <span class="inline">obj_Enemy_Parent</span> und prüft dann jede Instanz, um festzustellen, ob die Instanzvariable <span class="inline">invulnerable</span> <span class="inline">true</span> ist oder nicht. Wenn dies der Fall ist, beendet das Schlüsselwort <span class="inline">continue</span> die aktuelle Iteration von <span class="notranslate">loop</span> und geht zur nächsten verfügbaren Instanz über, andernfalls entfernt es 25 aus der Variable <span class="inline">hp</span>. Dies wird so lange wiederholt, bis alle Instanzen mit diesem Elternteil überprüft wurden.</p>
  <div data-conref="../../../assets/snippets/Instance_creation_order_warning.hts"> </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Language_Features.htm">Sprachliche Merkmale</a></div>
        <div style="float:right">Nächste: <a href="return.htm"><span class="notranslate">return</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->
</body>
</html>