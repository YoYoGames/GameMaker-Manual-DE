<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>während</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>während</h1>
  <p> <span class="notranslate">GameMaker Language</span> hat eine Reihe von Möglichkeiten, <i>Schleifen</i> auszuführen, eine der wichtigsten ist die <span class="inline">while</span> <span class="notranslate">loop</span>. Diese <span class="notranslate">loop</span> Funktion hat die Form:</p>
  <p class="code">while (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>In diesem Fall handelt es sich um eine <a class="glossterm" data-glossterm="Anweisung" href="#">Anweisung</a>, die auf der Grundlage der Ergebnisse der Auswertung eines <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdrucks</a> immer wieder wiederholt wird, d. h. bei einem <span class="inline">while</span> <span class="notranslate">loop</span> wird die Anweisung (die auch ein <span class="notranslate">code</span> Block aus mehreren Anweisungen mit geschweiften Klammern <span class="inline">{}</span> sein kann) ausgeführt, solange der Ausdruck den Wert <span class="inline">true</span> hat. Nachfolgend finden Sie ein Beispiel für eine typische Verwendung von &quot;while&quot;:</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br />
    {<br />
        x -= 1;<br />
    }</p>
  <p>Die obige <span class="notranslate">code</span> prüft, ob eine Kollision zwischen der aufrufenden Instanz und einer &quot;Wand&quot;-Instanz vorliegt, und führt mehrere <a class="glossterm" data-glossterm="Iteration" href="#">Iterationen</a>durch, während eine solche auftritt - wobei die Instanz um ein Pixel nach links verschoben wird - bis die Instanz nicht mehr kollidiert.</p>
  <p><strong>Wann sollten Sie eine <span class="inline">while</span> <span class="notranslate">loop</span> verwenden?</strong> Sie sollte immer dann verwendet werden, wenn Sie eine oder mehrere Anweisungen wiederholen wollen, aber nicht wissen - oder sich nicht darum kümmern - wie oft sie wiederholt werden müssen, wobei zu bedenken ist, dass die Anweisungen möglicherweise nicht einmal ausgeführt werden, wenn die erste Auswertung <span class="inline">false</span> lautet.</p>
  <p>Bitte beachten Sie, dass Sie <strong>mit Ihren <span class="inline">while</span> Schleifen sehr vorsichtig sein</strong> sollten! Sie können leicht <i>unendliche</i> <span class="notranslate">loops</span> machen, in diesem Fall wird Ihr Spiel hängen und nicht mehr auf Benutzereingaben reagieren und muss zwangsweise beendet werden. Zum Beispiel:</p>
  <p class="code">while (!place_free(x, y))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }</p>
  <p>Das obige <span class="notranslate">code</span> kann gut funktionieren, aber es kann auch zu einem unendlichen <span class="notranslate">loop</span> führen, wenn die Instanz nicht in der Lage ist, eine leere Position zu finden, zu der sie sich bewegen kann, und dies wird dazu führen, dass das Spiel hängen bleibt. Wenn du dich in einer Situation befindest, in der so etwas möglich ist, dann solltest du entweder eine andere, nicht blockierende <span class="notranslate">loop</span> Art verwenden, oder eine zusätzliche Variablenprüfung im Ausdruck verwenden (du kannst mehrere Ausdrücke zusammen mit den <a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>)</a>, <a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span>)</a> und <a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span>)</a><span class="glossextra">Operatoren</span> für die Prüfung verwenden):</p>
  <p class="code">var _check = 0;<br />
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        _check += 1;<br />
    }<br />
    if (_check &gt;= 100) <br />
    {<br />
        // code failed, so deal with it<br />
    }</p>
  <p>Alternativ können Sie die Anweisung <span class="inline"><a href="break.htm">break</a></span> verwenden, um aus der <span class="notranslate">loop</span> auszubrechen. Zum Beispiel wird die folgende <span class="notranslate">code</span> 100 Zufallszahlen generieren und dann fortfahren, obwohl die <span class="inline">while</span> Auswertung <em>immer</em> <span class="inline">true</span> sein wird:</p>
  <p class="code">var i = 0;<br />
    while (true)<br />
    {<br />
        x[i] = random(room_width);<br />
        y[i] = random(room_height);<br />
        if ((i++) &gt;= 100)<br />
        {<br />
            break;<br />
        }<br />
    }</p>
  <p>Sie können auch die <a href="continue.htm"><span class="notranslate">continue</span></a> Anweisung in einer <span class="inline">while</span> <span class="notranslate">loop</span> verwenden. Auf diese Weise wird die aktuelle <span class="notranslate">loop</span> Iteration beendet und die Schleife bei einer neuen Iteration neu gestartet, zum Beispiel:</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br />
    var _num = 0;<br />
    while (!file_text_eof(file))<br />
    {<br />
        var _s = file_text_readln(file);<br />
    <br />
        if (_s == &quot;&quot;)<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        str[num++] = _s;<br />
    }<br />
    <br />
    file_text_close(file);
  </p>
  <p>Die obige <span class="notranslate">code</span> öffnet eine Datei und liest bei jeder <span class="notranslate">loop</span> Iteration eine Zeile aus der Datei, bis das Ende des Dateiinhalts erreicht ist. Wenn die gelesene Zeile eine leere Zeichenkette ist, wird die aktuelle <span class="notranslate">loop</span> Iteration mit der Anweisung <span class="inline">continue</span> beendet und eine neue Iteration gestartet, andernfalls wird die Zeichenkette in ein <a href="../Arrays.htm">Array</a> eingefügt und die Arrayposition inkrementiert.</p>
  <p>Weitere Beispiele für <span class="notranslate">loop</span> Funktionen finden Sie in den Abschnitten über <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="do___until.htm"><span class="inline">do... until</span></a>, und <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Language_Features.htm">Sprachliche Merkmale</a></div>
        <div style="float:right">Nächste: <a href="do___until.htm"><span class="notranslate">do / until</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->
</body>
</html>