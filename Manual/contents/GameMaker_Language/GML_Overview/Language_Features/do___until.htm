<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>tun / bis</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the do / until loop" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>tun / bis</h1>
  <p>Eine <span class="inline">do</span> Funktion ist eine weitere Möglichkeit, eine oder mehrere<span class="glossextra">Anweisungen</span> mehrfach zu iterieren, und ist eigentlich eine &quot;<span class="inline">do... until</span>&quot; Anweisung, da man das eine nicht ohne das andere haben kann, da man <span data-keyref="GameMaker Name">GameMaker</span> anweist, etwas zu tun, bis ein bestimmter <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdruck</a> <span class="inline">true</span> zurückgibt. Sie hat diese Form:</p>
  <p class="code">do<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }<br />
    until (&lt;expression&gt;);</p>
  <p>Die Anweisung (bei der es sich um einen <span class="notranslate">code</span> Block mit mehreren Anweisungen innerhalb geschweifter Klammern <span class="inline">{}</span> handeln kann) wird so lange ausgeführt, bis der Ausdruck <span class="inline">true</span> gefunden wird, wobei die erste Anweisung <strong>immer mindestens einmal ausgeführt</strong> wird. Nachstehend finden Sie ein Beispiel für eine typische Verwendung von <span class="inline">do... until</span>:</p>
  <p class="code">do<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }<br />
    until (place_free(x, y));</p>
  <p>Das obige <span class="notranslate">code</span> versucht, das aktuelle Objekt an einer freien Position zu platzieren und setzt die x/y-Variablen mindestens einmal und führt dann so viele <a class="glossterm" data-glossterm="Iteration" href="#">Iterationen</a>durch, bis der <span class="inline">place_free()</span> Ausdruck <span class="inline">true</span> zurückgibt.</p>
  <p><strong>Wann sollten Sie eine <span class="inline">do</span> / <span class="inline">until</span> <span class="notranslate">loop</span> verwenden?</strong> Sie sollte immer dann verwendet werden, wenn Sie eine oder mehrere Anweisungen wiederholen wollen, aber nicht genau wissen, wie oft sie wiederholt werden müssen, und sicherstellen wollen, dass die Anweisungen <em>mindestens einmal</em> ausgeführt werden, bevor die <span class="notranslate">loop</span> endet.</p>
  <p>Sie können auch die <a href="break.htm"><span class="inline">break</span></a> und <a href="continue.htm"><span class="inline">continue</span></a> Anweisungen innerhalb Ihrer <span class="inline">do</span> <span class="notranslate">loops</span> verwenden. Wenn Sie <span class="inline">break</span> verwenden, wird <span class="notranslate">loop</span> sofort beendet und mit <span class="notranslate">code</span> fortgefahren, das sich in dem Ereignis oder der Funktion befindet, nachdem <span class="notranslate">loop</span> beendet sein sollte, z. B:</p>
  <p class="code">var _id = noone;<br />
    do<br />
    {<br />
        _id = list[| 0];<br />
        if (instance_exists(_id))<br />
        {<br />
            break;<br />
        }<br />
        ds_list_delete(list, 0);<br />
    }<br />
    until (ds_list_empty(list));<br />
    <br />
    target = _id;
  </p>
  <p>In der obigen <span class="notranslate">code</span> erstellen wir eine lokale Variable und setzen sie so, dass sie das Schlüsselwort <a href="../Instance_Keywords.htm"><span class="notranslate">noone</span></a>. Dann führen wir eine <span class="inline">do / until</span> <span class="notranslate">loop</span> durch, die die erste Position einer DS-Liste daraufhin überprüft, ob sie eine gültige Instanz-ID enthält, und wenn ja, dann <span class="inline">break</span> die <span class="notranslate">loop</span>, andernfalls wird der Wert für die Listenposition gelöscht. Nachdem die <span class="notranslate">loop</span> beendet ist (entweder durch die <span class="inline">break</span> oder weil die Liste leer ist), wird der Wert der lokalen Variable der Instanzvariablen <span class="inline">target</span> zugewiesen.</p>
  <p>Ein Beispiel für die Verwendung von continue in einer <span class="inline">do / until</span> <span class="notranslate">loop</span> wäre:</p>
  <p class="code">do<br />
    {<br />
        var _x = random(room_width);<br />
        var _y = random(room_height);<br />
    <br />
        if (instance_position(_x, _y, obj_Enemy))<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br />
    }<br />
    until (instance_count(obj_Enemy) &gt;= 10);</p>
  <p>Dieses <span class="notranslate">code</span> erzeugt eine zufällige Raumposition und prüft dann, ob an dieser Position eine Instanz des Objekts <span class="inline">obj_Enemy</span> existiert. Ist dies der Fall, wird die aktuelle <span class="notranslate">loop</span> Iteration mit <span class="inline">continue</span> beendet und eine neue Iteration gestartet. Ist dies nicht der Fall, wird eine Instanz des Objekts <span class="inline">obj_Enemy</span> an der zufälligen Position erstellt. <span class="notranslate">loop</span> wird nur dann beendet, wenn es 10 oder mehr Instanzen des Objekts im Raum gibt.</p>
  <p>Ein letzter Hinweis: Seien Sie vorsichtig mit Ihrer <span class="inline">do</span> <span class="notranslate">loops</span>, da Sie sie leicht zu <span class="notranslate">loop</span> für immer machen können, in diesem Fall wird Ihr Spiel hängen und nicht mehr auf Benutzereingaben reagieren und sie werden es zwangsweise schließen müssen.</p>
  <p>Weitere Beispiele für <span class="notranslate">loop</span> Schlüsselwörter finden Sie in den Abschnitten über <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="while.htm"><span class="inline">while</span></a>, und <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Language_Features.htm">Sprachliche Merkmale</a></div>
        <div style="float:right">Nächste: <a href="for.htm"><span class="notranslate">for</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->
</body>
</html>