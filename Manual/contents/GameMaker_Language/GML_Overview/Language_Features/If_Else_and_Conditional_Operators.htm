<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>wenn / sonst und bedingte Operatoren</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>wenn / sonst und bedingte Operatoren</h1>
  <p>Ein grundlegendes Merkmal der meisten Programmiersprachen ist die Möglichkeit, eine einfache Frage zu stellen, die eine boolesche <span class="inline">true</span> oder <span class="inline">false</span> Antwort gibt, und in <span class="notranslate">GML</span> wird dies mit dem Schlüsselwort <span class="inline">if</span> erreicht. Eine einfache <span class="inline">if</span> Bedingung nimmt einen <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdruck</a> und führt eine oder mehrere<span class="glossextra">Anweisungen</span> aus, wenn der Ausdruck als <span class="inline">true</span> aufgelöst wird, mit der folgenden Grundform:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><br>
    Hier sagen Sie, wenn ein Ausdruck als <span class="inline">true</span> aufgelöst wird, dann tun Sie etwas. Beachten Sie, dass der &quot;then&quot;-Teil der Bedingung <em>implizit</em> ist, aber es gibt ein <span class="inline">then</span> -Schlüsselwort, das verwendet werden kann (obwohl es fast immer weggelassen wird), so dass Sie auch Konditionale wie diese erstellen können:</p>
  <p class="code">if (&lt;expression&gt;) then<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Abgesehen von <span class="inline">if</span> und <span class="inline">then</span> können Sie auch das Schlüsselwort <span class="inline">else</span> verwenden, um etwas anderes zu tun, wenn der zu prüfende Ausdruck als <span class="inline">false</span> ausgewertet wird. Diese &quot;<span class="inline">if... then... else...</span>&quot; Form sieht wie folgt aus:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;;<br />
    }</p>
  <p>In diesem Fall wird der Ausdruck ausgewertet, und wenn er als <span class="inline">false</span> ausgewertet wird, wird die Anweisung nach <span class="inline">else</span> ausgeführt, andernfalls wird die ursprüngliche Anweisung ausgeführt (es ist <span class="inline">true</span>).</p>
  <p class="note"><span class="note">HINWEIS</span> In der Sprache <span class="notranslate">GameMaker</span> wird jeder Wert, der kleiner oder gleich 0 ist, als <span class="inline">false</span> ausgewertet, während jeder Wert, der größer als 0 ist, als <span class="inline">true</span> ausgewertet wird.</p>
  <p>Es ist eine gute Angewohnheit, immer eckige Klammern um die Ausdrücke und geschweifte Klammern {} um die Anweisungen im <span class="inline">if</span> zu setzen (sonst wird nur die erste Anweisung ausgeführt), und für jede Anweisung eine neue Zeile im Block zu nehmen, zum Beispiel:</p>
  <p class="code">// This will work<br />
    if &lt;expression&gt; &lt;statement&gt;;<br />
    <br />
    // Example:<br />
    if test == true variable = false else variable = true;
  </p>
  <p class="code">// This is better<br />
    if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    <br />
    // Example<br />
    if (test == true)<br />
    {<br />
        variable = false;<br />
    }<br />
    else<br />
    {<br />
        variable = true;<br />
    }
  </p>
  <p>Beachten Sie, dass dies zwar etwas ausführlicher ist, aber bedeutet, dass es keine Mehrdeutigkeit in der <span class="notranslate">code</span> gibt und dass sie auf allen <span class="notranslate">platforms</span> immer korrekt kompiliert wird. Das ursprüngliche Beispiel ist jedoch möglicherweise nicht korrekt, wie im Abschnitt <a href="../Expressions_And_Operators.htm">Ausdrücke und Operatoren</a> erläutert.</p>
  <p class="note"><strong>HINWEIS</strong>: Wenn Sie zwei Werte vergleichen, um festzustellen, ob sie gleich sind, sollten Sie den Operator &quot;<span class="inline">==</span>&quot; verwenden, und nur den Operator &quot;<span class="inline">=</span>&quot; für Zuweisungen benutzen. Derzeit behandelt <span class="notranslate">GameMaker</span> diese beiden Operatoren als austauschbar, aber das kann sich in Zukunft ändern, und Ihr <span class="notranslate">code</span> ist sauberer und klarer, wenn Sie die richtigen Operatoren für Vergleiche und Zuweisungen verwenden.</p>
  <p>Um ein gutes Beispiel für die Verwendung von <span class="inline">if</span> zu geben, betrachten Sie die folgende <span class="notranslate">code</span>, die eine Instanz in Richtung der Position <span class="inline">x=200</span> im Raum bewegt, wenn sie im Step Event platziert wird:</p>
  <p class="code">if (x &lt; 200)<br />
    {<br />
        x += 4;<br />
    }<br />
    else<br />
    {<br />
        x = 200;<br />
    }</p>
  <p>Beachten Sie, dass Sie in einer <span class="inline">if</span> auch <i>zusammengesetzte</i> Prüfungen durchführen können, d. h. Sie können verschiedene Werte oder Ausdrücke in derselben Anweisung prüfen. Diese Prüfungen können die verschiedenen <a href="../Expressions_And_Operators.htm">Kombinationsoperatoren</a> (<span class="inline">&amp;&amp;</span> and, <span class="inline">||</span> or, und <span class="inline">^^</span> xor) verwenden. Wenn du dies tust, wertet <span data-keyref="GameMaker Name">GameMaker</span> jeden dieser Ausdrücke einzeln aus, und je nachdem, wie sie gewertet werden, kann der Rest übersprungen werden. Zum Beispiel:</p>
  <p class="code">if (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br />
    {<br />
        go = false;<br />
        alarm[0] = room_speed;<br />
    }</p>
  <p>Hier wird mit dem <span class="inline">&amp;&amp;</span> &quot;und&quot;-Operator geprüft, d. h. es wird geprüft, ob <em>beide </em>Bedingungen in <span class="inline">if</span> zu <span class="inline">true</span> ausgewertet werden, und wenn die erste Bedingung <span class="inline">false</span> ist, wird die zweite Bedingung gar nicht geprüft. Dies wird als &quot;Kurzschluss&quot; der <span class="notranslate">code</span> bezeichnet. Wenn Sie also Ausdrücke zur Überprüfung kombinieren, sollten Sie sicherstellen, dass der &quot;billigste&quot; für die Leistung immer der erste ist, um zu vermeiden, dass die teureren Ausdrücke ausgewertet werden, wenn der erste nach <span class="inline">false</span> ausgewertet wird. Ähnlich verhält es sich, wenn eine Bedingung zur Kompilierungszeit als <span class="inline">true</span> oder <span class="inline">false</span> ausgewertet werden kann, dann wird die gesamte Bedingung aus der <span class="notranslate">code</span> entfernt. Sagen wir zum Beispiel, Sie haben ein <a href="../Variables/Constants.htm">Makro</a> <span class="inline">DEBUG_ON </span>für <span class="notranslate">debugging</span> und es kann entweder <span class="inline">true</span> oder <span class="inline">false</span> sein - wenn es auf <span class="inline">false</span> gesetzt wird, dann wird der folgende <span class="notranslate">code</span> Block aus dem Spiel entfernt, wenn es kompiliert wird:</p>
  <p class="code">if DEBUG_ON == true<br />
    {<br />
        show_debug_message(&quot;Instances = &quot; + string(instance_count));<br />
    }</p>
  <p>Sie können auch <b>bedingte Operationen</b> (auch bekannt als <b>ternäre</b> Operationen) durchführen, die im Wesentlichen eine &quot;Abkürzung&quot; für die Durchführung einer grundlegenden <span class="inline">if</span> sind. Sie haben die folgende Syntax:</p>
  <p class="code">variable = &lt;condition&gt; ? &lt;statement1 (if <i>true</i>)&gt; : &lt;statement2 (if <i>false</i>)&gt;</p>
  <p>Der Bedingungsoperator &quot;<span class="inline">?</span>&quot; gibt einen von zwei vorgegebenen Werten zurück, je nachdem, ob der Bedingungsausdruck z. B. <span class="inline">true</span> oder <span class="inline">false</span> ergibt:</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ? 32 : (room_width - 32);</p>
  <p>Die obige <span class="notranslate">code</span> prüft den Wert von &quot;x&quot; gegen den Wert der halben Raumbreite und setzt dann, wenn er kleiner ist, &quot;<span class="inline">temp_x</span>&quot; auf 32, andernfalls wird &quot;<span class="inline">temp_x</span>&quot; die Raumbreite - 32. Hier sind ein paar weitere Beispiele für die Verwendung:</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.Member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br />
    path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);<br />
    (--hp &lt;= 0) ? instance_destroy() : score += 10;</p>
  <p>Es sei auch darauf hingewiesen, dass Sie bedingte Operationen verschachteln können, dass aber in diesem Fall jede Operation in eckige Klammern eingeschlossen werden muss, zum Beispiel:</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // Correct<br />
    var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;;   // Will cause an error</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a data-xref="{title}" href="../GML_Overview.htm">GML-Übersicht</a></div>
        <div style="float:right">Nächste: <a data-xref="{title}" href="../Addressing_Variables_In_Other_Instances.htm">Adressierung von Variablen in anderen Instanzen</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>