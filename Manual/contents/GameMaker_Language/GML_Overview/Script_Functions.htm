<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Skriptfunktionen und -variablen</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros" />
  <meta name="rh-index-keywords" content="Script Functions And Variables" />
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Skriptfunktionen und -variablen</h1>
  <p>Skript-Assets sind im Wesentlichen eine Sammlung von einer oder mehreren benutzerdefinierten Funktionen oder Variablen, die Sie selbst als Schnipsel von <span class="notranslate">code</span> im <a href="../../The_Asset_Editors/Scripts.htm">Skript-Editor</a> schreiben. Die Funktionen, die Sie in <span class="notranslate">script</span> definieren, können Ausdrücke auflösen, Werte zurückgeben oder alles andere tun, was <span class="notranslate">GameMaker Language</span> erlaubt, genau wie die eingebauten <a href="Runtime_Functions.htm">Laufzeitfunktionen</a>.</p>
  <p>Skriptfunktionen sollten im Allgemeinen verwendet werden, wenn Sie einen Block von <span class="notranslate">code</span> an mehr als einer Stelle oder in mehr als einem Objekt verwenden, oder wenn Sie einen Block von <span class="notranslate">code</span> in mehreren Objekten auf modulare Weise verwenden möchten. Die Verwendung von <span class="notranslate">scripts</span> zur Definition von Funktionen bedeutet, dass Sie die Funktion bei Bedarf nur einmal ändern müssen und die Änderung von jedem Objekt, das die Funktion aufruft, &quot;übernommen&quot; wird.</p>
  <p>Skripte können auch aus organisatorischer Sicht sehr praktisch sein, da sie es Ihnen ermöglichen, Gruppen von Funktionen zu erstellen, die zu einer bestimmten Kategorie gehören - zum Beispiel könnten Sie mehrere Funktionen haben, die alle mit Kollisionen zwischen Instanzen in Ihrem Spiel zu tun haben, also würden Sie ein &quot;<span class="inline">Collision_Functions</span>&quot; <span class="notranslate">script</span> erstellen und alle diese Funktionen darin speichern.</p>
  <p>Siehe auch: <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Skriptfunktionen vs. Methoden</a></p>
  <h2>Funktionen erstellen</h2>
  <p>Wenn Sie eine <span class="notranslate">script</span> mit Funktionen erstellen, müssen die Funktionen in den folgenden Formaten erstellt werden:</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>oder:</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Um eine Funktion in <span class="notranslate">GML</span> Visual zu erstellen, verwenden Sie <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>. Aktivieren Sie die Option &quot;Temp&quot;, um eine Methodenvariable zu erstellen (zweite <span class="notranslate">syntax</span> oben).</p>
  <p>Im Allgemeinen sollten Sie jedoch die <em>erste </em>Form für <span class="notranslate">script</span> -Funktionen verwenden, da sie die Funktion speziell als <span class="notranslate">script</span> -Funktion definiert, was bedeutet, dass sie <strong>global </strong> <a href="Variables_And_Variable_Scope.htm">ist</a>, einen <strong>Skriptindex</strong> zugewiesen bekommt und das Präfix <span class="inline">global</span> nicht benötigt, um sie zu identifizieren, da <span class="notranslate">compiler</span> sie als <span class="notranslate">script</span> -Funktion erkennt.</p>
  <p>Wenn Sie die zweite Form verwenden, erzeugen Sie stattdessen eine <a href="Method_Variables.htm">Methodenvariable</a> mit globalem Geltungsbereich, die als solche von <span class="notranslate">script</span> <em>nicht </em>als <span class="notranslate">IDE</span> Funktion erkannt wird und die Verwendung des Präfixes <span class="inline">global</span> erfordert, wenn Sie in Ihrem <span class="notranslate">code</span> referenziert werden.</p>
  <p class="note"><span class="note">HINWEIS</span> Sie können dies überprüfen, indem Sie beide Formulare in einem <span class="notranslate">script</span> verwenden und dann die Laufzeitfunktion <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a> für jedes von ihnen aufrufen. Eine wird als &quot;Zahl&quot; eingestuft - da sie eine <span class="notranslate">script</span> Index-ID zurückgibt - und die andere wird als &quot;Methode&quot; eingestuft.</p>
  <h2>Parameter/Argumente</h2>
  <p>Sie können eigene Parameter/Argumente für eine Funktion definieren, die der Funktion als lokale Variablen zur Verfügung stehen und für jeden Zweck innerhalb dieser Funktion verwendet werden können:</p>
  <p class="code">function move(<strong>spd, dir</strong>)<br />
    {<br />
        speed = <strong>spd</strong>;<br />
        direction = <strong>dir</strong>;<br />
    }</p>
  <p>Diese Funktion nimmt zwei <span class="notranslate">arguments</span> und wendet deren Werte auf die Variablen <span class="inline">speed</span> und <span class="inline">direction</span> der Instanz an. Sie kann nun wie jede <span class="notranslate">runtime</span> Funktion aufgerufen werden und <span class="notranslate">arguments</span> kann an sie übergeben werden:</p>
  <p class="code">var _mouse_dir = point_direction(x, y, mouse_x, mouse_y);<br />
    <br />
    <strong>move(4, _mouse_dir);</strong>
  </p>
  <h2>Optionale Argumente</h2>
  <p>Wenn ein <span class="notranslate">argument</span> nicht an eine Funktion übergeben wird, ist sein Wert <span class="inline">undefined</span>. Sie können dies verwenden, um <em>optionale</em> Argumente zu definieren und zu prüfen, ob ein <span class="notranslate">argument</span> übergeben wird oder nicht, indem Sie prüfen, ob es gleich <span class="inline">undefined</span> ist. Sie können jedoch auch explizit einen Standardwert für ein <span class="notranslate">argument</span> definieren, der anstelle von <span class="inline">undefined</span> verwendet wird, wenn es nicht übergeben wird.</p>
  <p>Sie können einem Parameter einen solchen Standardwert mit dem Gleichheitszeichen (<span class="inline">=</span>) zuweisen und ihn damit zu einer optionalen Variablen machen:</p>
  <p class="code">function move(spd, <strong>dir = 90</strong>)<br />
    {<br />
        speed = spd;<br />
        direction = dir;<br />
    }</p>
  <p>Wenn <span class="inline">dir</span> <span class="notranslate">argument</span> beim Aufruf der obigen Funktion nicht übergeben wird, wird der Wert standardmäßig auf <span class="inline">90</span> gesetzt und die Instanz nach oben verschoben.</p>
  <p class="note"><span class="tip">TIPP</span> Sie können <span class="notranslate">arguments</span> bei Funktionsaufrufen weglassen, und sie werden standardmäßig auf <span class="inline">undefined</span> (oder den von der Funktion definierten Standardwert für diesen <span class="notranslate">argument</span> ) gesetzt.<br>
    <br>
    Wenn Sie zum Beispiel <span class="inline">my_func(0,,,1)</span> schreiben, ist das dasselbe wie <span class="inline">my_func(0, undefined, undefined, 1)</span>.
  </p>
  <hr />
  <p>Der Standardwert einer optionalen Variablen kann ein Ausdruck sein, so dass Sie zum Beispiel Variablen verwenden und Funktionen aufrufen können, während Sie eine optionale Variable definieren. Beachten Sie, dass ein solcher Ausdruck nur ausgeführt wird, wenn sein optionaler <span class="notranslate">argument</span> nicht im Funktionsaufruf angegeben wird. Siehe das folgende Beispiel für eine Protokollierungsfunktion:</p>
  <p class="code">function log(text = &quot;Log&quot;, object = object_index, time = date_datetime_string(date_current_datetime()))<br />
    {<br />
        var _string = &quot;[&quot; + string(time) + &quot;] &quot;;<br />
        _string += object_get_name(object) + &quot;: &quot;;<br />
        _string += text;<br />
        <br />
        show_debug_message(_string);<br />
    }</p>
  <p>Diese Funktion nimmt drei <span class="notranslate">arguments</span> entgegen, wobei die erste <span class="notranslate">argument</span> eine String-Konstante, die zweite <span class="notranslate">argument</span> eine Instanzvariable (im Bereich der aufrufenden Instanz) und die dritte <span class="notranslate">argument</span> einen Ausdruck, der eine Funktion zum Abrufen des aktuellen Datums und der Uhrzeit aufruft, vorgibt. Diese Funktion kann nun mit bis zu drei Argumenten aufgerufen werden, wie im folgenden Beispiel zu sehen ist:</p>
  <p class="code">log();<br />
    // Prints: [09-Jun-21 12:34:37 PM] Object1: Log<br />
    <br />
    log(&quot;Player Shot&quot;, obj_player, 10);<br />
    // Prints: [10] obj_player: Player Shot
  </p>
  <h2>JSDoc</h2>
  <p>Wir empfehlen auch, dass Sie Kommentare hinzufügen, um die Eigenschaften der Funktion zu definieren (siehe den Abschnitt über <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">JSDoc-Kommentare</a> für weitere Einzelheiten), so dass eine einfache <span class="notranslate">script</span> wie folgt aussehen würde:</p>
  <p class="code">/// @function                 log(message);<br />
    /// @param {string}  message  The message to show<br />
    /// @description              Show a message whenever the function is called.<br />
    <br />
    function log(message)<br />
    {<br />
        show_debug_message(message);<br />
    }
  </p>
  <p>Zusätzliche Funktionen für <span class="notranslate">script</span> können nach demselben Muster wie oben gezeigt nacheinander in der Anlage <span class="notranslate">script</span> hinzugefügt werden.</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png" /></p>
  <h2>Rückgabewert</h2>
  <p>Die Funktionen in <span class="notranslate">scripts</span> können auch einen Wert zurückgeben, genau wie die Funktionen in <span class="notranslate">runtime</span>, und als solche können sie in Ausdrücken verwendet werden. Hierfür verwenden Sie die <a href="Language_Features/return.htm"><span class="inline">return</span></a> Anweisung:</p>
  <p class="code">return &lt;expression&gt;</p>
  <p>Es ist zu beachten, dass die <strong><i>die Ausführung der Funktion endet mit der Return-Anweisung</i></strong>bedeutet, dass jede <span class="notranslate">code</span>, die nach der <strong>return-Anweisung </strong>aufgerufen wird <i>, nicht ausgeführt wird</i>. Hier ist eine kurze Beispielfunktion aus einer Funktion namens &quot;<span class="inline">sqr_calc</span>&quot;, die das Quadrat eines beliebigen Wertes berechnet, der ihr übergeben wird, und für den Fall, dass der angegebene Wert keine reelle Zahl ist, verwendet sie <strong>return</strong>, um die Funktion frühzeitig zu beenden, so dass die eigentliche Berechnung nie ausgeführt wird:</p>
  <p class="code">/// @function           sqr_calc(val);<br />
    /// @param {real}  val  The value to calculate the square of<br />
    /// @description        Calculate the square of the given value<br />
    <br />
    function sqr_calc(val)<br />
    {<br />
        if (!is_real(val))<br />
        {<br />
            return 0;<br />
        }<br />
    <br />
        return (val * val);<br />
    }
  </p>
  <p>Beachten Sie, dass, wenn Sie eine Funktion <span class="notranslate">script</span> <em>ohne</em> Rückgabewert erstellen und dann in Ihrer <span class="notranslate">code</span> nach einem solchen suchen, Sie standardmäßig den Wert <span class="inline">undefined</span> erhalten.</p>
  <p>Um eine Funktion <span class="notranslate">script</span> aus einem Teil von <span class="notranslate">code</span> aufzurufen, verwenden Sie sie genauso wie eine beliebige Funktion <span class="notranslate">runtime</span>, d.h. Sie schreiben den Funktionsnamen mit den Parameterwerten in Klammern. Die obige <span class="notranslate">script</span> würde also wie folgt aufgerufen werden:</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br />
    {<br />
        val = sqr_calc(amount);<br />
    }</p>
  <p class="note"><strong>HINWEIS</strong>: Wenn Sie Ihre eigenen Funktionen von <span class="notranslate">scripts</span> im <span class="notranslate">code</span> Editor verwenden, können Sie die<span> <img></span> drücken oder mit der mittleren Maustaste <span><img> </span>auf den Funktionsnamen drücken oder klicken, um die <span class="notranslate">script</span>, die die Funktion enthält, direkt zur Bearbeitung zu öffnen.</p>
  <h2>Skript-Namen vs. Funktions-Namen</h2>
  <p>Es ist wichtig zu verstehen, dass die <i>Namen von</i> <span class="notranslate">script</span> <b>unabhängig von den Funktionen</b> sind <b>, die sie enthalten</b>, so dass Sie Ihre <span class="notranslate">scripts</span> mit gesundem Menschenverstand benennen können, d.h. alle Ihre KI-Funktionen könnten in einem <span class="notranslate">script</span> &quot;<span class="inline">Enemy_AI</span>&quot; untergebracht werden (unter Beachtung der Standard-Asset-Namenskonventionen, die nur alphanumerische Zeichen und den Unterstrich &quot;_&quot; vorsehen). Dennoch können Sie <span class="notranslate">scripts</span> in Ihrem Spiel aufrufen - und Sie können <span class="notranslate">scripts</span> genauso benennen wie eine Funktion, die Sie in ihnen definieren - was aufgrund der Art und Weise, wie <span data-keyref="GameMaker Name">GameMaker</span> Asset-Referenzen speichert, zu Problemen führen kann. Als Beispiel sei hier <span class="notranslate">code</span> genannt, das von einer Instanz aufgerufen wird:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Die obige <span class="notranslate">code</span> versucht, eine <span class="notranslate">script</span> namens &quot;myscript&quot; innerhalb einer Methode aufzurufen, was in diesem Fall fehlschlagen wird. Das liegt daran, dass die Inline-Funktion den <em>Index</em> für das Asset <span class="notranslate">script</span> verwendet und <strong>nicht </strong>die Funktion <span class="notranslate">script</span> aufruft - z. B. wenn der Index <span class="notranslate">script</span> zu &quot;4&quot; aufgelöst wird, ruft die Funktion im Grunde <span class="inline">4(arg);</span> auf, was keinen Sinn ergibt. Die <span class="notranslate">code</span> sollte stattdessen auf eine der beiden folgenden Arten strukturiert werden:</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(method(undefined, myscript), arg);<br />
    <br />
    // 2<br />
    function indirectCall(func, arg)<br />
    {<br />
        script_execute(func, arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Dies ist wichtig zu beachten, insbesondere bei der Arbeit mit Legacy-Projekten, bei denen <span class="notranslate">scripts</span> eine einzige Funktion enthält und die Funktion denselben Namen trägt wie <span class="notranslate">script</span>. Sie sollten dies jedoch <em>niemals</em> tun, und Ihre <span class="notranslate">scripts</span> sollten unabhängig von den enthaltenen Funktionen benannt werden.</p>
  <div data-conref="../../assets/snippets/Script_empty_reference_error.hts"> </div>
  <h2>Skriptumfang</h2>
  <p>Dies führt uns zum letzten und wichtigsten Punkt, den man über <span class="notranslate">scripts</span> und die darin enthaltenen Funktionen wissen sollte: <span class="notranslate">scripts</span> wird auf <b>globaler</b> Ebene geparst und <strong>gleich zu Beginn des Spiels kompiliert</strong>. Das bedeutet, dass <em>technisch gesehen</em> alle Funktionen in einem <span class="notranslate">script</span> &quot;ungebundene&quot; <a href="Method_Variables.htm">Methodenvariablen</a> sind, und alle Variablen, die außerhalb einer Funktion in <span class="notranslate">script</span> deklariert werden, werden als <a href="Variables/Global_Variables.htm">globale Variablen</a> betrachtet. Betrachten Sie zum Beispiel dieses Skript:</p>
  <p class="code">function Foo()<br />
    {<br />
        // Do something<br />
    }<br />
    blah = 10;<br />
    function Bar()<br />
    {<br />
        // Do something else<br />
    }</p>
  <p>Im obigen Fall haben wir nicht nur die Funktionen <span class="inline">Foo</span> und <span class="inline">Bar</span> definiert, sondern auch die Variable <span class="inline">blah</span>, und alle diese Funktionen werden als im <b>globalen</b> Bereich erstellt betrachtet. Die Funktionen benötigen das Schlüsselwort <span class="inline">global</span> nicht, um erkannt zu werden, da <span class="notranslate">compiler</span> weiß, dass diese Funktionen Teil von <span class="notranslate">script</span> sind. Wenn Sie jedoch auf <span class="inline">blah</span> zugreifen wollten, müssten Sie dies tun:</p>
  <p class="code">val = global.blah;</p>
  <p>Trotzdem empfehlen wir, <b>globale Variablen immer explizit zu typisieren</b>, wenn sie in <span class="notranslate">scripts</span> erstellt werden, um spätere Probleme zu vermeiden. <span class="notranslate">Scripts</span> ist auch ein idealer Ort, um <strong>Makros</strong> oder <strong>Enums</strong><a href="Variables/Constants.htm">(Konstanten</a>) zu definieren, da das Hinzufügen zu einer <span class="notranslate">script</span> außerhalb einer Funktion auch bedeutet, dass sie zur Verwendung erstellt werden, bevor das Spiel <span class="notranslate">code</span> tatsächlich läuft. Im Folgenden finden Sie ein Beispiel für ein <span class="notranslate">script</span>, das verschiedene globale Werte für ein Spiel erstellt:</p>
  <p class="code">/// Initialise All Global Scope Values And Constants<br />
    global.player_score = 0;<br />
    global.player_hp = 100;<br />
    global.pause = false;<br />
    global.music = true;<br />
    global.sound = true;<br />
    <br />
    enum rainbowcolors<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }<br />
    <br />
    #macro weapon_num 3<br />
    #macro weapon_gun 0<br />
    #macro weapon_bomb 1<br />
    #macro weapon_knife 2
  </p>
  <p>Beachten Sie, dass alle diese Konstanten außerhalb eines Funktionsaufrufs eingerichtet werden, d.h. sie werden vor allem anderen und in einem <em>globalen </em>Bereich initialisiert. Das heißt, wenn Sie ein Skript verwenden möchten, um Variablen auf einer <em>Instanz-Ebene </em>zu initialisieren, müssen Sie sie z. B. in eine Funktion verpacken:</p>
  <p class="code">/// @function                init_enemy();<br />
    /// @description             Initialise enemy instance vars<br />
    <br />
    function init_enemy()<br />
    {<br />
        hp = 100;<br />
        dmg = 5;<br />
        mana = 50;<br />
    }
  </p>
  <p>So kann <span class="notranslate">scripts</span> verwendet werden, um Makros, Enums und globale Variablen zu erzeugen, bevor das Spiel startet, so dass sie jederzeit einsatzbereit sind, und sie können auch verwendet werden, um &quot;ungebundene&quot; Methoden (benutzerdefinierte Funktionen) zu erstellen, die in Ihrem Spiel wie <span class="notranslate">GML</span> <span class="notranslate">runtime</span> Funktionen verwendet werden können.</p>
  <p>Ein letzter Hinweis zu den Funktionen von <span class="notranslate">script</span>: Wenn Sie für das <strong>Web </strong> entwickeln (d. h. für <strong>HTML5</strong>), gibt es ein zusätzliches Funktionsprotokoll, das Sie verwenden können, wenn Sie Funktionen zu <span class="notranslate">scripts</span> hinzufügen, indem Sie dem Funktionsnamen z. B. <span class="inline">gmcallback_</span> voranstellen:</p>
  <p class="code">gmcallback_create_button</p>
  <p>Die Verwendung des obigen Funktionsnamens würde bedeuten, dass die Funktion <span class="inline">gmcallback_create_button()</span> nicht verschleiert wird und somit in JavaScript-Erweiterungen und anderen Bereichen Ihres Spiels verwendet werden kann, z. B. bei Verwendung der <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><span class="inline">clickable_*</span></a> Funktionen.</p>
  <h2>Statische Variablen</h2>
  <p>Funktionen können auch statische Variablen verwenden, die ihre Werte bei jedem Funktionsaufruf beibehalten. Bitte <a href="Functions/Static_Variables.htm">lesen Sie diese Seite</a> für weitere Informationen.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="GML_Overview.htm">GML-Übersicht</a></div>
        <div style="float:right">Nächste: <a href="Method_Variables.htm">Methodenvariablen</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>