<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Datenarten</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Data Types" />
  <meta name="rh-index-keywords" content="Data Types" />
  <meta name="search-keywords" content="Data Types" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Datenarten</h1>
  <p>Im vorangegangenen Abschnitt haben wir uns mit <a href="Variables_And_Variable_Scope.htm">Variablen und ihren Zuordnungsregeln</a> befasst, aber es wurde wenig über die verschiedenen <b>Datentypen</b> gesagt, die eine Variable speichern kann. Daher werden in diesem Abschnitt die verschiedenen Typen erklärt und wofür sie verwendet werden können.</p>
  <p>Bevor wir fortfahren, wollen wir kurz erklären, was wir mit &quot;Datentypen&quot; meinen. Wenn Sie eine Variable erstellen, kann sie zur Speicherung von Informationen verwendet werden, und wenn Sie eine Funktion aufrufen, kann sie auch die zurückgegebenen Informationen speichern. Diese Informationen können jedoch in verschiedenen &quot;Geschmacksrichtungen&quot; vorliegen - zum Beispiel kann es sich um eine <em>reelle Zahl</em> oder um eine <em>Zeichenkette</em> handeln. Diese verschiedenen Arten von Werten werden als <b>Datentypen</b> bezeichnet, und bei der Verwendung von <span class="notranslate">GameMaker Language</span> kann es sich um eine der folgenden Arten handeln:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Echte Zahlen</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Reelle Zahlen sind alle Werte, die weder eine Zeichenkette noch einer der anderen möglichen Datentypen sind. So sind 124, 45639.566546456, 0, -45.5 usw. alles Beispiele für reelle Zahlen. Alle reellen Zahlen werden als 64-Bit-Doppelpräzisions-Gleitkommazahlen (oder Integer-Werte) gespeichert, und <span class="notranslate">compiler</span> optimiert, wo dies möglich ist (z. B. wird 0,0 auf den Integer-Wert 0 optimiert).</p>
    <p class="dropspot">Wenn Sie mit einem Wert arbeiten, der keine ganze Zahl ist, können aufgrund der Natur der Fließkommamathematik leichte Rundungsfehler auftreten. Weitere Informationen zu dieser und anderen Zahlenfunktionen finden Sie unter: <a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">GML Referenz - Zahlenfunktionen</a>.</p>
    <p class="note"><span class="note">HINWEIS</span> Auf dem <b>HTML5-Ziel</b> sind alle reellen Zahlen verdoppelt.</p>
    <p class="dropspot">Beachten Sie, dass erstellte Variablen in <span data-keyref="GameMaker Name">GameMaker</span> zwar alle als doppelpräzise Fließkommazahlen oder Ganzzahlen gespeichert werden, Sie aber im Umgang mit Erweiterungen auch andere Formate verwenden können. Diese können von einer Erweiterung an <span data-keyref="GameMaker Name">GameMaker</span> übergeben und dann mit der entsprechenden Funktion <span class="inline">is_*()</span> überprüft werden. Eine Liste der Funktionen finden Sie <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">hier</a>.</p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Boolesche</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">Ein Boolescher Wert ist einfach ein Wert, der entweder <span class="inline">true</span> oder <span class="inline">false</span> sein kann. Beachten Sie, dass <span data-keyref="GameMaker Name">GameMaker</span> derzeit eine reelle Zahl gleich oder kleiner als 0,5 als <span class="inline">false</span> Wert und jede reelle Zahl größer als 0,5 als <span class="inline">true</span> interpretiert.
      Das bedeutet jedoch <i>nicht</i>, dass Sie 1 und 0 (oder jede andere reelle Zahl) auf wahr und falsch überprüfen sollten, da Sie auch die <b>Konstanten</b> <span class="inline">true</span> und <span class="inline">false</span> zur Verfügung haben, die immer in Ihrem <span class="notranslate">code</span> verwendet werden sollten, um
      um Probleme zu vermeiden, falls in einem zukünftigen Update echte boolesche Datentypen hinzugefügt werden.</p>
    <p class="dropspot">Mit der folgenden Funktion können Sie jede reelle Zahl in einen impliziten booleschen Wert umwandeln:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm"><span class="notranslate">bool</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Streicher</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><label for="one">Eine Zeichenkette ist einfach ein Text, der in Anführungszeichen &quot;...&quot; gesetzt wurde. Sie können bestimmte Operationen mit Strings durchführen, z. B. zwei Strings zusammenfügen, um einen längeren String zu erstellen (Verkettung), und Sie können auch die Eigenschaften von Strings ändern und sogar reelle Zahlen aus ihnen extrahieren. Für weitere Informationen über Strings und die String-Funktionen siehe: <a href="../GML_Reference/Strings/Strings.htm">GML-Referenz - Zeichenketten</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Arrays</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><label for="three">Ein Array ist ein spezieller Datentyp, der zur Aufnahme mehrerer Werte verwendet werden kann. Sie weisen das Array einer Variablen zu und &quot;füllen&quot; dann verschiedene Indizes des Arrays mit Werten. Dieses Array kann dann an <span class="notranslate">scripts</span> und Funktionen weitergegeben werden. Sollten Sie jedoch das übergebene Array ändern, wird es zu einer Kopie des ursprünglichen Arrays und muss daher an die ursprüngliche Variable zurückgegeben werden, damit das Array aktualisiert werden kann. Für weitere Informationen über Arrays, siehe bitte: <a href="Arrays.htm">GML Übersicht - Arrays</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Strukturen</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><label for="eleven">Ein struct (manchmal auch &quot;lightweight object&quot; genannt) ist eine Rohdatenstruktur, die als Container für Variablen aller Datentypen dient. Sie ordnen eine struct einer Variablen zu und können dann in der struct weitere Variablen definieren, aus denen dann nach Bedarf gelesen oder in die geschrieben werden kann. Ausführlichere Informationen zu Structs finden Sie im Abschnitt <a href="Structs.htm">GML Überblick - Structs</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Variablen der Methode</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><label for="twelve">Eine Methodenvariable ist eine Variable, der eine Funktion zugewiesen wurde, und sie kann genauso verwendet werden wie eine <span class="notranslate">GML</span> <span class="notranslate">runtime</span> Funktion. Ausführlichere Informationen finden Sie im Abschnitt <a href="Method_Variables.htm">Methodenvariablen</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">int64</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">Ein &quot;int64&quot; ist eine 64-Bit-Ganzzahl, die mit <span class="inline"><a href="../GML_Reference/Variable_Functions/int64.htm">int64()</a></span> (durch Übergabe einer Nicht-64-Bit-Realzahl) oder beim Lesen eines <span class="inline">buffer_u64</span> -Wertes aus einem <a href="../GML_Reference/Buffers/buffer_read.htm">Puffer</a> erstellt werden kann.</p>
    <p class="dropspot">Dies kann an Stellen verwendet werden, an denen eine 64-Bit-Ganzzahl unbedingt erforderlich ist, oder wenn Sie mit <a href="../../Additional_Information/Bitwise_Operators.htm">Bit-Shifting</a> arbeiten wollen und diese 64-Bit-Positionen benötigen.</p>
    <p class="dropspot">Alle bitweisen Operationen, auch wenn sie auf Nicht-64-Bit-Werten ausgeführt werden, geben immer eine 64-Bit-Ganzzahl zurück.</p>
    <p class="dropspot">Divisionen durch int64-Werte ergeben ebenfalls ganze Zahlen (z. B.: <span class="inline2">int64(5) / int64(2) = 2</span>).</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Hexadezimale Werte</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span> akzeptiert <b>hexadezimale Literale</b> als legitime Werte. Hexadezimale Werte sind vor allem bei der Arbeit mit Farben gebräuchlich, können aber überall verwendet werden, wo ein positiver ganzzahliger Wert benötigt wird. Hexadezimale Werte können auf die folgenden beiden Arten formatiert werden, wobei <span class="inline"><em>abcd</em></span> der tatsächliche Hex-Wert ist:</p>
    <p class="code"><span style="background-color: transparent;"><strong>$</strong><em>abcd</em></span><br />
      <strong>0x</strong><em>abcd</em>
    </p>
    <p class="dropspot">Die folgenden dezimalen Werte können zum Beispiel wie gezeigt hexadezimal ausgedrückt werden:</p>
    <p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br />
      <strong>16777215</strong> -&gt; $ffffff, 0xffffff
    </p>
    <hr />
    <p class="dropspot">Ein hexadezimaler Wert kann auch mit einem Hash/Pound-Symbol<span class="inline2">(#</span>) beginnen. Wenn er jedoch auf diese Weise geschrieben wird, entspricht sein Wert nicht einem ähnlichen Hexadezimalwert, der in einem zuvor angezeigten Format<span class="inline2">($</span> oder <span class="inline2">0x</span>) geschrieben wurde. Dies liegt an der Art und Weise, wie Farben in <span class="notranslate">GML</span> interpretiert werden, was eine Änderung des Formats für Hash/Pound-Hex-Werte erforderte, damit CSS-Farben in einem <span class="inline2">#RRGGBB-Format</span> geschrieben werden können. Für weitere Informationen lesen Sie bitte <a data-xref="{text}" href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#h">Hex-Farben</a>.</p>
    <p class="dropspot">Zum Beispiel sind die beiden folgenden nicht gleich:</p>
    <p class="code">$2c8edd <strong>!=</strong> #2c8edd</p>
    <p class="dropspot">Damit sie sich auf denselben Dezimalwert beziehen, müssten Sie die ersten beiden und die letzten beiden Zeichen vertauschen:</p>
    <p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Zeiger</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Ein Zeiger ist ein Datentyp, der auf eine Speicherstelle &quot;zeigt&quot;. Sie können keine Operationen mit einem Zeiger durchführen und er wird nur für einige sehr spezifische Funktionen verwendet, wie z. B. das Abrufen einer Textur oder der Adresse <span class="notranslate">buffer</span> aus dem Speicher für eine andere Funktion. Beispiele für Funktionen, die einen Zeiger zurückgeben, finden Sie unter <a href="../GML_Reference/Buffers/buffer_get_address.htm"><span class="inline">buffer_get_address()</span></a> oder <a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><span class="inline">sprite_get_texture()</span></a>.</p>
    <p class="dropspot">Es gibt auch eine Funktion, die prüft, ob ein Wert ein Zeiger ist (siehe &quot;<b>Prüfen von Datentypen</b>&quot;, unten) und eine Funktion, die einen Wert in einen Zeiger umwandelt:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;"><span class="notranslate">ptr</span></a></li>
    </ul>
    <p class="dropspot">Bei der Verwendung von Zeigern können Sie auch die folgenden eingebauten Konstanten verwenden (und zurückerhalten):</p>
    <table class=" cke_show_border">
      <tbody>
        <tr>
          <th>Konstante</th>
          <th>Beschreibung</th>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_null</span></td>
          <td>Diese Konstante zeigt an, dass der Zeiger auf nichts Sinnvolles verweist (dasselbe wie <span class="inline">NULL</span> in C++ oder <span class="inline">null</span> in C#). Dieser Wert ist <a class="glossterm" data-glossterm="falsy" href="#">falsy</a>.</td>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
          <td>Diese Konstante bedeutet einfach, dass der Wert kein gültiger Zeiger ist</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Enum</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">Ein Enum ist ein &quot;Aufzähler&quot;, der es Ihnen im Wesentlichen ermöglicht, Ihren eigenen begrenzten Datentyp mit einer Liste konstanter Werte zu erstellen. Enums werden auf der Seite für <a href="Variables/Constants.htm">Konstanten</a> eingehend erläutert.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Unbestimmt</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot"><label for="seven">Ein undefinierter Wert (auch als &quot;Null&quot;-Wert bezeichnet) liegt vor, wenn ein Ausdruck keinen korrekten Wert hat, obwohl er syntaktisch korrekt ist, und daher <i>etwas</i> zurückgeben muss. Nehmen wir zum Beispiel an, Sie haben eine <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS-Map</a> und verwenden die Funktion <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><span class="inline">ds_map_find_value()</span></a>. Was passiert nun, wenn die Map nicht den gesuchten Wert enthält? Nun, da die Funktion korrekt formatiert ist und das Problem darin besteht, dass kein solcher Wert vorhanden ist, würde sie die Konstante <span class="inline">undefined</span> zurückgeben, und Sie können auf diese Konstante genauso prüfen wie auf <span class="inline">true</span> oder einen anderen Wert.<br></label></p>
    <p class="code"><label for="seven">var _value = ds_map_find_value(my_map, &quot;key&quot;);<br /><br />if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br />    show_debug_message(&quot;The key does not exist!&quot;);<br />}</label><br /></p>
    <p class="dropspot"> <br /></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">NaN</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><label for="nine"><span class="inline">NaN</span> steht für &quot;not a number&quot; und ist eine Konstante, die zurückgegeben werden kann, wenn <span class="notranslate">compiler</span> das Ergebnis einer Operation nicht als Zahl auswerten kann. Zum Beispiel kann 0/0 nicht als reelle Zahl definiert werden und wird daher durch <span class="inline">NaN</span> dargestellt, oder die Quadratwurzel einer negativen Zahl - die als &quot;imaginäre&quot; Zahl gilt - kann nicht als reelle Zahl dargestellt werden und wird daher durch <span class="inline">NaN</span> dargestellt.</label></p>
    <p class="dropspot">Da <span class="inline">NaN</span> keine Zahl ist, kann sie nicht mit sich selbst verglichen werden, so dass Vergleiche wie <span class="inline">NaN == NaN</span> <span class="inline">false</span> ergeben. Das Gleiche gilt für einen Array-Vergleich wie den folgenden:</p>
    <p class="code">show_debug_message(array_equals([NaN], [NaN]));<br />
      <br />
      // Output: 0 (false)
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Unendlichkeit</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">Die Konstante <span class="inline">infinity</span> bezieht sich auf eine Zahl, die als unendlich angesehen wird, wie z. B. das Ergebnis, das man erhält, wenn man eine beliebige Fließkommazahl durch Null teilt, z. B.: 1,0/0.</p>
    <p class="dropspot">Beachten Sie, dass die Konstante <span class="inline">infinity</span> gleich sich selbst ist, so dass <span class="inline">infinity == infinity</span> <span class="inline">true</span> zurückgibt.</p>
  </div>
  <p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">Jede</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">Der Datentyp &quot;<strong>Any</strong>&quot; ist auf vielen Seiten des Handbuchs zu finden, z. B. <a href="../GML_Reference/Variable_Functions/is_string.htm">im <span class="notranslate">arguments</span>,</a> oder als <a href="../GML_Reference/Variable_Functions/array_get.htm">Rückgabewert</a>. Er zeigt an, dass <em>jede Art von Wert</em> akzeptiert wird oder zurückgegeben werden kann.</p>
  </div>
  <p> </p>
  <p>Sie können den Datentyp einer beliebigen Variablen mit den auf der folgenden Seite aufgeführten Funktionen überprüfen:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Variable Funktionen</a></li>
  </ul>
  <p>Hier finden Sie auch Tabellen mit arithmetischen Typen, die die Ergebnisse verschiedener Operationen mit gemischten variablen Datentypen zeigen:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="../../Additional_Information/Type_Tables.htm">Typ-Tabellen</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="GML_Overview.htm">GML-Übersicht</a></div>
        <div style="float:right">Weiter: <a data-xref="{title}" href="Language_Features/If_Else_and_Conditional_Operators.htm">if / else und bedingte Operatoren</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->
</body>
</html>