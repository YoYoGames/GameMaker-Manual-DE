<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Bewertungsauftrag</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the Evaluation Order of arguments" />
  <meta name="rh-index-keywords" content="Evaluation Order" />
  <meta name="search-keywords" content="Evaluation Order" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Bewertungsauftrag</h1>
  <p>Wenn Sie Ihr Spiel mit <span class="notranslate">GameMaker Language</span> programmieren, sollten Sie sich bewusst sein, dass die <strong>Reihenfolge</strong> der Funktionsaufrufe <span class="notranslate">arguments</span> <strong>nicht garantiert ist</strong>. Das bedeutet, dass sich die Reihenfolge, in der die Funktionen in Ihrem <span class="notranslate">code</span> ausgeführt werden, von <span class="notranslate">platform</span> zu <span class="notranslate">platform</span> ändern kann. Daher sollten Sie <span class="notranslate">code</span> explizit darauf hinweisen. Dies ist auf die Optimierungsunterschiede zwischen den verschiedenen Zielen <span class="notranslate">platforms</span> zurückzuführen. So können beispielsweise auf dem Ziel <span class="notranslate">Windows</span> die Funktionsargumente von rechts nach links ausgewertet werden, auf dem HTML5-Ziel jedoch von links nach rechts. Um Probleme zu vermeiden, sollten Sie also am besten nicht mehrere Funktionen in <span class="notranslate">arguments</span> eines einzigen Funktionsaufrufs aufrufen, da Sie sich sonst möglicherweise auf die Reihenfolge der Auswertung verlassen.</p>
  <p>Ein Beispiel dafür ist die folgende <span class="notranslate">code</span>, die eine <a href="Script_Functions.htm">Skriptfunktion</a> &quot;<span class="inline">buffer_get_info</span>&quot; enthält, die mehrere <a href="Runtime_Functions.htm">Laufzeitfunktionen</a> aufruft und als Argumente verwendet:</p>
  <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
    buffer_get_info(buffer_read(buff, buffer_s8), buffer_read(buff, buffer_s16),buffer_read(buff, buffer_s16));</p>
  <p>Das Problem hierbei ist, dass bei einigen <span class="notranslate">platforms</span> die <i>letzte</i> <span class="inline">buffer_read()</span> <i>zuerst</i> aufgerufen wird und somit alle <span class="notranslate">arguments</span> der <span class="notranslate">script</span> falsch sind, da die Daten aus der <span class="notranslate">buffer</span> in &quot;umgekehrter&quot; Reihenfolge gelesen werden, wie Sie es wahrnehmen würden. Dies wirkt sich auf alle weiteren Werte für die Funktion <span class="inline">buffer_read()</span> aus, so dass alle <span class="notranslate">arguments</span>, die an die Funktion <span class="notranslate">script</span> übergeben werden, falsch sind!</p>
  <p>Um dies zu umgehen, sollten Sie die Funktionen <i>explizit</i> in der gewünschten Reihenfolge aufrufen und die zurückgegebenen Werte in Variablen speichern, etwa so:</p>
  <p class="code">var val[0] = buffer_read(buff, buffer_s8);<br />
    var val[1] = buffer_read(buff, buffer_s16);<br />
    var val[2] = buffer_read(buff, buffer_s16);<br />
    buffer_get_info(val[0], val[1], val[2]);</p>
  <p>Diese Methode mag zwar etwas langatmig erscheinen, aber sie sorgt für Klarheit und vermeidet mögliche Probleme mit der Auswertungsreihenfolge.</p>
  <p>Auch bei der Verwendung von <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdrücken</a>sollten Sie Vorsicht walten lassen, da sich die Reihenfolge, in der sie ausgewertet werden, ändert, je nachdem, für welches Ziel Sie kompilieren. Wenn Sie also Ausdrücke in Ihrem <span class="notranslate">code</span> verwenden, stellen Sie sicher, dass Sie Klammern <span class="inline">()</span> verwenden, um die Reihenfolge der Operationen zu kontrollieren. Dies ist sehr wichtig, um das korrekte Verhalten Ihrer Spiele in allen Zielsystemen <span class="notranslate">platforms</span> zu gewährleisten und ist für HTML5 <span class="notranslate">platform</span><i>unerlässlich</i>. Auf der Seite über <a href="Expressions_And_Operators.htm">Ausdrücke</a> wird dies ausführlicher erklärt.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="GML_Overview.htm">GML-Übersicht</a></div>
        <div style="float:right">Nächste: <a data-xref="{title}" href="Accessors.htm">Accessors</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
evaluation order
-->
  <!-- TAGS
evaluation_order
-->
</body>
</html>