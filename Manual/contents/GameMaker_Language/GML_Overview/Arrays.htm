<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Arrays</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Arrays" />
  <meta name="rh-index-keywords" content="Arrays" />
  <meta name="search-keywords" content="Arrays" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Arrays</h1>
  <p>Arrays können äußerst nützlich sein und sind ein wesentlicher Bestandteil der Spieleentwicklung. Es handelt sich im Wesentlichen um eine Art von Variablen, die mehrere Werte als &quot;Liste&quot; enthalten können - siehe den folgenden Code:</p>
  <p class="code">numbers = [ 0, 1, 2, 3, 4, 5 ];<br />
    <br />
    fruits = [ &quot;Apples&quot;, &quot;Oranges&quot;, &quot;Mangoes&quot; ];
  </p>
  <p>Mit <span class="inline2">[item, item, item]</span> <span class="notranslate">syntax</span> erstellen wir ein Array, das in einer Variablen gespeichert wird. Auf die in einem Array gespeicherten Elemente kann später über diese Variable zugegriffen werden, indem eine ganzzahlige Zahl, beginnend mit <span class="inline">0</span>, innerhalb von <span class="inline2">[]</span> -Klammern angegeben wird:</p>
  <p class="code">first_fruit = fruits[ 0 ];<br />
    second_fruit = fruits[ 1 ];<br />
    // ...and so on.</p>
  <p><label for="aone">Ein einfaches Array hat 1 <strong>Dimension</strong>, aber Sie können auch Arrays mit mehr als einer Dimension haben. In den folgenden Abschnitten werden beide Arten von Arrays erläutert:</label></p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">1-dimensionale Arrays</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Bevor wir weitermachen, sollten wir klären, was ein Array eigentlich ist und wie es aufgebaut ist. Ein Array ist einfach ein <a href="Data_Types.htm">Datentyp</a>, der einer Variablen zugewiesen wird, und es kann nicht nur einen Wert, sondern mehrere Werte enthalten. Die folgende Abbildung zeigt ein Schema für ein einfaches Array:</p>
    <p class="dropspot"><img class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/1DArrayExample.png" /></p>
    <p class="dropspot">Dies wird als <strong>1D-Array</strong> (eindimensionales Array) bezeichnet, und wie Sie sehen können, wird das Array in der Variablen &quot;<span class="inline">a</span>&quot; gespeichert und enthält mehrere Werte. Um auf das Array zuzugreifen, würden Sie etwa wie folgt vorgehen:</p>
    <p class="code">var _val = a[0];<br />
      show_debug_message(_val);</p>
    <p class="dropspot">Die obige <span class="notranslate">code</span> holt sich den Wert von Position 0 des Arrays &quot;<span class="inline">a</span>&quot; und gibt ihn dann auf der Konsole aus, was - basierend auf dem Inhalt des Arrays in der obigen Abbildung - 125 ergeben würde. Wenn Sie das Folgende tun:</p>
    <p class="code">var _val = a[3];<br />
      show_debug_message(_val);</p>
    <p class="dropspot">Die Ausgabe würde &quot;Hallo!&quot; anzeigen.</p>
    <p class="dropspot">Wie Sie sehen können, geben Sie dem Array einen Variablennamen und dann einen Wert in eckigen Klammern <span class="inline">[]</span>, wobei der Wert die Position im Array ist, von der die Daten abgerufen werden sollen. Ein Array ist also im Wesentlichen ein Container mit einer Reihe von Steckplätzen zum Speichern von Werten, und jede Position im Container hat eine bestimmte Nummer zur Identifizierung, die wir in <span class="inline">[]</span> eingeben. Es ist erwähnenswert, dass der Inhalt eines Arrays <b>immer bei 0 beginnt</b> und <i>niemals negativ sein</i>kann<em>!</em></p>
    <h3 class="dropspot">       Arrays erstellen</h3>
    <p class="dropspot">Wir haben gezeigt, wie man ein Array auf Daten prüft, aber wie erstellt man ein Array, um damit zu beginnen? Zuerst muss es <i>initialisiert</i> werden, bevor wir es verwenden können, sonst gibt <span data-keyref="GameMaker Name">GameMaker</span> eine Fehlermeldung aus. Ein Array zu initialisieren bedeutet, dass wir jedem Slot des Arrays einen Anfangswert zuweisen, damit er an anderer Stelle im Projekt verwendet werden kann <span class="notranslate">code</span>. Dies ist wichtig zu wissen, da es bedeutet, dass man ein gewisses Maß an Planung betreiben muss, bevor man Arrays verwendet, aber es ist einfach genug, ein Array mit einer Wiederholung <span class="notranslate">loop</span> wie dieser zu initialisieren:</p>
    <p class="code">var i = 9;<br /><br />
      repeat(10)<br />
      {<br />
          array[i] = 0;<br />
          i -= 1;<br />
      }</p>
    <p class="dropspot">Diese einfache <span class="notranslate">code</span> initialisiert ein Array mit zehn Slots (von 0 bis 9) für den Wert 0, d. h. jeder Slot im Array enthält den Wert 0. Sie werden feststellen, dass das Array <i>rückwärts</i> initialisiert wurde, wobei der letzte Wert zuerst definiert wurde. Dies ist nicht unbedingt notwendig, aber optimal, da so ein Speicherplatz reserviert wird, der genau der Größe des Arrays entspricht, während bei der Initialisierung eines Arrays von 0 <em>aufwärts</em> der Speicher für jeden zusätzlichen Wert neu zugewiesen werden muss (bei einem Array mit zehn Slots würde die Initialisierung in <span class="notranslate">loop</span> also die Speicherzuweisung zehnmal ändern). Der Geschwindigkeitsunterschied ist bei kleineren Arrays vernachlässigbar, aber größere Arrays sollten auf diese Weise so weit wie möglich optimiert werden.</p>
    <p class="note"><b>HINWEIS</b>: Der HTML5-Export ist die Ausnahme von der obigen Regel, und wenn Sie darauf abzielen, sollten Sie Arrays in fortlaufender Reihenfolge von 0 aufwärts initialisieren.</p>
    <p class="dropspot">Sie können auch die Funktion <span class="notranslate">GML</span> verwenden <a href="../GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a> verwenden, um ein Array mit einer festen Größe zu initialisieren, und Sie können sogar &quot;leere&quot; Arrays <em>ohne</em> Werte erstellen, zum Beispiel:</p>
    <p class="code">my_array = [];</p>
    <p class="dropspot">Dies teilt <span class="notranslate">GameMaker</span> mit, dass es sich bei der Variablen &quot;<span class="inline">my_array</span>&quot; um ein Array handelt, dem Sie in der Zukunft jederzeit <a href="../GML_Reference/Variable_Functions/array_push.htm">Werte hinzufügen</a> können. Wenn Sie jedoch versuchen, auf einen Wert in einem leeren Array zuzugreifen, erhalten Sie einen Fehler.<br></p>
    <p class="dropspot">Wenn Sie bereits wissen, welche Elemente Sie in das Array aufnehmen wollen, können Sie bei der Deklaration des Arrays kommagetrennte Werte zwischen die Klammern setzen:</p>
    <p class="code">my_array = [&quot;Steve&quot;, 36, &quot;ST-3V3 - Steve Street&quot;];</p>
    <h3 class="dropspot">       Array-Grenzen</h3>
    <p class="dropspot">Sie sollten immer darauf achten, nur auf gültige Array-Positionen zuzugreifen, da der Versuch, auf einen Wert außerhalb eines Arrays zuzugreifen, ebenfalls einen Fehler verursacht. Dies führt zum Beispiel dazu, dass das Projekt bei der Ausführung abstürzt:</p>
    <p class="code">my_array = array_create(5, 0);<br />
      var _val = my_array[6];</p>
    <p class="dropspot">Das Array wurde nur mit 5 Positionen initialisiert, aber wir haben versucht, Position 7 zu erreichen - da Arrays von 0 an nummeriert werden, ist <span class="inline">array[6]</span> Position 7 - daher erzeugt das Spiel einen Fehler und stürzt ab.</p>
    <h3 class="dropspot">       Arrays verwenden</h3>
    <p class="dropspot">Wie verwenden wir nun ein Array praktisch? Genau so, wie wir eine normale Variable verwenden würden, wie in den folgenden Beispielen gezeigt wird:</p>
    <p class="code">// Add two array values together<br />
      total = array[0] + array[5];<br />
      <br />
      // Check an array value<br />
      if array[9] == 10<br />
      {<br />
          // Do something<br />
      }<br />
      <br />
      // Draw an array value<br />
      draw_text(32, 32, array[3]);
    </p>
    <p class="dropspot">Da Arrays fortlaufend nummeriert werden, können Sie sie unter <span class="notranslate">loop</span> durchgehen, um zusätzliche Aktionen auszuführen, so wie wir es bei der Initialisierung getan haben:</p>
    <p class="code">var total = 0;<br />
      <br />
      for (var i = 0; i &lt; 10; ++i)<br />
      {<br />
          total += array[i];<br />
          draw_text(32, 32 + (i * 32), array[i]);<br />
      }<br />
      <br />
      draw_text(32, 32 + (i * 32), total);
    </p>
    <p class="dropspot">Die obige <span class="notranslate">code</span> addiert alle Werte in unserem Array, zeichnet jeden einzelnen von ihnen und zeichnet dann den Gesamtwert am Ende.</p>
    <h3 class="dropspot">       Löschen von Arrays</h3>
    <p class="dropspot">Zuletzt sei noch erwähnt, dass Sie ein Array löschen können, indem Sie die Variable, die es definiert, einfach einem einzigen Wert zuweisen. Dadurch wird der mit allen Positionen und Werten dieses Arrays verbundene Speicherplatz frei. Zum Beispiel:</p>
    <p class="code">// Create an array<br />for (var i = 9; i &gt; -1; --i)<br />
      {<br />
          a[i] = i;<br />
      }<br />
      <br />
      // Delete the array<br />
      a = -1;
    </p>
    <p class="dropspot">Wenn das Array mehrere Dimensionen hat (siehe unten), werden auch diese bereinigt, und beachten Sie, dass wenn Sie Arrays in Instanzen erstellen, diese nicht bereinigt werden müssen, wenn die Instanz aus dem Spiel entfernt wird, da sie automatisch vom <a class="glossterm" data-glossterm="Müllsammler" href="#">Garbage Collector</a> bei Destroy oder Room End entfernt werden. Wenn jedoch eine der Array-Positionen Referenzen zu <em>dynamischen</em> Assets enthält, wie Partikelsysteme, <span class="notranslate">buffers</span> oder Datenstrukturen, dann <em>müssen</em> diese zerstört werden bevor das Array gelöscht wird, die Instanz zerstört wird oder der Raum endet.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Mehrdimensionale Arrays</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span style="text-align: justify;">Wir wissen jetzt, was ein eindimensionales Array ist, aber in <span data-keyref="GameMaker Name">GameMaker</span> können Sie Arrays mit mehreren Dimensionen haben, die im Wesentlichen wie ein Array in einem Array in einem Array aufgebaut sind... Zum Beispiel ist das folgende ein <strong>2D</strong> (zweidimensionales) Array:</span></p>
    <p class="code">array[0][0] = 5;</p>
    <p class="dropspot">Damit wird <span class="notranslate">GameMaker</span> im Wesentlichen mitgeteilt, dass das Array tatsächlich aus verschiedenen 1D-Arrays besteht. Hier ist ein erweitertes Beispiel:</p>
    <p class="code">array<strong>[0]</strong>[0] = 0;<br />
      array<strong>[0]</strong>[1] = 1;<br />
      array<strong>[0]</strong>[2] = 2;<br />
      <br />
      array<strong>[1]</strong>[0] = 3;<br />
      array<strong>[1]</strong>[1] = 4;<br />
      <strong></strong>array<strong>[1]</strong>[2] = 5;
    </p>
    <p class="dropspot">In der obigen <span class="notranslate">code</span> enthält <span class="inline">array[0]</span> ein weiteres Array, ebenso wie <span class="inline">array[1]</span>.</p>
    <p class="dropspot">Ein mehrdimensionales Array muss vor der Verwendung initialisiert werden, genau wie ein einzelnes 1D-Array, und kann reelle Zahlen, Strings und jeden anderen <a href="Data_Types.htm">Datentyp</a> enthalten, genau wie jede andere Variable, was sie zu idealen Kandidaten für jedes Spiel macht, das große Datenmengen auf eine leicht zugängliche Weise speichern muss (denken Sie daran, dass Sie <span class="notranslate">loop</span> durch ein Array leicht erreichen können).</p>
    <p class="dropspot">Sie können auch ein mehrdimensionales Array innerhalb einer Anweisung initialisieren, indem Sie 1-dimensionale Arrays verschachteln:</p>
    <p class="code">two_dimensional_array = <br />
      [<br />
          [&quot;Apple&quot;, 10, 2],<br />
          [&quot;Orange&quot;, 5, 2],<br />
          [&quot;Mango&quot;, 15, 4],<br />
          // ...and so on.<br />
      ]</p>
    <p class="dropspot">Mehrdimensionale Arrays sind auch nicht auf zwei Dimensionen beschränkt, und Sie können 3, 4 oder mehr Dimensionen zu einem Array haben, wie es in Ihrem <span class="notranslate">code</span> erforderlich ist, indem Sie einfach <span class="inline">[n]</span> weitere <span class="notranslate">arguments</span> hinzufügen:</p>
    <p class="code">array[0][0][0] = 1;     // A three dimensional array<br />
      array[0][0][0][0] = 1;  // A four dimensional array<br />
      // etc...</p>
    <p class="dropspot">Es sollte auch beachtet werden, dass die Länge jeder Dimension in einem Array unterschiedlich sein kann. So kann die erste Dimension des Arrays eine Länge von 3 haben, aber der zweite Dimensionseintrag kann für jeden Slot in der ersten Dimension eine andere Länge haben; zum Beispiel:</p>
    <p class="code">array[2][2] = &quot;3&quot;;<br />
      array[2][1] = &quot;2&quot;;<br />
      array[2][0] = &quot;1&quot;;<br />
      <br />
      array[1][3] = &quot;four&quot;;<br />
      array[1][2] = &quot;three&quot;;<br />
      array[1][1] = &quot;two&quot;;<br />
      array[1][0] = &quot;one&quot;;<br />
      <br />
      array[0][1] = 2;<br />
      array[0][0] = 1;
    </p>
    <p class="dropspot">In der obigen <span class="notranslate">code</span> hat <span class="inline">array[0]</span> 2 Steckplätze, <span class="inline">array[1]</span> hat 4 Steckplätze und <span class="inline">array[2]</span> hat 3 Steckplätze.</p>
    <h3 class="dropspot">       Erweitertes Beispiel</h3>
    <p class="dropspot">Hier ein letztes Beispiel, wie dies in einem tatsächlichen Spiel verwendet werden kann: Nehmen wir an, Sie wollen vier verschiedene Feinde an vier verschiedenen Punkten in Ihrem Spiel spawnen lassen, abhängig von einem Zufallswert. Nun, wir können ein Array mit 2 Dimensionen verwenden, um dies zu tun und das Schreiben einer Ladung von <span class="notranslate">code</span> zu sparen.</p>
    <p class="dropspot">Zunächst sollten wir das Array initialisieren, das wir im Create-Ereignis unseres &quot;Controller&quot;-Objekts verwenden werden (beachten Sie die Verwendung von Kommentaren, um Sie daran zu erinnern, was jeder Array-Eintrag tut):</p>
    <p class="code">enemy[3][2] = 448;       //y position<br />
      enemy[3][1] = 32;        //x position<br />
      enemy[3][0] = obj_Slime; //Object<br />
      enemy[2][2] = 448;<br />
      enemy[2][1] = 608;<br />
      enemy[2][0] = obj_Skeleton;<br />
      enemy[1][2] = 32;<br />
      enemy[1][1] = 608;<br />
      enemy[1][0] = obj_Knight;<br />
      enemy[0][2] = 32;<br />
      enemy[0][1] = 32;<br />
      enemy[0][0] = obj_Ogre;</p>
    <p class="dropspot">Wir haben nun die zu spawnenden Objekte und ihre entsprechenden x- und y-Koordinaten innerhalb des Raumes in unserem Array gespeichert. Dies kann nun wie folgt in einem anderen Ereignis des Controller-Objekts verwendet werden (z. B. ein Alarm oder ein Tastendruck-Ereignis):</p>
    <p class="code">//get a random number from 0 to 3, inclusive<br />
      var i = irandom(3);<br />
      <br />
      //Use the array to create the object<br />
      instance_create_layer(enemy[i][1], enemy[i][2], &quot;Enemy_Layer&quot;, enemy[i][0]);
    </p>
    <p class="dropspot">Diese kurze <span class="notranslate">code</span> wird nun einen zufälligen Feind in den Spielraum spawnen, und es verwendet weit weniger <span class="notranslate">code</span> als eine &quot;<span class="inline">if / then / else</span>&quot; Struktur oder sogar ein &quot;<span class="inline">switch</span>&quot;, und da das Array alle zusammen in der create-Ereignis initialisiert wird, ist es viel einfacher zu bearbeiten und zu ändern, jeder dieser Werte, da sie nicht in den Rest des Projekts <a class="glossterm" data-glossterm="fest codiert" href="#">fest codiert</a> <span class="notranslate">code</span>.</p>
  </div>
  <p> </p>
  <h2>Arrays als Funktionsargumente</h2>
  <p>Sie können Arrays in <a href="Script_Functions.htm">Skriptfunktionen</a> und <a href="Method_Variables.htm">Methodenvariablen</a> als <span class="notranslate">arguments</span> übergeben und diese Arrays an beliebiger Stelle innerhalb der Funktion ändern. Dabei werden auch die ursprünglichen Arrays verändert.</p>
  <p>Diese Funktion ändert zum Beispiel einfach die ersten drei Elemente des übergebenen Arrays:</p>
  <p class="code">modify_array = function (array)<br />
    {<br />
        array[0] = 2;<br />
        array[1] = 4;<br />
        array[2] = 6;<br />
    }</p>
  <p>Sie können nun ein Array erstellen und es an diese Funktion übergeben, die das Array verändert:</p>
  <p class="code">my_array = [100, 4, 214];<br />
    <br />
    modify_array(my_array);<br />
    <br />
    show_debug_message(my_array); // Prints [2, 4, 6];
  </p>
  <p>In früheren Versionen von <span class="notranslate">GameMaker</span> war dies nicht der Fall, da das Ändern eines Arrays innerhalb einer Funktion stattdessen eine Kopie erzeugte. Dieses <em>veraltete</em> Verhalten kann auf Wunsch immer noch aktiviert werden: Lesen Sie den Abschnitt &quot;<strong>Kopieren beim Schreiben</strong>&quot; weiter unten für weitere Informationen.</p>
  <h2 id="h">Kopieren auf Schreiben</h2>
  <p>Das Verhalten &quot;Kopieren beim Schreiben&quot; ist veraltet und wird nur verwendet, wenn &quot;<strong>Kopieren beim Schreiben für Arrays aktivieren</strong>&quot; in den <a href="../../Settings/Game_Options.htm">allgemeinen Spieloptionen</a> aktiviert ist. Dieser Abschnitt beschreibt das Verhalten von Arrays, wenn diese Option aktiviert ist.</p>
  <p>Wie im vorigen Abschnitt beschrieben, können Arrays in Funktionen als <span class="notranslate">arguments</span> übergeben werden. Dazu müssen Sie lediglich die Array-Variable angeben (weder die einzelnen Positionen noch die <span class="inline">[]</span> -Klammern sind erforderlich), und das gesamte Array wird <b>per Referenz</b> an die Funktion übergeben:</p>
  <p class="code">my_array = [1, 2, 4, 8, 16];<br />
    <br />
    do_something(my_array);
  </p>
  <p>Wenn jedoch <strong>Copy on Write</strong> aktiviert ist, wird beim Ändern von Werten des Arrays innerhalb der Funktion eine temporäre Kopie mit Ihren Änderungen erstellt. Das ursprüngliche Array wird nicht verändert. Dieses Verhalten wird als Copy on Write bezeichnet.</p>
  <p>Um das ursprüngliche Array, das an die Funktion übergeben wurde, tatsächlich zu ändern, müssen Sie es entweder zurückgeben oder den Zugriffspunkt <span class="inline">@</span> verwenden.</p>
  <p>Die oben aufgerufene Funktion <span class="inline2">do_something()</span> kann zum Beispiel etwas Einfaches wie das Folgende tun:</p>
  <p class="code">do_something = function(array)<br />
    {<br />
        array[1] = 200;<br />
    }</p>
  <p>Nun würde man erwarten, dass <span class="inline2">my_array</span> die Werte <span class="inline2">1, 200, 4</span> usw. enthält, was normalerweise korrekt wäre - aber wenn <strong>Copy on Write</strong> aktiviert ist, bleibt das ursprüngliche Array davon unberührt.</p>
  <p>Um dies zu umgehen, können Sie die Funktion dazu bringen, die geänderte Array-Kopie <strong>zurückzugeben</strong> und sie dann wieder auf die ursprüngliche Variable anzuwenden:</p>
  <p class="code">my_array = [1, 2, 4, 8, 16];<br />
    <br />
    my_array = do_something(my_array);
  </p>
  <p>Die Funktion selbst würde das geänderte Array zurückgeben:</p>
  <p class="code">do_something = function(array)<br />
    {<br />
        array[1] = 200;<br />
    <br />
        return array;<br />
    }
  </p>
  <p class="note"><span class="note">HINWEIS</span><b> </b>Die obige <span class="notranslate">code</span> ist nicht notwendig, wenn Sie keinen der Werte des Arrays ändern, sondern auf sie verweisen. Wenn Sie ein Array referenzieren, wird es nicht kopiert und kann schneller geparst werden.</p>
  <p>Die zweite Lösung besteht darin, den Zugriffswert <span class="inline">@</span> zu verwenden, um die Array-Werte direkt zu ändern, was den CPU-Overhead für die Erstellung einer temporären Kopie einspart. Dies bedeutet, dass Sie das Array nicht aus der Funktion zurückgeben müssen und es direkt bearbeiten können:</p>
  <p class="code">do_something = function(array)<br />
    {<br />
        array[@ 1] = 200;<br />
    }</p>
  <p>Mit diesem Accessor wird das Verhalten von Copy on Write umgangen und das referenzierte Array direkt geändert. Dies kann verwendet werden, um Copy on Write für bestimmte Anweisungen selektiv zu deaktivieren, während die Option aktiviert bleibt.</p>
  <p>Auch dies ist nicht erforderlich, wenn die Option <strong>"Beim Schreiben kopieren"</strong> <strong>deaktiviert</strong> ist (dies ist die Standardeinstellung und wird empfohlen).</p>
  <p>Weitere Informationen über Accessors und ihre Funktionsweise sowie ein Beispiel für Arrays finden Sie auf der folgenden Seite:</p>
  <ul class="colour">
    <li><a href="Accessors.htm">Accessors</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="GML_Overview.htm">GML-Übersicht</a></div>
        <div style="float:right">Nächste: <a data-xref="{title}" href="Structs.htm">Strukturen und Konstrukteure</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Arrays
passing arrays to scripts
deleting arrays
-->
  <!-- TAGS
arrays
-->
</body>
</html>