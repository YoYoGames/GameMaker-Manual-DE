<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Ausdrücke und Operatoren</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different GML expressions" />
  <meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,&lt;,&gt;,&lt;=,&gt;=,==,!=,|,&amp;,^,&lt;&lt;,&gt;&gt;,+,-,*,/,++,--,div,%,mod,!,~" />
  <meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,&lt;&lt;,&gt;&gt;,&lt;=,&gt;=,==,=,:=,$" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Ausdrücke und Operatoren</h1>
  <h2>Ausdrücke</h2>
  <p>Ein Ausdruck ist ein mathematischer Satz, der gewöhnliche Zahlen, Variablen, Strings oder Funktionen sowie einen oder mehrere <strong>Operatoren </strong>(wie Addieren, Subtrahieren, Multiplizieren usw.) enthalten kann. Die in einem Ausdruck verwendeten Werte können reelle Zahlen (z. B. <span class="inline">3.4 * 6</span>), Hexadezimalzahlen, die mit einem <span class="inline">$</span> Zeichen beginnen (z. B. <span class="inline">$00FFAA | $88FFAA</span>), Zeichenketten zwischen Anführungszeichen (z. B. <span class="inline">&quot;hello&quot;</span> + <span class="inline">&quot;world&quot;</span>) oder kompliziertere Ausdrücke mit mehreren Operatoren und Werten sein.</p>
  <h2>Betreiber</h2>
  <p>Die folgenden Operatoren sind für die Verwendung mit Ausdrücken vorgesehen:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Zuordnen (=)</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span class="inline2"><b>=</b></span> wird verwendet, um einer Variablen einen Wert zuzuweisen. Beachten Sie, dass dies <i>auch</i> für den Vergleich von Variablen in <span data-keyref="GameMaker Name">GameMaker</span> verwendet werden kann und Sie dies in Beispielen und bei anderen Leuten <span class="notranslate">codes</span> sehen können. Dies ist jedoch eine Altlast aus alten <i>GameMaker-Versionen</i>, und Sie sollten die Operatoren <b>==</b> zum Vergleichen und <b>=</b> zum Zuweisen verwenden, wie in diesen Beispielen gezeigt:</p>
    <p class="code">a = 12;<br />
      speed = 5;<br />
      val = (old_val + 5);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Kombinieren (&amp;&amp;, ||, ^^)</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><b><span class="inline2">&amp;&amp;</span>, <span class="inline2">||</span>, ^^ (<span class="inline2">und</span>, <span class="inline2">oder</span> und <span class="inline2">xor</span></b> ) werden verwendet, um boolesche Werte zu kombinieren, die entweder wahr oder falsch ergeben. Wenn eines der folgenden Beispiele zu <span class="inline">true</span> führt, wird <span class="notranslate">code</span> ausgeführt:</p>
    <p class="code">if (a == b &amp;&amp; c == d) { do something... }  // and<br />
      if (a == b || c == d) { do something... }   // or<br />
      if (a == b ^^ c == d) { do something... }  // xor</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Nullish (??, ??=)</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="note"><span class="note">ANMERKUNG</span> &quot;Nullish&quot; bedeutet einfach, dass ein Wert gleich <span class="inline2">undefiniert</span> oder <span class="inline2">pointer_null</span> ist.</p>
    <p class="dropspot"><span class="inline2">??</span> ist ein nullischer Koaleszenzoperator, der einen angegebenen Ausdruck zurückgibt, wenn der angegebene Wert <span class="inline2">undefiniert</span> oder <span class="inline2">pointer_null</span> ist. Dieser Operator erwartet die folgende Syntax:</p>
    <p class="code_plain">(Eingabe ?? null_Ausgabe)</p>
    <p class="dropspot">Wenn die <span class="inline2">Eingabe</span> <span class="inline2">undefiniert</span> oder <span class="inline2">pointer_null</span> ist, gibt der Ausdruck den Wert <span class="inline2">null_output</span> zurück; in allen anderen Fällen wird jedoch einfach der <span class="inline2">Eingabewert</span> zurückgegeben. Dies kann verwendet werden, um einen &quot;Standardwert&quot; für eine Variable zu definieren, falls die Variable selbst keinen gültigen Wert enthält.</p>
    <p class="dropspot">Betrachten Sie das folgende Beispiel:</p>
    <p class="code_plain">username = data.username ?? &quot;UNGÜLTIGER BENUTZERNAME&quot;;</p>
    <p class="dropspot">In diesem Beispiel erhält die Variable <span class="inline2">username</span> den in <span class="inline2">data.username</span> gespeicherten Wert. Wenn <span class="inline2">data.username</span> jedoch <span class="inline2">undefiniert</span> oder <span class="inline2">pointer_null</span> ist, erhält die Variable stattdessen die Zeichenfolge <span class="inline2">&quot;INVALID USERNAME&quot;</span>. Dieses Beispiel stellt sicher, dass Funktionsaufrufe, die die Variable <span class="inline2">username</span> verwenden, keinen Fehler verursachen, weil sie einen ungültigen Wert erhalten, und dass der Benutzer weiß, wenn sein Benutzername nicht zurückgegeben wurde.</p>
    <p class="note"><span class="note">HINWEIS</span> Der Ausdruck auf der rechten Seite des Koaleszenzoperators nullish wird nur ausgeführt, wenn der Eingabewert nullish ist. Das bedeutet, dass alle Funktionsaufrufe, die in dem RHS-Ausdruck enthalten sind, nur ausgeführt werden, wenn der Eingabewert nullish ist.</p>
    <hr />
    <p class="dropspot"><span class="inline2">??=</span> ähnelt dem oben beschriebenen nullish coalescing operator, wird aber speziell für Variablenzuweisungen verwendet. Dieser Operator erwartet die folgende Syntax:</p>
    <p class="code">variable ??= null_value</p>
    <p class="dropspot">Wenn die <span class="inline2">Variable</span> <span class="inline2">undefiniert</span> oder <span class="inline2">pointer_null</span> ist, wird ihr der Wert <span class="inline2">null_value</span> zugewiesen; ansonsten bleibt die Variable unverändert. Dies kann verwendet werden, um einer Variablen einen benutzerdefinierten &quot;Standardwert&quot; zuzuweisen, wenn sie einen nullish-Wert enthält.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Vergleichen (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><b><span class="inline2">&lt;</span>, <span class="inline2">&lt;=</span>, <span class="inline2">==</span>, <span class="inline2">!=</span>, <span class="inline2">&gt;</span>, <span class="inline2">&gt;=</span></b> sind Vergleiche und können nur ein <span class="inline">true</span> oder <span class="inline">false</span> Ergebnis liefern (wobei wahr auch als 1 und falsch als 0 interpretiert werden kann). Beispiele für die Verwendung:</p>
    <p class="code">if (a &lt; b) {do something...}<br />
      if (a != b) {do something...}</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Bitweise (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><b><span class="inline2">|</span>, <span class="inline2">&amp;</span>, ^, <span class="inline2">&lt;&lt;</span>, <span class="inline2">&gt;&gt;</span> </b>werden verwendet, um bitweise Operationen durchzuführen, wobei | = bitweise oder, &amp; = bitweise und, ^ = bitweise xor, &lt;&lt; = links verschieben, &gt;&gt; = rechts verschieben. Beispiele für die Verwendung:</p>
    <p class="code">x = (x &amp; $ffffffe0) + 32;<br />
      if (y ^ $1f) &gt; 0 {do something...};</p>
    <p class="dropspot">Weitere Informationen über die Verwendung der bitweisen Operatoren und deren Funktion finden Sie im Abschnitt: <a href="../../Additional_Information/Bitwise_Operators.htm">Bitweise Operatoren</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Arithmetisch (+, -, *, /)</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><b><span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, <span class="inline2">/</span></b> stehen für Addieren, Subtrahieren, Multiplizieren bzw. Dividieren. Beispiele für die Verwendung:</p>
    <p class="code">c = a * b;<br />
      str = a + &quot;world&quot;;</p>
    <p class="note"><span class="note"><b>HINWEIS</b></span> Fließkommazahlen bleiben bei der Division durch Null nicht stehen, da sie eine Unendlichkeit als Antwort erhalten. Wenn A und B Ganzzahlen sind (entweder int32 oder int64), dann wird die Division als Ganzzahl durchgeführt (und das Teilen durch 0 wird geprüft und als Fehler gewertet). Andernfalls wird die Division als Fließkommadivision durchgeführt (ohne Prüfung auf Teilung durch 0).</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Erhöhen/Verringern (++, --)</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot"><span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span> werden verwendet, um eine<span class="inline2">(1</span>) zu einem Wert zu addieren oder von diesem zu subtrahieren. Es ist zu beachten, dass die Platzierung vor oder nach dem Wert, zu dem addiert oder von dem subtrahiert werden soll, zu leicht unterschiedlichen Ergebnissen führt. Zum Beispiel:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline">++a</span> wird die Variable inkrementiert und der inkrementierte Wert zurückgegeben.</li>
      <li class="dropspot"><span class="inline">a++</span> erhöht die Variable, gibt aber den Wert zurück, bevor sie erhöht wurde.</li>
    </ul>
    <p class="dropspot">Wenn Sie also etwas wie dieses haben:</p>
    <p class="code">var a = 1;<br />
      show_debug_message(string(a++));<br />
      show_debug_message(string(++a));</p>
    <p class="dropspot">Die Debug-Ausgabe würde 1 und 3 lauten. Hier sind einige Beispiele für die Verwendung:</p>
    <p class="code">for (var i = 0; i &lt; 10; i++;)<br />
      {<br />
          do something...<br />
      }</p>
    <p class="code">if (hit == true)<br />
      {<br />
          --score;<br />
      }</p>
    <p class="note"><strong>HINWEIS</strong>: Auf dem Ziel <span class="notranslate">YoYo</span> <span class="notranslate">Compiler</span> <span class="notranslate">platforms</span> (die mit (YYC) gekennzeichneten) werden diese Ausdrücke von links nach rechts ausgewertet, während sie auf allen anderen Zielen <span class="notranslate">platforms</span> von rechts nach links ausgewertet werden, was bedeutet, dass dies:</p>
    <p class="code">val = max(num, ++num, num++);</p>
    <p class="note">wird je nach <span class="notranslate">platform</span> unterschiedliche Ergebnisse liefern.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Division und Modulo (div, %, mod)</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot"><strong><span class="inline2">div</span>, <span class="inline2">mod</span> (<span class="inline2">%</span></strong> ) sind Division und Modulo, wobei div den Betrag angibt, in den ein Wert geteilt werden kann und nur einen ganzzahligen Quotienten ergibt, während mod nur den Rest einer Division angibt. Beachten Sie, dass Sie div oder mod nur mit ganzzahligen Werten verwenden können. Beispiele für die Verwendung: </p>
    <p class="code">secs = time mod 60;<br />
      time_str = string(time div 60);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Unär (!, -, ~)</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">Die folgenden <strong>unären</strong> Operatoren sind vorgesehen:</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline2"><strong>!</strong></span>: boolesches &quot;nicht&quot;, also <span class="inline">!true == false</span></li>
      <li class="dropspot"><span class="inline2"><strong>-</strong></span>: negiert den nächsten reellen oder ganzzahligen Wert (gilt nicht für Strings oder Booleans)</li>
      <li class="dropspot"><span class="inline2"><strong>~</strong></span>: negiert den nächsten Wert bitweise</li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <h2>Ausdrucksgruppierung</h2>
  <p><i></i>Als Werte in allen Ausdrücken können Sie Zahlen, Variablen oder Funktionen verwenden, die einen Wert zurückgeben, und auch Unterausdrücke können zwischen Klammern gesetzt werden. Alle Operatoren funktionieren für reelle Zahlenwerte, aber <em>Vergleiche </em>funktionieren auch für Zeichenketten, und der Operator &quot;<strong>+</strong>&quot; kann zur Verkettung von Zeichenketten verwendet werden.</p>
  <p>Wenn Sie mehrere Operationen in einem einzigen Ausdruck durchführen, ist es <b>sehr wichtig</b>, dass Sie Klammern <span class="inline">()</span> verwenden, um die Reihenfolge der Operationen zu trennen, da verschiedene <span class="notranslate">platforms</span> sie unterschiedlich ausführen können, wenn sie nicht ausdrücklich auf diese Weise angegeben werden. Betrachten Sie zum Beispiel den folgenden Code:</p>
  <p class="code">a = b == c || d;</p>
  <p>Die verschiedenen Ziele <span class="notranslate">compilers</span> führen die Operationen in unterschiedlicher Reihenfolge aus, da sie nicht explizit angezeigt werden, was zu &quot;merkwürdigen&quot; Ergebnissen führt, die Sie beim Spielen vielleicht nicht erwarten. Um dies zu vermeiden, verwenden Sie die <span class="inline">()</span>, um die Teile zu trennen, etwa so:</p>
  <p class="code">a = (b == c || d);   //better<br />
    a = ((b == c) || d); //best</p>
  <h2>Anweisungsgruppierung</h2>
  <p>Wenn Sie verschiedene Operationen und Ausdrücke in einem einzigen <span class="notranslate">code</span> Block verwenden, sollten auch diese getrennt werden. Der folgende Code <em>sieht</em> zum Beispiel wie ein gültiger Code <em>aus</em>:</p>
  <p class="code">if my_var == your_var ++their_var;</p>
  <p>Die Website <span class="notranslate">compiler</span> kann dies jedoch auf zwei Arten interpretieren:</p>
  <p class="code">if my_var == your_var<strong>++</strong> then their_var;<br />
    <br />
    // or<br />
    <br />
    if my_var == your_var then <strong>++</strong>their_var;
  </p>
  <p>Wenn Sie sich die Website <span class="notranslate">code</span> ansehen, werden Sie feststellen, dass eine davon etwas dumm ist, aber das liegt daran, dass wir wissen, was wir erreichen wollen und was passieren soll, aber die Website <span class="notranslate">compiler</span> weiß das nicht. Alles, was es sieht, sind zwei Variablen mit dem Operator ++ dazwischen, also muss es sich entscheiden, auf welche es angewendet werden soll. Deshalb sollten Sie <strong>Ausdrücke, Operationen und Anweisungen immer ausdrücklich in Klammern</strong> setzen. Die korrekte Version der obigen <span class="notranslate">code</span> sollte lauten:</p>
  <p class="code">if (my_var == your_var)<br />
    {<br />
        ++their_var;<br />
    }</p>
  <p>Dies mag etwas umständlich erscheinen, aber es besteht keine Unklarheit über die durchgeführten Operationen und es wird kompiliert und verhält sich konsistent auf allen <span class="notranslate">platforms</span>. Beachten Sie auch, dass Sie Ausdrücke und Anweisungen zwar derzeit ohne die Verwendung von Klammern verketten können, dies aber eine veraltete Funktion ist und in Zukunft möglicherweise veraltet ist und aus <span class="notranslate">GML</span> entfernt wird. Die Verwendung von Klammern ist daher zukunftssicher <span class="notranslate">code</span> (und ist im Allgemeinen ohnehin eine gute Praxis).</p>
  <p>Hier sind einige abschließende Beispiele für die verschiedenen Ausdrücke:</p>
  <p class="code">{<br />
        x = 23 div 2;<br />
        colour = $FFAA00 + $00BB12;<br />
        str = &quot;hello&quot; + &quot;world&quot;;<br />
        y += 5;<br />
        x *= y;<br />
        x = y &lt;&lt; 2;<br />
        x = 23 * ((2 + 4) / sin(y));<br />
        b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br />
    }</p>
  <p>Abschließend sei noch darauf hingewiesen, dass es für die Verwendung mit bestimmten <a href="../GML_Reference/Data_Structures/Data_Structures.htm">Datenstrukturen</a> und <a href="Arrays.htm">Arrays</a> auch einige &quot;Abkürzungen&quot; gibt, die <b>Accessors</b> genannt werden. Diese ermöglichen es Ihnen, Daten innerhalb dieser Formate schnell und einfach und ohne Funktionsaufrufe hinzuzufügen oder zu ersetzen. Ausführliche Informationen hierzu finden Sie auf der folgenden Seite</p>
  <ul class="colour">
    <li><a href="Accessors.htm">Accessors</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="GML_Overview.htm">GML-Übersicht</a></div>
        <div style="float:right">Nächste: <a data-xref="{title}" href="Script_Functions.htm">Skriptfunktionen und -variablen</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>