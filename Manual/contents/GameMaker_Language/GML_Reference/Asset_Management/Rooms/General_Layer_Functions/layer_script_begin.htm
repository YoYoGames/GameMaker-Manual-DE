<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>layer_script_begin</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function layer_script_begin" />
  <meta name="rh-index-keywords" content="layer_script_begin" />
  <meta name="search-keywords" content="layer_script_begin" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>layer_script_begin</h1>
  <p>Mit dieser Funktion können Sie einer Ebene eine <a href="../../../../GML_Overview/Script_Functions.htm">Skriptfunktion</a> zuweisen, die aufgerufen wird, bevor die Ebene gerendert wird. Wenn Sie einer Ebene eine Funktion zuweisen, wird diese zu Beginn <i>jedes der verschiedenen Zeichnungsereignisse</i> ausgeführt. Daher sollten Sie in der zugewiesenen Funktion prüfen, welches Ereignis gerade gerendert wird, und die <span class="notranslate">code</span> entsprechend anpassen. Dies kann durch die Überprüfung des <a href="../../Objects/Object_Events/event_type.htm"><span class="inline">event_type</span></a> und/oder der <a href="../../Objects/Object_Events/event_number.htm"><span class="inline">event_number</span></a> (siehe das erweiterte Beispiel unten). Beachte, dass die Funktion <i>nicht</i> dazu gedacht ist, in Zeichnungsereignissen oder Schritt-Ereignissen aufgerufen zu werden, sondern nur zu Beginn des Raumes im <strong>Room Creation Code</strong> oder im <strong>Create Event / </strong> <strong>Room Start Event</strong> einer Instanz aufgerufen werden muss.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">layer_script_begin(layer_id, script);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Typ</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td><span class="notranslate">layer_id</span></td>
        <td><span data-keyref="Type_String">String</span> oder <span data-keyref="Type_ID_Layer">Ebenen-ID</span></td>
        <td><span class="notranslate">The unique ID value of the layer to target (or the layer name as a string)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">script</span></td>
        <td><span data-keyref="Type_Function_Script">Skript-Funktion</span></td>
        <td><span class="notranslate">The script function index to assign to the layer</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Erweitertes Beispiel:</h4>
  <p>In diesem erweiterten Beispiel zeigen wir Ihnen zunächst, wie eine einfache <span class="notranslate">script</span> Funktion strukturiert ist, um einige einheitliche Shader-Daten zu setzen, so dass diese Funktion ausgeführt wird, wenn die gegebene Ebene gezeichnet wird, und der Shader korrekt funktioniert. In diesem Beispiel ist es interessant zu sehen, wie wir prüfen, welches Ereignis aufgerufen wird, damit der Rest der Funktion nur bei dem spezifischen Ereignis ausgeführt wird, bei dem wir sie benötigen - in diesem Fall nur beim Hauptzeichnungsereignis:</p>
  <p class="code">/// @function layer_shader_start();<br />
    function layer_shader_start()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
                colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);<br />
                shader_set(s_ColourChanger);<br />
                shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
                shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
            }<br />
        }<br />
    }</p>
  <p>Wir würden dann eine begleitende Funktion haben, um den Shader zurückzusetzen, nachdem die Zeichnung fertig ist:</p>
  <p class="code">/// @function layer_shader_end();<br />
    function layer_shader_end()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                shader_reset();<br />
            }<br />
        }<br />
    }</p>
  <p>Nachdem wir nun unsere <span class="notranslate">script</span> Funktionen für die Einstellung des Shaders definiert haben, müssen wir sie einem bestimmten Layer zuweisen, damit der Layer weiß, dass er sie aufrufen soll. Dies würde in der Raumerstellung <span class="notranslate">code</span> oder im Erstellungsereignis oder Raumstart-Ereignis eines Controller-Objekts geschehen (sie müssen nicht bei jedem Schritt gesetzt werden, sondern einmal beim Start des Raums oder wenn die Ebene anfänglich erstellt wird):</p>
  <p class="code">var lay_id = layer_get_id(&quot;Instances&quot;);<br />
    layer_script_begin(lay_id, layer_shader_start);<br />
    layer_script_end(lay_id, layer_shader_end);</p>
  <p>Dieser abschließende <span class="notranslate">code</span> -Block weist die <span class="notranslate">scripts</span> der Ebene zu.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="General_Layer_Functions.htm">Allgemeine Funktionen der Ebene</a></div>
        <div style="float:right">Nächste: <a href="layer_script_end.htm"><span class="notranslate">layer_script_end</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
layer_script_begin
-->
  <!-- TAGS
layer_script_begin
-->
</body>
</html>