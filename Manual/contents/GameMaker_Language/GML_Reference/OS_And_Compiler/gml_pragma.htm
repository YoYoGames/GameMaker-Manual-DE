<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gml_pragma</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for gml_pragma" />
  <meta name="rh-index-keywords" content="gml_pragma" />
  <meta name="search-keywords" content="gml_pragma" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gml_pragma</h1>
  <p>Die Funktion <span class="inline">gml_pragma</span> wirkt sich darauf aus, wie das angegebene Ziel Ihr <span class="notranslate">code</span> kompiliert und sollte mit den verschiedenen Befehlen aufgerufen werden, um die endgültige Kompilierung Ihres Projekts weiter zu optimieren. Diese Befehle werden effektiv <i>vorverarbeitet</i>, bevor das Spiel kompiliert wird. Daher kann die Funktion an einer beliebigen Stelle in Ihrem Projekt platziert werden und wird dennoch verarbeitet, bevor das Spiel vollständig kompiliert wird. Die verfügbaren Befehle sind wie folgt:</p>
  <ul class="colour">
    <li>&quot;<b>forceinline</b>&quot; - Wenn die Funktion mit dem &quot;forceinline&quot;-Pragma in einer <b>Skriptfunktion</b> aufgerufen wird, kompiliert das YYC das Projekt mit der Funktion inline, anstatt sie zu referenzieren. Dies führt zu einem weiteren Verarbeitungsschub, aber es ist Vorsicht geboten, da es auch die Größe der endgültigen ausführbaren Datei aufbläht, insbesondere wenn die in-lined <span class="notranslate">code</span> groß ist und/oder an mehreren verschiedenen Stellen verwendet wird, sowie die Kompilierzeit stark erhöht. Beachten Sie, dass dieses Pragma <b>nur gültig</b> ist <b>, wenn Sie mit dem YYC komp</b>ilieren.</li>
    <li>&quot;<b>global</b>&quot;, &quot;<b>[gml code]</b>&quot; - Das &quot;global&quot;-Pragma erlaubt es Ihnen, einige als String formatierte <span class="notranslate">GML</span> <span class="notranslate">code</span> in einem <b>globalen</b> Bereich zur Kompilierungszeit aufzurufen, bevor der erste Raum des Spiels ausgeführt wird. Zum Beispiel:
     <p class="code">gml_pragma(&quot;global&quot;, &quot;Init()&quot;);</p>
      Dies ruft die <span class="notranslate">script</span> Funktion &quot;Init&quot; auf, bevor der erste Raum des Spiels ausgeführt wird. Beachte, dass die <span class="notranslate">GML</span>, die als zweite <span class="notranslate">argument</span> übergeben wird, <b>eine Kompilierzeitkonstante sein muss</b>, und dass du dieses Pragma nicht verwenden kannst, um Instanzen zu erstellen oder Operationen durchzuführen, die einen Raum (oder irgendetwas in einem Raum) benötigen, um zu funktionieren.
    </li>
    <li>&quot;<b>PNGCrush</b>&quot; - Mit dem Pragma &quot;PNGCrush&quot; wird das Programm <a href="https://pmt.sourceforge.io/pngcrush/" target="_blank">PNGCrush</a> für jede erstellte Textur verwendet. Beachten Sie, dass dies die Kompilierungszeit des Spiels erheblich verlängern kann. Sie sollten diese Option also nicht ständig aktivieren, obwohl sie erhebliche Einsparungen bei der endgültigen Dateigröße bringen kann. Diese Option gilt nur für Texturgruppen, die das PNG-Format verwenden (siehe <a data-xref="{text}" href="../../../Settings/Texture_Groups.htm#h">Gruppeneinstellungen</a>).</li>
    <li>&quot;<b>Texgroup.Scale</b>&quot;, &quot;<b>[TextureGroupName]</b>&quot;, &quot;<b>[Scale Divisor]</b>&quot; - Die &quot;Texgroup.Scale&quot; skaliert die angegebene Texturgruppe beim Kompilieren. Sie müssen hier zusätzlich zwei <span class="notranslate">arguments</span> angeben: &quot;[TexGroupName]&quot;, das ist der Name (ein String) der zu skalierenden Texturgruppe, und &quot;[Scale Divisor]&quot; (ebenfalls ein String), das ist der Divisor, den Sie für die Skalierung verwenden wollen, d.h:
     <p class="code">gml_pragma(&quot;Texgroup.Scale&quot;, &quot;level1&quot;, &quot;2&quot;);</p>
      Damit werden alle Texturen in der Texturgruppe &quot;level1&quot; halbiert.
    </li>
    <li>&quot;<b>UnityBuild</b>&quot;, &quot;<b>[enable/disable]</b>&quot; - Wenn man die Funktion mit diesem Pragma aufruft und das enable/disable <span class="notranslate">argument</span> auf <span class="inline">true</span> setzt, dann werden beim Kompilieren alle .cpp-Dateien im Projekt in einer einzigen Datei zusammengefasst, die dann z.B. zum Erstellen aller Dateien verwendet wird:
     <p class="code">gml_pragma(&quot;UnityBuild&quot;, &quot;true&quot;);</p>
      Der Vorteil eines Unity-Builds ist, dass die Builds schneller sind, aber der Nachteil ist, dass jedes Mal ein <i>kompletter</i> Build durchgeführt wird, d.h. selbst wenn man nur einen einzigen Teil der <span class="notranslate">code</span> ändert, wird alles neu gebaut, ohne dass irgendwelche zwischengespeicherten Dateien verwendet werden. Dies wurde speziell für den Xbox One Export mit dem YYC hinzugefügt, obwohl es auch für andere Builds aufgerufen werden kann<b>(nur YYC</b>). Für weitere Informationen über Unity-Builds, siehe <a href="http://buffered.io/posts/the-magic-of-unity-builds/" target="_blank">hier</a>.
    </li>
  </ul>
  <p class="note"><b>HINWEIS</b>: Das erste <span class="notranslate">argument</span> der Funktion <span class="inline">gml_pragma</span> <b>muss eine String-Konstante zur Kompilierzeit</b> und keine Variable <b>sein</b>.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">gml_pragma</span>(command, [optional...]);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Typ</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td><span class="notranslate">command</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Zeichenfolge</a></span></td>
        <td><span class="notranslate">A string with one of the commands listed above.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">[optional]</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Zeichenfolge</a></span></td>
        <td><span class="notranslate">Some of the available commands require an optional argument or arguments. These are explained above for each command.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Beispiel:</h4>
  <p class="code">gml_pragma(&quot;forceinline&quot;);</p>
  <p>Das obige Beispiel <span class="notranslate">code</span> erzwingt, dass die Funktion <span class="notranslate">script</span>, in der sie verwendet wird, beim Kompilieren eingefügt wird.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="OS_And_Compiler.htm">Betriebssystem und Compiler</a></div>
        <div style="float:right">Nächste: <a href="parameter_count.htm"><span class="notranslate">parameter_count</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
gml_pragma
-->
  <!-- TAGS
gml_pragma
-->
</body>
</html>