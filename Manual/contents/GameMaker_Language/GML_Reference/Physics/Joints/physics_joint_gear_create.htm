<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>physik_gelenk_getriebe_erstellen</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_gear_create" />
  <meta name="rh-index-keywords" content="physics_joint_gear_create" />
  <meta name="search-keywords" content="physics_joint_gear_create" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">physik_gelenk_getriebe_erstellen</span></h1>
  <p>Wenn Sie eine ausgeklügelte mechanische Vorrichtung erstellen möchten, sollten Sie Zahnräder verwenden. Im Prinzip können Sie Zahnräder in <span data-keyref="GameMaker Name">GameMaker</span> erstellen, indem Sie Compounding-Instanzen verwenden, um Zahnräder zu modellieren, aber das ist nicht sehr effizient und kann mühsam zu schreiben sein! Zum Glück gibt es eine einfachere Methode, und zwar die Verwendung eines <i>Zahnradgelenks</i>. Um ein Zahnrad zu erstellen, müssen Sie zuvor Ihre Einspannungen definiert und die beiden grundlegenden Gelenke erstellt haben, aus denen Ihr Zahnrad bestehen wird - diese <b>müssen</b> aus einem <a href="physics_joint_revolute_create.htm">Drehgelenk</a> und entweder einem <a href="physics_joint_prismatic_create.htm">prismatischen Gelenk</a> oder einem weiteren <i>Drehgelenk</i> bestehen. Die folgende Abbildung zeigt, wie ein Zahnrad in einem Spiel normalerweise erstellt wird:</p>
  <p><img>Was passiert also? Nun, sobald die beiden Gelenke in das Getriebe eingefügt sind, wirkt sich die Interaktion mit dem einen auf das andere aus. Wenn Sie also im obigen Beispielbild inst2 drehen, bewegt sich inst3 nach oben und unten, oder wenn Sie inst3 nach oben und unten bewegen, dreht sich inst2. Sie können auch das Übersetzungsverhältnis ändern, was bedeutet, dass Sie eine Instanz mehr (oder weniger) bewegen müssen, um den gewünschten Effekt zu erzielen. Die <span class="notranslate">code</span> im Beispiel unten zeigt, wie etwas wie das obige Bild erstellt werden kann.</p>
  <p class="note"><b>HINWEIS</b>: Wenn Sie eine der beiden Instanzen löschen wollen, die an der Zahnradverbindung beteiligt sind (oder nur deren Verbindungen löschen), <b>müssen</b> Sie zuerst die Zahnradverbindung mit <span style="font-size:1px;"><a href="physics_joint_delete.htm"><span class="inline">physics_joint_delete()</span></a></span> sonst erhalten Sie eine Fehlermeldung!</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">physics_joint_gear_create</span>(inst1, inst2, joint_1, joint_2, ratio)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Typ</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td><span class="notranslate">inst1</span></td>
        <td><span data-keyref="Type_ID_Instance"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm" target="_blank">Instanz-ID</a></span></td>
        <td><span class="notranslate">The first instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">inst2</span></td>
        <td><span data-keyref="Type_ID_Instance"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm" target="_blank">Instanz-ID</a></span></td>
        <td><span class="notranslate">The second instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">joint_1</span></td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span class="notranslate">A previously defined revolute joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">joint_2</span></td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span class="notranslate">A previously defined revolute <i>or</i> prismatic joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">ratio</span></td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span class="notranslate">Set the velocity ratio between the two joints</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code"><span data-keyref="Type_ID_Physics_Joint"><a href="../../../../../GameMaker_Language/GML_Reference/Physics/Joints/Joints.htm" target="_blank">Physics Joint ID</a></span></p>
  <p> </p>
  <h4>Beispiel:</h4>
  <p class="code">var t_fix, g_fix, inst1, inst2, inst3, r_joint, p_joint;<br />
    g_fix = physics_fixture_create();<br />
    physics_fixture_set_box_shape(g_fix, 40, 10);<br />
    t_fix = physics_fixture_create();<br />
    physics_fixture_set_circle_shape(t_fix, 10);<br />
    physics_fixture_set_density(t_fix, 0.5);<br />
    inst1 = instance_create_layer(60, room_height - 30, &quot;Background&quot;, obj_Ground);<br />
    inst2 = instance_create_layer(40, room_height - 300, &quot;Instances&quot;, obj_Cog);<br />
    inst3 = instance_create_layer(150, room_height - 300, &quot;Instances&quot;, obj_Barrel);<br />
    physics_fixture_bind(g_fix, inst1);<br />
    physics_fixture_bind(t_fix, inst2);<br />
    physics_fixture_bind(t_fix, inst3);<br />
    r_joint = physics_revolute_joint_create(inst1, inst2, 40, room_height - 300, -80, 80, 1, 10, 0.5, 1, 0);<br />
    p_joint = physics_prismatic_joint_create(inst1, inst3, 150, room_height - 300, 0, 1, -10, 10, true, 0, 0, 0, 0);<br />
    <span data-field="title" data-format="default">physics_joint_gear_create</span>(inst2, inst3, r_joint, p_joint, 0.5);
  </p>
  <p>Die obige <span class="notranslate">code</span> erstellt und definiert zwei Fixtures und erstellt dann drei Instanzen, eine &quot;obj_Ground&quot; und zwei weitere, &quot;obj_Cog&quot; und &quot;obj_Barrel&quot;. Die Fixtures werden dann an diese Instanzen gebunden und zwei Gelenke werden erstellt. Ein Drehgelenk zwischen dem Boden und dem Zahnrad und ein prismatisches Gelenk zwischen dem Boden und dem Fass. Schließlich wird ein Zahnradgelenk zwischen den Instanzen Zahnrad und Fass erstellt, wobei die zuvor definierten revolutiven und prismatischen Gelenke verwendet werden.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Rücken: <a href="Joints.htm">Gelenke</a></div>
        <div style="float:right">Nächste: <a href="physics_joint_rope_create.htm"><span class="notranslate">physics_joint_rope_create</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_gear_create
-->
  <!-- TAGS
physics_joint_gear_create
-->
</body>
</html>