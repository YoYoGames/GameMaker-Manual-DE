<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>steam_upload_score_buffer</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for steam_upload_score_buffer" />
  <meta name="rh-index-keywords" content="steam_upload_score_buffer" />
  <meta name="search-keywords" content="steam_upload_score_buffer" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>steam_upload_score_buffer</h1>
  <p>Diese Funktion sendet einen Spielstand an das angegebene Leaderboard zusammen mit einem Datenpaket, das aus einem <span class="notranslate">buffer</span> erstellt wurde. Die <span class="notranslate">buffer</span> sollte nicht mehr als 256 Bytes groß sein - alles was darüber hinausgeht, wird abgeschnitten - und kann beliebige Daten enthalten, die Sie benötigen. Der hochzuladende Punktestand sollte eine reelle Zahl sein, und der Name des Leaderboards ist eine Zeichenkette, die beim Erstellen des Leaderboards mit der Funktion <a href="steam_create_leaderboard.htm"><tt>steam_create_leaderboard()</tt></a>.</p>
  <p>Wenn die Funktion fehlschlägt, gibt sie den Wert -1 zurück, während ein erfolgreicher Post eine eindeutige ID für den Upload zurückgibt und ein asynchrones <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Steam.htm">Steam-Ereignis</a> auslöst. Dieses Ereignis erstellt eine <tt>DS-Map</tt> in der eingebauten Variable <tt>async_load</tt> mit den folgenden Schlüssel/Wert-Paaren:</p>
  <ul class="colour">
    <li>&quot;<b>event_type</b>&quot; - Dieser Schlüssel enthält den Wert &quot;<b>leaderboard_upload</b>&quot;, wenn er durch diese Funktion ausgelöst wird.</li>
    <li>&quot;<b>lb_name</b>&quot; - Dieser Schlüssel enthält den Namen der Rangliste, die auf</li>
    <li>&quot;<b>Erfolg</b>&quot; - 1, wenn der Beitrag erfolgreich war, 0, wenn er fehlgeschlagen ist</li>
    <li>&quot;<b>updated</b>&quot; - Ist 1, wenn der Punktestand in der Rangliste tatsächlich aktualisiert wurde (d.h.: der neue Punktestand war besser), ansonsten 0. Beachten Sie, dass die hochgeladenen Daten von <span class="notranslate">buffer</span> auch nicht hinzugefügt werden, wenn der Punktestand aktualisiert wurde.</li>
    <li>&quot;<b>post_id</b>&quot; - Dieser Schlüssel sollte mit dem vom Upload-Aufruf zurückgegebenen ID-Wert übereinstimmen</li>
    <li>&quot;<b>score</b>&quot; - Dieser Schlüssel enthält den Punktestand, der gebucht wurde</li>
  </ul>
  <p>Beachte, dass beim Herunterladen der Bestenliste der Schlüssel &quot;entries&quot; der <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><tt>async_load</tt></a> Karte nun einen &quot;data&quot;-Schlüssel haben wird, so dass man die hochgeladenen Daten <span class="notranslate">buffer</span> abrufen kann (siehe das Beispiel <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Steam.htm">Steam Event</a> extended <span class="notranslate">code</span> für weitere Details). Diese Daten <span class="notranslate">buffer</span> werden in <b>Base 64 kodiert</b> sein und müssen daher mit der Funktion <a href="../../Buffers/buffer_base64_decode.htm"><tt>buffer_base64_decode()</tt></a> auf die Daten anwenden, bevor Sie sie aus <span class="notranslate">buffer</span> lesen.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">steam_upload_score_buffer(lb_name, score, buffer);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td><span class="notranslate">lb_name</span></td>
        <td>Der Name des Leaderboards, in das Sie die Ergebnisse hochladen (eine Zeichenkette).</td>
      </tr>
      <tr>
        <td><span class="notranslate">score</span></td>
        <td>Die hochzuladende Punktzahl (eine echte Zahl).</td>
      </tr>
      <tr>
        <td><span class="notranslate">buffer</span></td>
        <td>Die ID der <span class="notranslate">buffer</span>, die angehängt werden soll.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Erweitertes Beispiel:</h4>
  <p>In diesem Beispiel laden wir zunächst einen Spielstand hoch und analysieren dann die <tt>async_load-Map</tt>, die bei Erfolg zurückgegeben wird. Die folgende <span class="notranslate">code</span> zeigt ein typisches Beispiel für das Hochladen, wobei eine <span class="notranslate">buffer</span> erstellt wird, um eine Zeichenkette zu speichern, die uns mitteilt, von welcher Ebene die Punktzahl hochgeladen wurde:</p>
  <p class="code">if (hp &lt;= 0)<br />
    {<br />
        var buff = buffer_create(256, buffer_fixed, 1 );<br />
        buffer_write(buff, buffer_string, &quot;Uploaded on level &quot; + string(global.Level));<br />
        upload_ID = steam_upload_score(&quot;Game Scores&quot;, score, buff);<br />
        if (!upload_ID)<br />
        {<br />
            alarm[0] = room_speed;<br />
        }<br />
        buffer_delete(buff);<br />
    }</p>
  <p>Beachten Sie, dass wir einen Alarm eingestellt haben, wenn der Aufruf fehlschlägt. Dies würde dazu dienen, den Upload zu einem späteren Zeitpunkt erneut zu versuchen, und Sie können dort zusätzliche <span class="notranslate">code</span> hinzufügen, um den Upload erneut zu versuchen oder den Spielstand in einer Textdatei zu speichern, falls er weiterhin fehlschlägt, usw.. Beachten Sie auch, dass wir die <span class="notranslate">buffer</span> sofort löschen, da sie für die Funktion nicht mehr benötigt wird. Wir fügen nun das Folgende in das <b>async-Ereignis von Steam</b> für die Instanz hinzu, die die Spielstände kontrolliert:</p>
  <p class="code">var type = ds_map_find_value(async_load, &quot;event_type&quot;);<br />
    if (type == &quot;leaderboard_upload&quot;)<br />
    {<br />
        var lb_ID = ds_map_find_value(async_load, &quot;post_id&quot;);<br />
        if lb_ID == upload_ID<br />
        {<br />
            var lb_name = ds_map_find_value(async_load, &quot;lb_name&quot;);<br />
            var lb_done = ds_map_find_value(async_load, &quot;success&quot;);<br />
            var lb_score = ds_map_find_value(async_load, &quot;score&quot;);<br />
            var lb_updated = ds_map_find_value(async_load, &quot;updated&quot;);<br />
            show_debug_message(&quot;leaderboard post id:&quot; + string(lb_ID) + &quot; to lb:&quot; + string(lb_name) + &quot; with score:&quot; + string(lb_score) + &quot; updated=&quot; + string(lb_updated));<br />
            if (lb_done)<br />
            {<br />
                show_debug_message(&quot;- Succeeded&quot;);<br />
            }<br />
            else<br />
            {<br />
                show_debug_message(&quot;- Failed&quot;);<br />
            }<br />
        }<br />
    }</p>
  <p>Im Beispiel werden die Rückgabewerte einfach als Debug-Meldungen in das Fenster <span class="notranslate">compiler</span> ausgegeben, aber Sie können dieses Ereignis verwenden, um die Informationen auf jede beliebige Weise zu verarbeiten.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Steam_Leaderboards.htm">Bestenlisten</a></div>
        <div style="float:right">Nächste: <a href="steam_download_scores.htm"><span class="notranslate">steam_download_scores</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
steam_upload_score_buffer
-->
  <!-- TAGS
steam_upload_score_buffer
-->
</body>
</html>