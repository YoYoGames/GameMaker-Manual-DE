<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_parse" />
  <meta name="rh-index-keywords" content="json_parse" />
  <meta name="search-keywords" content="json_parse" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_parse</h1>
  <p>Diese Funktion kann verwendet werden, um eine JSON-Zeichenkette zu parsen (entweder vorher erstellt mit <a href="json_stringify.htm"><span class="notranslate">json_stringify</span></a> oder aus einer beliebigen gültigen Quelle) zu analysieren und in eine Sammlung von Arrays oder Structs zu konvertieren, wobei ein Array das Äquivalent eines JSON-Arrays und ein Struct das Äquivalent eines JSON-Objekts ist. Sie geben die zu parsende Zeichenkette an, und die Funktion gibt das Array oder die Struktur der obersten Ebene zurück, die dann in Ihrem <span class="notranslate">code</span> verwendet werden kann. Wenn Sie sich über den Inhalt des JSON nicht sicher sind, können Sie die verschiedenen <a href="../../Variable_Functions/Variable_Functions.htm">Variablenfunktionen</a> verwenden (wie <a href="../../Variable_Functions/typeof.htm"><span class="inline">typeof()</span></a> und <a href="../../Variable_Functions/variable_struct_get_names.htm"><span class="inline">variable_struct_get_names()</span></a> im Falle einer Struktur) verwenden, um den zurückgegebenen Inhalt zu überprüfen. Beachten Sie, dass der Versuch, einen ungültigen Wert (d.h. keine Zeichenkette) zu parsen, einen Ausnahmefehler auslöst.</p>
  <p>Bei der Verwendung dieser Funktion gibt es einige wichtige Dinge zu beachten:</p>
  <ul class="colour">
    <li>Wenn die übergebene JSON-Zeichenfolge <span class="inline">undefined</span> als Wert für eine Eigenschaft enthält, wird sie beim Parsen in <span class="inline">pointer_null</span> umgewandelt.</li>
    <li>Mit dieser Funktion können Sie nur JSON-Dateien mit einer maximalen Verschachtelungsgrenze von 128 laden.</li>
  </ul>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">json_parse(json)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th><th>Typ</th>
        <th>Beschreibung</th>
     </tr>
      <tr>
        <td><span class="notranslate">json</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The JSON string to parse</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code"><span data-keyref="Type_Struct">Struct</span> or <span data-keyref="Type_Array">Array</span></p>
  <p> </p>
  <h4>Beispiel:</h4>
  <p class="code">json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    data = json_parse(json);<br />
    show_debug_message(data);
  </p>
  <p>Die obige <span class="notranslate">code</span> erstellt eine neue Zeichenkette, die ein gültiges JSON-Objekt enthält, und ruft dann <span class="inline">json_parse()</span> auf, um diese Zeichenkette in eine <span class="notranslate">GML</span> -Struktur zu konvertieren. Anschließend wird das Ergebnis in das Debug-Protokoll ausgegeben.</p>
  <p class="note"><span class="note">HINWEIS</span> Sie werden feststellen, dass die JSON-Zeichenfolge vor jedem doppelten Anführungszeichen (<span class="inline2">&quot;</span>) einen Backslash<span class="inline2">(\</span>) enthält:<br>
    <br>
   <span class="inline2">json = &quot;{ \ <strong>&quot; </strong></span>myObj<br>
    <br>
    Damit soll sichergestellt werden, dass das doppelte Anführungszeichen als tatsächliches Zeichen innerhalb der Zeichenfolge gelesen wird, anstatt als Teil von <span class="notranslate">code</span> gelesen zu werden und die Zeichenfolge vorzeitig zu schließen. Auf diese Weise verwenden wir einen Backslash, um das doppelte Anführungszeichen zu &quot;entkommen&quot;.<br>
    <br>
    Wenn Sie jedoch JSON aus einer externen Datei laden, ist es nicht notwendig, Zeichen in dieser Datei zu entschlüsseln, und dies kann zu Fehlern beim Parsen führen.
  </p>
  <hr />
  <p>Nach dem Parsen der obigen JSON-Zeichenfolge können Sie, wenn Sie ihre Struktur kennen, verschiedene <a href="../../Variable_Functions/Variable_Functions.htm">Variablenfunktionen</a> verwenden, um ihren Inhalt zu überprüfen und zu lesen:</p>
  <p class="code">data = json_parse(json);<br />
    <br />
    // Check if the struct has myObj variable<br />
    if variable_struct_exists(data, &quot;myObj&quot;)<br />
    {<br />
        // Check if it&#39;s a struct<br />
        if is_struct(data.myObj)<br />
        {<br />
            // Print all struct members to the log<br />
            var _names = variable_struct_get_names(data.myObj);<br />
            var _str = &quot;&quot;;<br />
            for (var i = 0; i &lt; array_length(_names); i++;)<br />
            {<br />
                _str = _names[i] + &quot;: &quot; + string(variable_struct_get(data.myObj, _names[i]));<br />
                show_debug_message(_str);<br />
            }<br />
        }<br />
    }<br />
    <br />
    // Check if the struct has myArray variable<br />
    if variable_struct_exists(data, &quot;myArray&quot;)<br />
    {<br />
        // Check if it&#39;s an array<br />
        if is_array(data.myArray)<br />
        {<br />
            show_debug_message(data.myArray);<br />
        }<br />
    }
  </p>
  <p>Die obige <span class="notranslate">code</span> parst die angegebene JSON-Zeichenfolge und erzeugt die folgende Konsolenausgabe:</p>
  <p class="code">oranges: 12<br />
    potatoes: 100000<br />
    avocados: 0<br />
    apples: 10<br />
    [ 0,1,2,2,4,0,1,5,1 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Encoding_And_Hashing.htm">Dateikodierung</a></div>
        <div style="float:right">Nächste: <a href="base64_encode.htm"><span class="notranslate">base64_encode</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
json_parse
-->
  <!-- TAGS
json_parse
-->
</body>
</html>