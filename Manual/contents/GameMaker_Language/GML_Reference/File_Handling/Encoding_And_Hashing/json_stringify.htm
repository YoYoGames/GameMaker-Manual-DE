<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>Mit dieser Funktion können Sie einzelne oder verschachtelte Structs und Arrays in einen gültigen JSON-String konvertieren. Sie geben den zu verwendenden Ausgangswert an (einen Array-Index oder eine Struct-Referenz) und die Funktion &quot;stringifiziert&quot; ihn dann und wandelt ihn in einen JSON-String um (sie wandelt <span class="notranslate">GameMaker</span> Arrays in JSON-Arrays und <span class="notranslate">GameMaker</span> Structs in JSON-Objekte um).</p>
  <p>Bei der Verwendung dieser Funktion gibt es einige wichtige Dinge zu beachten:</p>
  <ul class="colour">
    <li>Die Funktion konvertiert <em>keine </em> DS-Maps, Listen oder andere Datenstrukturen in JSON, sondern speichert lediglich den internen Indexwert für die Struktur (der von geringem Nutzen ist, da sich der Index zwischen den Durchläufen des Spiels ändert), und daher sollten Sie nicht versuchen, einen Wert zu stringifizieren, der Verweise auf Datenstrukturen enthält (dafür gibt es <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>Die Funktion wandelt nahezu jeden Wert in eine &quot;gültige&quot; JSON-Zeichenkette um. Die tatsächlichen Werte in der Zeichenkette entsprechen jedoch aufgrund der Funktionsweise des JSON-Standards möglicherweise nicht genau dem, was Sie erwarten:<br>
      <br>
      &quot;JSON ist in Bezug auf Zahlen agnostisch. In jeder Programmiersprache kann es eine Vielzahl von Zahlentypen mit unterschiedlichen Kapazitäten und Ergänzungen geben, fest oder fließend, binär oder dezimal. Das kann den Austausch zwischen verschiedenen Programmiersprachen erschweren. JSON bietet stattdessen nur die Darstellung von Zahlen an, die Menschen verwenden: <span class="notranslate">sequence</span> von Ziffern. Alle Programmiersprachen wissen, wie man mit den Ziffern <span class="notranslate">sequences</span> umgeht, auch wenn sie sich über die internen Darstellungen nicht einig sind.&quot;<br>
      <br>
      Weitere Informationen finden Sie im <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">ECMA JSON Standard</a>.
    </li>
    <li>Wenn Sie einen int64 in die in JSON zu konvertierenden Werte einfügen, wird er als <i>int</i> geschrieben, wenn er im gültigen Bereich für einen int32 liegt, als <i>double</i>, wenn dies ohne Präzisionsverlust möglich ist, oder (wenn keiner dieser Fälle zutrifft) als <i>String</i> mit einer Kennung &quot;<span class="inline">@i64@</span>&quot; davor und &quot;<span class="inline">$i64$</span>&quot; danach. Wenn Sie das JSON erneut parsen, erkennt <span data-keyref="GameMaker Name">GameMaker</span> diese Bezeichner und wandelt den Wert wieder in einen int64 um. Das bedeutet, dass, wenn das JSON für <span class="notranslate">server</span> oder ein anderes Nicht-GameMaker-Ziel bestimmt ist, diese Werte nicht geeignet sind und daher vermieden werden sollten.</li>
    <li>Wenn Sie <span class="inline">infinity</span>, <span class="inline">-infinity</span> oder <span class="inline">NaN</span> in die in JSON zu konvertierenden Werte aufnehmen, werden diese als Strings kodiert, da diese Werte nicht Teil des JSON-Standards sind. Beim Parsen des resultierenden JSON werden sie <strong>nicht </strong>in ihre <span class="notranslate">runtime</span> -Werte zurückkonvertiert und bleiben als Strings erhalten. Beachten Sie, dass <span class="inline">NaN</span> bei der Stringisierung in &quot;nan&quot; (Kleinbuchstaben) umgewandelt wird.</li>
    <li>Beim Schreiben einer zurückgegebenen JSON-Zeichenfolge in eine <span class="inline">ini</span> -Datei ist Vorsicht geboten, da die <span class="inline">ini</span> -Spezifikationen bei der Verwendung von Anführungszeichen und Escape-Zeichen Probleme verursachen können. Siehe die Funktion <a href="../Ini_Files/ini_write_string.htm"><span class="inline">ini_write_string()</span></a> für weitere Informationen.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">json_stringify(val)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Typ</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td><span class="notranslate">val</span></td>
        <td><span data-keyref="Type_Struct">Struktur</span> oder <span data-keyref="Type_Array">Array</span></td>
        <td><span class="notranslate">The reference value for a struct or array to convert into a JSON string</span></td>
      </tr>
      <tr>
        <td>filter_func</td>
        <td><span data-keyref="Type_Function"><a href="../../../GML_Overview/Script_Functions.htm" target="_blank">Function</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> Filter function that processes each item. Syntax: <span class="inline2">function(key, value) -&gt; new_value</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Rückgabe:</h4>
  <p class="code"><span data-keyref="Type_String">String</span></p>
  <p> </p>
  <h4>Beispiel:</h4>
  <p class="code">var _contents =<br />
    {<br />
        version : &quot;1.0.0&quot;,<br />
        data:<br />
        {<br />
            coins : 4,<br />
            mana : 15,<br />
            playername : &quot;Gurpreet&quot;,<br />
            items :<br />
            [<br />
                ITEM.SWORD,<br />
                ITEM.BOW,<br />
                ITEM.GUITAR<br />
            ]<br />
        }<br />
    };<br />
    <br />
    var _json_string = json_stringify(_contents);
  </p>
  <p>Die obige <span class="notranslate">code</span> konvertiert die <span class="inline2">_contents-Struktur</span> in eine JSON-Zeichenfolge und speichert die Zeichenfolge in einer Variablen. Die zurückgegebene Zeichenkette würde wie folgt aussehen:</p>
  <p class="code">{ &quot;data&quot;: { &quot;items&quot;: [ 0.0, 1.0, 2.0 ], &quot;coins&quot;: 4.0, &quot;mana&quot;: 15.0, &quot;playername&quot;: &quot;Gurpreet&quot; }, &quot;version&quot;: &quot;1.0.0&quot; }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Encoding_And_Hashing.htm">Dateikodierung</a></div>
        <div style="float:right">Nächste: <a href="json_parse.htm"><span class="notranslate">json_parse</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>