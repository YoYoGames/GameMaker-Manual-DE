<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Rollback-System</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Details for Rollback Multiplayer" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>Rollback-System</h1>
  <p>Nachdem Sie die Anleitung zum <a data-xref="{title}" href="Creating_Multiplayer.htm">Erstellen eines Multiplayer-Spiels</a> gelesen haben, haben Sie vielleicht einige Fragen zur Funktionsweise des Rollback-Systems. Auf dieser Seite wird dies näher erläutert.</p>
  <h2>Was ist Rollback?</h2>
  <p>Beim Online-Spielen kann es leicht zu Verzögerungen kommen. Wenn Sie mit jemandem aus der Ferne spielen, kann es den Bruchteil einer Sekunde dauern, bis Ihre Eingaben Sie erreichen, aber selbst das kann ausreichen, um Ihr Spielerlebnis zu ruinieren.</p>
  <p>Rollback verwendet Vorhersagen, um den Effekt der Verzögerung zu verringern. Auf der Grundlage früherer Eingaben wird vorhergesagt, was der andere Nutzer als Nächstes tun wird, und das Ergebnis dieser Vorhersage wird Ihnen sofort angezeigt.</p>
  <p>Wenn die Vorhersage richtig ist, kommt es nicht zu Verzögerungen, und das Spiel reagiert viel schneller.</p>
  <p>Manchmal stellt das System jedoch fest, dass seine Vorhersage falsch war. In diesem Fall kehrt es zum letzten korrekten Zustand <em>zurück</em> und setzt das Spiel ab diesem Punkt fort. Aus diesem Grund heißt es &quot;<strong>Rollback Multiplayer</strong>&quot;.</p>
  <h3>Determinismus</h3>
  <p>Rollback ist deterministisch. Es teilt nur die Eingaben mit anderen Spielern und erwartet, dass alle Spieler dieselbe Logik auf die gegebene Eingabe anwenden und auf allen Clients dieselben Ergebnisse erzielen.</p>
  <p>Ein anderer Ansatz für den Mehrspielermodus ist die &quot;Zustandsreplikation&quot;, bei der der Zustand des Spiels ständig zwischen den Clients synchronisiert wird, um sicherzustellen, dass sie immer das Gleiche tun.</p>
  <p>Rollback tut das nicht - es sendet immer nur Eingaben, behält aber auch den Zustand im Auge, so dass es im Falle einer falschen Vorhersage zurückgesetzt werden kann.</p>
  <p class="note"><em><strong>Was ist ein Kunde?</strong></em><br>
    <br>
    Ein &quot;Client&quot; ist ein Spieler in Ihrem Spiel und bezieht sich auf seine Kopie des Spiels, die auf seinem Computer läuft.
  </p>
  <h2>Wie funktioniert das?</h2>
  <p>Wie bereits erwähnt, <strong>werden</strong> mit Rollback <strong>nur Eingaben</strong> zwischen Spielern <strong>übermittelt</strong>.</p>
  <p>Es gibt zwei Hauptaufgaben, die Rollback übernimmt:</p>
  <ul class="colour">
    <li><strong>Eingabe</strong>: Die <a href="Rollback_Functions/rollback_define_input.htm">Eingaben</a> jedes Spielers werden an andere Spieler gesendet. Wenn Spieler 0 in seinem eigenen Client auf <strong>&quot;Feuer&quot;</strong> drückt, sorgt Rollback dafür, dass auch andere Clients sehen, dass Spieler 0 auf <strong>&quot;Feuer</strong>&quot; drückt <strong>.</strong><br>
      <br>
     <strong>Vorhersagen werden nur bei Eingaben ausgeführt.</strong>
    </li>
    <li><strong>Zustand</strong>: Dazu gehören alle verwalteten Objekte und ihre Variablen. Diese werden NICHT zwischen Spielern synchronisiert: Die Änderung einer Variable in einem Client führt nicht automatisch zu einer Aktualisierung in einem anderen Client.<br>
      <br>
     <strong>Der Zustand wird nur zum Zweck der Rückgängigmachung verwaltet.</strong>
    </li>
  </ul>
  <h2>Wo liegt also der Unterschied?</h2>
  <p>Die<strong>Eingabe</strong> ändert den <strong>Zustand</strong>, was das Grundkonzept von Rollback Multiplayer ist.</p>
  <p>Hier ist ein Beispiel:</p>
  <ul class="colour">
    <li><strong>Eingabe</strong>: Spieler 0 drückt <strong>&quot;Feuer&quot;.</strong></li>
    <li><strong>Zustand</strong>: Weil Spieler 0 auf Feuer gedrückt hat, wird ein Projektil erzeugt. Dieses Projektil kollidiert schließlich mit einem Felsen. Dies führt dazu, dass Spieler 0 einen Punkt erhält.<br>
      <br>
      Dies ist im Wesentlichen Ihr ganzes Spiel, das vollständig von der Eingabe abhängt.
    </li>
  </ul>
  <p>Der &quot;<strong>Input</strong>&quot; ist das, was Rollback zwischen allen Spielern kommuniziert, nicht der Zustand.</p>
  <p>Da jedoch alle Spielclients dieselbe Logik auf die empfangenen Eingaben anwenden (was eine Voraussetzung ist), <strong>führen sie alle zum selben Zustand</strong>.</p>
  <p><img class="center" height="521" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/multiplayer_input_sync_explained.png" width="1096" /></p>
  <h2>Was ist also ein Staat?</h2>
  <p>Wenn nur die Eingabe synchronisiert wird, wozu dient dann der <strong>Zustand</strong>?</p>
  <p>Da die Eingabe den Zustand beeinflusst, kann eine falsche Eingabevorhersage zu einem <strong>falschen Zustand</strong> führen.</p>
  <p>Wenn ein Rollback feststellt, dass eine Vorhersage falsch war, wird der aktuelle Zustand durch den korrekten Zustand ersetzt, und die Eingaben und Vorhersagen werden ab diesem Punkt erneut ausgeführt. Dies schließt alle verwalteten Objekte und ihre Variablen ein.</p>
  <p>Das bedeutet nicht, dass Rollback Objekte und Variablen zwischen Clients synchronisiert. Nur weil die <span class="inline2">Variable_a</span> in einem Client auf <span class="inline2">&quot;Gurpreet&quot;</span> gesetzt ist, bedeutet das nicht, dass auch andere Clients denselben Wert sehen werden.</p>
  <p>Sie würden nur dann denselben Wert für eine Variable sehen, wenn er von den Eingaben eines Spielers oder einem anderen verwalteten System, wie z. B. Alarmen und Zufallsfunktionen, abgeleitet wäre.</p>
  <h2 id="h2">Verwaltete Objekte</h2>
  <p>Objekte haben ein Kontrollkästchen &quot;<strong>Verwaltet</strong>&quot;, das bei neuen Objekten standardmäßig aktiviert ist:</p>
  <p><img>Objekte, die als verwaltet gekennzeichnet sind, können zurückgesetzt werden und es können Vorhersagen für sie getroffen werden, einschließlich aller ihrer Variablen, ihrer Erstellung und Zerstörung.</p>
  <p>Alle Objekte, die Teil des Spiels sind, wie der Spieler, Manager/Controller-Objekte, Gegenstände, Projektile usw., müssen als verwaltet markiert werden.</p>
  <p>Sie können diese Funktion für Objekte deaktivieren, die nicht zwischen Spielern synchronisiert werden müssen, z. B. statische Weltobjekte, Grafiken, Effekte usw., die das Spielgeschehen in keiner Weise beeinflussen.</p>
  <p>Beachten Sie, dass die verwaltete Eigenschaft eines übergeordneten Objekts nicht automatisch auf die untergeordneten Objekte angewandt wird, so dass für jedes untergeordnete Objekt das Kontrollkästchen "Verwaltet" manuell gesetzt werden muss.</p>
  <h2 id="h">Synchrontest</h2>
  <p><span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> nimmt eine <span class="notranslate">argument</span> für den Sync-Test, der standardmäßig aktiviert ist (wenn <span class="notranslate">argument</span> nicht angegeben ist).</p>
  <p>Sync Test wird verwendet, um Ihr Spiel offline zu testen. Wenn Synchronisierungsprobleme auftreten, werden Sie darüber informiert, indem der Fehler in das Ausgabeprotokoll gedruckt wird. Sie können Sync Test auf <span class="notranslate">Windows</span>, macOS und Opera GX verwenden.</p>
  <p>Der Sync-Test führt alle Ereignisse Ihres Spiels <span class="notranslate">code</span> zweimal in einem Frame aus, um eventuelle Synchronisationsprobleme zu erkennen. Das bedeutet, dass beim Offline-Test einige Ereignisse doppelt auftreten können, was beim Online-Test nicht der Fall sein wird.</p>
  <h3>Zufalls- und Mock-Eingabe</h3>
  <p>Während des Synchrontests erhalten &quot;entfernte&quot; Player-Instanzen zufällige Eingabewerte für ihre <a href="Defining_Inputs.htm">definierten Eingänge</a>, um eine einfache Form des Testens zu ermöglichen. Sie können dies mit <span class="inline"><a href="Rollback_Functions/rollback_use_random_input.htm">rollback_use_random_input()</a></span> deaktivieren.</p>
  <p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p>
  <p class="video_subtitle">Der zweite Spieler erhält während des Sync-Tests zufällige Eingaben.</p>
  <p>Sie können Remote-Playern im Sync-Test auch temporäre Mock-Eingänge zuweisen. Weitere Informationen finden Sie unter <a data-xref="{text}" href="Defining_Inputs.htm#h1">Mock-Eingabe</a>.</p>
  <h2>Effektive Entwicklung von Multiplayer</h2>
  <p>Sie müssen sicherstellen, dass alle Spiel-Clients die <strong>gleiche Logik</strong> ausführen, wenn sie die <strong>gleiche Eingabe</strong> erhalten. Wenn eine bestimmte Instanz nur für einen Client erstellt oder verschoben wurde, wird dies nicht auf die anderen Clients übertragen.</p>
  <p>Dieses Problem tritt in der Regel nicht auf, wenn Sie Ihr Spiel so programmieren, wie in <a data-xref="{title}" href="Creating_Multiplayer.htm">Erstellen eines Mehrspielerspiels</a> gezeigt, wobei die gesamte Spielerlogik für alle Spielerinstanzen auf die gleiche Weise abläuft, unabhängig davon, ob eine Instanz <a href="Rollback_Variables/player_local.htm">lokal</a> ist <a href="Rollback_Variables/player_local.htm">oder nicht</a>. Wenn Sie jedoch eine Bedingung implementieren, die nur für einen bestimmten Spieler etwas bewirkt und für andere nicht, führt dies zu einer Unterbrechung des Spielstatus.</p>
  <h2 id="h1">Definieren eines Spielerobjekts</h2>
  <h3>Automatische Erstellung von Player-Instanzen</h3>
  <p>Wie in <a data-xref="{title}" href="Creating_Multiplayer.htm">Erstellen eines Multiplayer-Spiels</a> gezeigt, können Sie mit <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Spieler definieren (Rollback)</a> ein Spielerobjekt definieren und das System wird automatisch Instanzen davon für jeden verbundenen Spieler erstellen. Es zerstört auch Instanzen für Spieler, die die Verbindung abbrechen.</p>
  <p>Den auf diese Weise erstellten Player-Instanzen werden ihre IDs automatisch in der Variablen <span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span> zugewiesen. Innerhalb jeder Player-Instanz können Sie einfach <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> ohne <span class="notranslate">arguments</span> aufrufen, und Sie erhalten die Eingaben für diesen bestimmten Spieler.</p>
  <p>Dies ist die Standardmethode, um das Rollback-System zu verwenden, aber Sie können die Spielerinstanzen und ihre Eingaben auch manuell verwalten.</p>
  <h3>Manuelle Erstellung von Player-Instanzen</h3>
  <p>Um Spieler-Instanzen manuell zu verwalten, rufen Sie nicht <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> auf. Dies führt dazu, dass das Spiel startet, ohne dass Spielerinstanzen erstellt wurden.</p>
  <p>Erstellen Sie dann Ihre eigenen Player-Instanzen manuell, idealerweise im <a data-xref="{text}" href="Rollback_Events.htm#h">Rollback-Startereignis</a>, und geben Sie ihnen Player-IDs in einer benutzerdefinierten Variablen. Um Eingaben für einen Spieler zu erhalten, rufen Sie <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a> auf und geben Sie die ID des Spielers als <span class="notranslate">argument</span> an. Rufen Sie <a href="Rollback_Functions/rollback_get_info.htm"><span class="inline">rollback_get_info()</span></a> auf, um die <a href="Rollback_Variables/Rollback_Variables.htm">Variablen</a> in einer Struktur abzurufen, die andernfalls automatisch den Spielern zugewiesen werden würden.</p>
  <p>Auf diese Weise können Sie manuell verwalten, wann und wie Player-Instanzen erstellt werden, welche IDs ihnen zugewiesen werden und wie die Eingaben für einen bestimmten Player abgerufen werden.</p>
  <h3>Player-Instanzen am Leben erhalten</h3>
  <p>Wenn Sie <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> / <a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a> verwenden, zerstören Sie die erstellten Player-Instanzen nicht. Wenn Sie einen Spieler als besiegt anzeigen müssen, dann ändern Sie seine <span class="notranslate">sprite</span>, oder verstecken Sie ihn mit einer anderen Methode, aber lassen Sie die Instanz am Leben, da sie von <span class="notranslate">GameMaker</span> verwaltet wird.</p>
  <h2>Einzelspieler</h2>
  <p>Das Rollback-System kann bei der Erstellung eines Einzelspielerspiels verwendet werden. Geben Sie beim Aufruf von <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> einfach <strong>1</strong> als Anzahl der Spieler an.</p>
  <p>Auf diese Weise stellt das System nie eine Verbindung zu <span class="notranslate">servers</span> her und Ihr Spiel ist im Wesentlichen offline, kann aber jederzeit zu einem Online-Multiplayer-Spiel erweitert werden.</p>
  <p>Wenden Sie diesen Ansatz an, wenn Sie ein neues Projekt erstellen, das in Zukunft den Mehrspieler-Modus nutzen könnte, da es schwieriger ist, den Mehrspieler-Modus in Ihr Spiel zu implementieren, wenn es bereits fertiggestellt ist, ohne das Rollback-System zu nutzen.</p>
  <h2 id="h4">Manueller vs. automatischer Start</h2>
  <p>Standardmäßig beginnt ein Multiplayer-Spiel, sobald alle Spieler beigetreten sind. Sie können es jedoch auch vorher starten, indem Sie <a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>.</p>
  <p>Sie können das Autostartverhalten vollständig deaktivieren, indem Sie <a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a>. Dies bedeutet, dass das Spiel darauf wartet, dass Sie das Spiel manuell starten.</p>
  <p>Der Autostart wird automatisch deaktiviert, wenn die Spielervoreinstellungen <a href="Rollback_Functions/rollback_use_player_prefs.htm">aktiviert sind</a>.</p>
  <p><span></span></p>
  <h2>Weitere Lektüre</h2>
  <p>Auf den folgenden Seiten finden Sie weitere Informationen über das Rollback-System:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Defining_Inputs.htm">Definieren von Eingaben</a></li>
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">Rollback-Einschränkungen</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">Rollback-Ereignisse</a></li>
    <li><a data-xref="{title}" href="Rollback_Preferences.htm">Spieler-Einstellungen</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Zurück: <a data-xref="{title}" href="Rollback_Multiplayer.htm">Rollback Multiplayer</a></div>
        <div>Nächste: <a data-xref="{title}" href="Defining_Inputs.htm">Definieren von Eingaben</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
</body>
</html>