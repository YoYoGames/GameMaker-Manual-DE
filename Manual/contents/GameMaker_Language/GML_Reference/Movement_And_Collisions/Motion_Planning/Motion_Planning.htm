<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Bewegungsplanung</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for Motion Planning functions and variables" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Motion Planning,mp,mp funtions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Bewegungsplanung</h1>
  <p>In vielen Spielen möchte man, dass Gegner, NPC's, Feinde etc... mit dem Spieler interagieren und eine gewisse Intelligenz zeigen, wenn sie sich bewegen, d.h. man möchte, dass sie Hindernissen ausweichen, Routen planen und generell nicht gegen alles stoßen, was sich ihnen in den Weg stellt! Um dies zu unterstützen, verfügt <span data-keyref="GameMaker Name">GameMaker</span> über eine Reihe von Funktionen, die sich mit der Bewegungsplanung befassen. Beachten Sie, dass diese Funktionen zwar für Dinge wie Spielgegner gedacht sind, aber auch für alle möglichen anderen Dinge verwendet werden können, z. B. um Text flüssig einzuführen oder Übergänge zu erstellen usw.. Unabhängig davon, welche der unten aufgeführten Funktionen Sie in Ihrem Spiel verwenden möchten, sollten Sie beachten, dass ein einziger Funktionssatz in vielen Situationen keine perfekte Lösung bietet und dass Sie die Funktionen je nach Situation in Ihrem Spiel &quot;mischen und anpassen&quot; müssen.</p>
  <p>Die Bewegungsplanung im <span data-keyref="GameMaker Name">GameMaker</span> wird von den <b>mp_-Funktionen</b> übernommen, die sich in die folgenden drei Gruppen aufteilen:</p>
  <h2><label for="one">Lineare Funktionen</label></h2>
  <p>Diese Art von Funktion versucht, einen kollisionsfreien Weg für die Instanz zu berechnen. Sobald dieser Pfad berechnet wurde, können Sie ihn der Instanz zuweisen, um sich in Richtung des Ziels zu bewegen. Die Berechnung des Pfades wird einige Zeit in Anspruch nehmen, aber danach wird die Ausführung des Pfades schnell sein. Das gilt natürlich nur, wenn sich die Situation in der Zwischenzeit nicht geändert hat. Wenn sich z. B. die Hindernisse ändern, müssen Sie den Weg möglicherweise neu berechnen. Auch hier ist zu beachten, dass diese Funktionen fehlschlagen können und kein Weg für die Instanz gefunden werden kann.</p>
  <ul class="colour">
    <li><a href="mp_linear_step.htm"><span class="notranslate">mp_linear_step</span></a></li>
    <li><a href="mp_linear_step_object.htm"><span class="notranslate">mp_linear_step_object</span></a></li>
    <li><a href="mp_linear_path.htm"><span class="notranslate">mp_linear_path</span></a></li>
    <li><a href="mp_linear_path_object.htm"><span class="notranslate">mp_linear_path_object</span></a></li>
  </ul>
  <p> </p>
  <h2><label for="three">Mögliche Funktionen</label></h2>
  <p>Dies sind die grundlegenden Ausweichfunktionen, die sich gut für einfache KI eignen. Sie bewirken, dass eine Instanz einen Schritt in Richtung einer bestimmten Zielposition macht und dabei versucht, möglichst geradeaus zu gehen, aber auch eine andere Richtung einzuschlagen, wenn dies erforderlich ist. Diese Funktionen sollten im <b>Step Event</b> einer Instanz verwendet werden.</p>
  <ul class="colour">
    <li><a href="mp_potential_settings.htm"><span class="notranslate">mp_potential_settings</span></a></li>
    <li><a href="mp_potential_step.htm"><span class="notranslate">mp_potential_step</span></a></li>
    <li><a href="mp_potential_step_object.htm"><span class="notranslate">mp_potential_step_object</span></a></li>
    <li><a href="mp_potential_path.htm"><span class="notranslate">mp_potential_path</span></a></li>
    <li><a href="mp_potential_path_object.htm"><span class="notranslate">mp_potential_path_object</span></a></li>
  </ul>
  <p> </p>
  <h2><label for="two">Rasterfunktionen</label></h2>
  <p>Die letzte Art von Funktion verwendet einen viel komplexeren Mechanismus, der auf einem gitterbasierten Ansatz beruht (manchmal auch A*-Algorithmus genannt). Er ist viel erfolgreicher bei der Suche nach Pfaden (obwohl er immer noch scheitern kann) und findet die kürzesten möglichen Pfade, aber er erfordert mehr Arbeit bei der Einrichtung.</p>
  <p>Die Grundidee ist folgende: Zunächst wird ein Raster erstellt, das den Raum (oder den relevanten Teil davon) abdeckt. Sie können ein feines Gitter verwenden, das langsamer ist, oder ein grobes Gitter, aber beide sollten auf der Auflösung des Raums basieren, damit die Pfadfindung so genau wie möglich ist. Wenn Sie beispielsweise einen Raum mit einer Größe von 400x200 Pixeln haben, können Sie ein Raster mit einer Auflösung von 40, 20 oder 10 Pixeln verwenden... es hängt alles davon ab, wie genau der Pfad sein muss und wie viel Verarbeitung Sie <span class="notranslate">GameMaker</span> zum Erzeugen des Pfades zumuten wollen.</p>
  <p>Als Nächstes müssen wir für alle relevanten Objekte, die wir vermeiden wollen, die Gitterzellen bestimmen, die sie überlappen (entweder auf der Grundlage ihrer Begrenzungsrahmen oder ihrer genauen <span class="notranslate">sprite</span>) und diese Zellen als verboten markieren. So wird eine Zelle als vollständig verboten markiert, auch wenn sich ein Hindernis nur teilweise überlappt.</p>
  <p>Schließlich geben wir eine Startposition und eine Zielposition an, die beide in freien Zellen liegen <i>müssen</i>, und die Funktion berechnet dann den kürzest möglichen Weg zwischen diesen beiden Positionen. Der Pfad verläuft zwischen den Zentren aller freien Zellen. Wenn die Zellen groß genug sind, so dass die in ihrem Zentrum platzierte Instanz vollständig darin liegt, ist dies erfolgreich. Dieser Pfad wird dann der Instanz zugewiesen, damit sie ihm mit Hilfe der <a href="../../Asset_Management/Paths/Paths.htm"><span class="inline">path_*</span></a> Funktionen. Die Zellen müssen groß genug sein, damit das sich bewegende Objekt, das seinen Ursprung in der Mitte einer Zelle hat, <i>vollständig</i> innerhalb der Zelle liegen kann. (Achten Sie auf die Position des Ursprungs des Objekts. Denken Sie auch daran, dass Sie den Pfad verschieben können, wenn der Ursprung des Objekts nicht in der Mitte liegt!) Andererseits gilt: Je kleiner die Zellen sind, desto mehr mögliche Pfade gibt es. Wenn Sie die Zellen zu groß machen, können die Öffnungen zwischen den Hindernissen geschlossen werden, weil alle Zellen ein Hindernis kreuzen.</p>
  <ul class="colour">
    <li><a href="mp_grid_create.htm"><span class="notranslate">mp_grid_create</span></a></li>
    <li><a href="mp_grid_destroy.htm"><span class="notranslate">mp_grid_destroy</span></a></li>
    <li><a href="mp_grid_path.htm"><span class="notranslate">mp_grid_path</span></a></li>
    <li><a href="mp_grid_add_cell.htm"><span class="notranslate">mp_grid_add_cell</span></a></li>
    <li><a href="mp_grid_add_instances.htm"><span class="notranslate">mp_grid_add_instances</span></a></li>
    <li><a href="mp_grid_add_rectangle.htm"><span class="notranslate">mp_grid_add_rectangle</span></a></li>
    <li><a href="mp_grid_get_cell.htm"><span class="notranslate">mp_grid_get_cell</span></a></li>
    <li><a href="mp_grid_clear_all.htm"><span class="notranslate">mp_grid_clear_all</span></a></li>
    <li><a href="mp_grid_clear_cell.htm"><span class="notranslate">mp_grid_clear_cell</span></a></li>
    <li><a href="mp_grid_clear_rectangle.htm"><span class="notranslate">mp_grid_clear_rectangle</span></a></li>
    <li><a href="mp_grid_to_ds_grid.htm"><span class="notranslate">mp_grid_to_ds_grid</span></a></li>
    <li><a href="mp_grid_draw.htm"><span class="notranslate">mp_grid_draw</span></a></li>
  </ul>
  <p> </p>
  <p>Der gitterbasierte Ansatz ist sehr leistungsfähig (und wird in vielen professionellen Spielen verwendet), aber er erfordert eine sorgfältige Überlegung, da Sie bestimmen müssen, welche Fläche und welche Zellengröße für die Lösung des Spiels ausreichen. Außerdem müssen Sie festlegen, welche Objekte vermieden werden müssen und ob eine genaue Kontrolle wichtig ist. All diese Parameter haben einen großen Einfluss auf die Effizienz des Ansatzes. Sie müssen auch entscheiden, ob dies wirklich notwendig ist, da vielleicht eine der weniger kostspieligen <span class="inline">mp_*</span> Funktionen die Aufgabe genauso gut erledigen kann.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Movement_And_Collisions.htm">Bewegung und Kollisionen</a></div>
        <div style="float:right">Nächste: <a href="../Collisions/Collisions.htm">Kollisionen</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Motion Planning
MP Functions
Motion Planning Functions
-->
  <!-- TAGS
mp_functions
-->
</body>
</html>