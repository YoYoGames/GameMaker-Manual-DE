<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Was ist Programmieren?</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker." />
  <meta name="rh-index-keywords" content="Quick Start - What Is Programming?" />
  <meta name="search-keywords" content="programming" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Was ist Programmieren?</h1>
  <p>Im <a href="Quick_Start_Guide.htm">vorigen Abschnitt</a> haben wir beschrieben, wie <span data-keyref="GameMaker Name">GameMaker</span> funktioniert, um Ihr Spiel zu erstellen, aber unabhängig von den <span class="notranslate">sprites</span>, Objekten oder Räumen, die Sie hinzugefügt haben, wird nichts passieren, wenn Sie nicht <strong>programmiert </strong>haben, dass es passiert. Aber was ist ein Programm?</p>
  <p>Im allgemeinen Sinne ist ein Programm einfach ein Satz von Anweisungen (oder <strong> <a class="glossterm" data-glossterm="Anweisung" href="#">Anweisung</a></strong><span class="glossextra">s</span>), die Sie dem Computer geben, um ihn zu veranlassen, bestimmte Aufgaben auszuführen. Diese Aufgaben können sehr unterschiedlich sein, von der einfachen Anweisung an den Computer, etwas auf den Bildschirm zu zeichnen, bis hin zur Berechnung eines Wertes auf der Grundlage einer Benutzereingabe und der anschließenden Reaktion darauf, aber in allen Fällen handelt es sich um eine logische Struktur, die zu einem bestimmten Ergebnis führt. Auf der vorigen Seite haben wir über das Verschieben einer Instanz eines Objekts um 2 Pixel nach rechts gesprochen, also lassen Sie uns einen Blick auf das eigentliche Programm werfen, das dies tun würde:</p>
  <p>In <span data-keyref="GML_Visual">GML Visual</span> würde das folgendermaßen aussehen:</p>
  <p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
  <p>Unter Verwendung von <span data-keyref="GML_Code">GML-Code</span> würde es wie folgt aussehen:</p>
  <p class="code">x = x + 2;</p>
  <p>Um zu verstehen, was hier vor sich geht, müssen wir zunächst über <strong>Variablen</strong> sprechen, dann über <strong>Funktionen </strong>und schließlich über <strong>Konditionale </strong>, da diese drei Dinge im Allgemeinen den Großteil eines jeden Programms ausmachen.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">Variablen</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">Variablen sind neben den <strong>Funktionen </strong>(auf die wir gleich noch eingehen werden) der Grundstein der Programmierung. Eine Variable ist einfach ein <em>benannter Wert</em>, und im obigen Fall heißt die Variable &quot;<span class="inline">x</span>&quot;. Nun, &quot;<span class="inline">x</span>&quot; kann ein beliebiger Wert sein, wie -126 oder 583 oder sogar 1,56378, aber der tatsächliche Wert von &quot;<span class="inline">x</span>&quot; ist irrelevant, da er variieren kann (daher der Name &quot;Variable&quot;). Wichtig ist, dass wir &quot;<span class="inline">x</span>&quot; nehmen und 2 dazu addieren. Es ist erwähnenswert, dass in diesem Fall &quot;<span class="inline">x</span>&quot; eine <strong>eingebaute Variable</strong> ist, was bedeutet, dass es eine Variable ist, die von <span data-keyref="GameMaker Name">GameMaker</span> für alle Objekte erstellt wird, aber du kannst auch deine eigenen Variablen erstellen.</p>
    <p class="dropspot">Um eine Variable zu erstellen, muss sie <strong>deklariert </strong>werden, bevor sie verwendet werden kann. Durch das Deklarieren einer Variablen wird <span data-keyref="GameMaker Name">GameMaker</span> mitgeteilt, dass diese neue Variable existiert und einen Anfangswert hat. Um eine Variable zu deklarieren, machst du einfach etwas wie das Folgende:</p>
    <p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p>
    <p class="dropspot">oder:</p>
    <p class="code">points = 0;</p>
    <p class="dropspot">Sobald eine Variable deklariert wurde, kann sie in weiteren programmierten <span class="notranslate">code</span> oder Aktionen verwendet werden. Das Tolle an Variablen ist, dass man einen Wert an mehreren Stellen &quot;wiederverwenden&quot; kann, ohne sich Gedanken darüber machen zu müssen, was der Wert eigentlich ist. Nehmen wir an, du hast eine Variable &quot;<span class="inline">damage</span>&quot; und verwendest sie an verschiedenen Stellen, um <span data-keyref="GameMaker Name">GameMaker</span> anzuweisen, anderen Objekten im Spiel eine bestimmte Menge an Schaden zuzufügen. Wir können &quot;<span class="inline">damage</span>&quot; als 20 deklarieren, aber später entscheiden, dass dies ein zu großer Wert ist und ihn auf 10 ändern wollen. Hätten wir den Wert 20 statt einer Variablen verwendet, müssten wir alle unsere <span class="notranslate">code</span> oder Aktionen durchgehen und 20 in 10 ändern, was zeitaufwändig und fehleranfällig ist. Die Verwendung einer Variablen bedeutet jedoch, dass wir den Wert nur <em>einmal </em>bei der Deklaration in 10 ändern müssen, und der Rest der <span class="notranslate">code</span> oder Aktionen wird diesen neuen Wert verwenden.</p>
    <p class="dropspot">Es ist erwähnenswert, dass es viele verschiedene Arten von Variablen gibt, und jede hat leicht unterschiedliche Möglichkeiten, wie sie verwendet werden kann. Wir werden hier nicht darauf eingehen, aber Sie können weitere Informationen im Abschnitt <a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">GameMaker Language Overview</a> des Handbuchs finden.</p>
    <p class="dropspot">Variablen sind jedoch nur der erste Teil der Geschichte. Der nächste Teil ist die Verwendung von Funktionen...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">Funktionen</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">Der nächste wichtige Teil der Programmierung ist die Verwendung von <strong>Funktionen </strong>zusammen mit Variablen. Eine Funktion ist einfach eine Anweisung an den Computer, etwas zu tun, und sie kann sowohl Eingabewerte als auch Ausgabewerte haben (d. h. man kann ihr einen Wert geben, und sie führt eine Operation durch und gibt dann einen anderen Wert zurück), obwohl nicht alle Funktionen eine Eingabe erfordern und auch keine Ausgabe haben. Um dies besser zu verstehen, schauen wir uns eine eingebaute Funktion in <span data-keyref="GameMaker Name">GameMaker</span> an.</p>
    <p class="dropspot">Die Funktion, die wir uns ansehen werden, ist <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>die in <span class="notranslate">GML</span> Visual die Aktion " <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">Get Instance Count"</a> ist. Mit dieser Funktion/Aktion wird die Anzahl der Instanzen eines bestimmten Objekts im Spielraum abgerufen, und Sie würden sie wie folgt verwenden:</p>
    <p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p>
    <p class="dropspot">oder:</p>
    <p class="code">number = instance_number(obj_Enemy);</p>
    <p class="dropspot">In beiden obigen Beispielen nimmt die Funktion eine Objekt-ID als Eingabewert (den <strong> <a class="glossterm" data-glossterm="Argument" href="#">Argument</a></strong> oder <strong>Parameter</strong>) und gibt einen Ausgabewert (den <strong>Rückgabewert </strong>), der die Anzahl der Instanzen des gegebenen Objekts angibt, die zum Zeitpunkt des Aufrufs der Funktion/Aktion im Raum vorhanden waren. Beachte, dass wir eine Variable verwenden, um den zurückgegebenen Wert zu speichern, die Variable &quot;<span class="inline">number</span>&quot;. Diese Variable kann deklariert werden, bevor diese <span class="notranslate">code</span> ausgeführt wird, oder sie wird als deklariert betrachtet, wenn die <span class="notranslate">code</span> ausgeführt wird und der Rückgabewert der Funktion/Aktion ihr zugewiesen wird.</p>
    <p class="dropspot">Es ist erwähnenswert, dass Sie nicht nur auf die Verwendung der eingebauten Aktionen von <span class="notranslate">GameMaker Language</span> oder <span class="notranslate">GML</span> Visual beschränkt sind, sondern dass Sie Ihre eigenen Funktionen erstellen können, um die Möglichkeiten der Programmierung zu erweitern (mehr darüber erfahren Sie <a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">hier</a> für <span class="notranslate">GML</span> und <a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">hier</a> für <span class="notranslate">GML</span> Visual).</p>
    <p class="dropspot">Mit Funktionen und Variablen kann man eine Menge anstellen, aber ohne den letzten wichtigen Teil der Programmiergeschichte, die <strong>Konditionale</strong>, wären sie ziemlich nutzlos...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">Konditionale</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Ein großer Teil der Programmierung besteht darin, Fragen zu stellen. Bei diesen Fragen handelt es sich im Allgemeinen um einfache Fragen, die entweder als wahr oder falsch bewertet werden können und als <strong>Konditionale </strong> bezeichnet werden (und die Werte von <span class="inline">true </span>und <span class="inline">false </span>werden als <strong>boolesche </strong>Werte bezeichnet). Die gebräuchlichste und am weitesten verbreitete Bedingung ist die Frage &quot;<span class="inline">if</span>&quot;, mit der geprüft wird, ob etwas <span class="inline">true </span>oder <span class="inline">false </span>ist, und dann entsprechend gehandelt wird. Ein einfaches Beispiel wäre das Entfernen eines Charakters aus dem Spiel, wenn seine Gesundheit unter Null sinkt, was in einfacher Sprache wie folgt ausgedrückt werden würde:</p>
    <p class="code">if the character variable &quot;hp&quot; is less than or equal to zero, then destroy it.</p>
    <p class="dropspot">Um die obigen Angaben in <span class="notranslate">code</span> umzuwandeln, müssten wir dies tun:</p>
    <p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p>
    <p class="dropspot">oder:</p>
    <p class="code">if (hp &lt;= 0)<br />
      {<br />
      <br />
          instance_destroy();<br />
      <br />
      }
    </p>
    <p class="dropspot">Oben stellen wir also die Frage, ob die Variable hp kleiner oder gleich 0 ist, und wenn dies der Fall ist, rufen wir die Funktion <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a> oder die Aktion <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Objektinstanz zerstören</a> auf. Beachten Sie, dass das &quot;<span class="inline">then</span>&quot; (wenn etwas... dann etwas...) <em>implizit </em>ist und Sie es nicht hinzufügen müssen, und beachten Sie auch, dass wir in <span class="notranslate">GML</span> <span class="notranslate">code</span> die geschweiften Klammern <span class="inline">{} </span>verwenden, um die <span class="notranslate">code</span> zu &quot;blockieren&quot;, die ausgeführt werden soll, wenn die &quot; <span class="inline">if</span>&quot; zu <span class="inline">true </span> ausgewertet wird (in <span class="notranslate">GML</span> Visual wird dies durch das Fallenlassen der Aktionen <em>rechts </em>von der &quot;<span class="inline">If</span>&quot; Aktion symbolisiert). Alles, was zwischen den geschweiften Klammern eingefügt wird, wird nur ausgeführt, wenn &quot; <span class="inline">if</span>&quot; zu <span class="inline">true</span> ausgewertet wird, so dass Sie mehr als eine Anweisung in einem einzigen &quot;Block&quot; ausführen lassen können.</p>
    <p class="dropspot">Bei der Verwendung der Bedingung &quot;<span class="inline">if</span>&quot; ist noch zu beachten, dass wir auch eine Anweisung &quot;<span class="inline">else</span>&quot; hinzufügen können, so dass die Bedingung dann zu &quot;wenn etwas <span class="inline">true </span>ergibt, dann tu etwas, <em>sonst </em>tu etwas anderes&quot; wird. Auf diese Weise können wir mit einem bedingten Ausdruck umgehen, der <span class="inline">true </span> <em>oder </em> <span class="inline">false</span> zurückgibt. Lassen Sie uns auch dafür ein Beispiel geben:</p>
    <p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p>
    <p class="dropspot">oder:</p>
    <p class="code">if (countdown &lt;= 0)<br />
      {<br />
      <br />
          instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br />
      <br />
          countdown = 30;<br />
      <br />
      }<br />
      else<br />
      {<br />
      <br />
          countdown = countdown - 1;<br />
      <br />
      }
    </p>
    <p class="dropspot">Die obige Website <span class="notranslate">code</span> bedeutet im Klartext::</p>
    <p class="code">if the countdown variable is less than or equal to zero then:<br />
      <br />
          create an instance of the object &quot;obj_Bullet&quot; at the current x/y position on the layer &quot;instances&quot;,<br />
      <br />
          reset the countdown variable to 30.<br />
      <br />
      else:<br />
      <br />
          subtract one from the countdown variable.
    </p>
    <p class="dropspot">Kümmern Sie sich nicht zu sehr um den eigentlichen Teil der Instanzerstellung der obigen <span class="notranslate">code</span>, da wir das in den folgenden Abschnitten ausführlicher behandeln werden. Wichtig ist hier, dass Sie bedingte Ausdrücke erstellen können, die prüfen, ob etwas <span class="inline">true </span>oder <span class="inline">false </span>ist, und Ihr Programm auf unterschiedliche Weise reagieren lassen. Das mag sehr einfach erscheinen, ist aber in Wirklichkeit unglaublich mächtig und wird die Grundlage für fast alles bilden, was Sie beim Programmieren in <span data-keyref="GameMaker Name">GameMaker</span> tun.</p>
  </div>
  <p> </p>
  <p>Um unsere Frage &quot;Was ist Programmieren?&quot; zu beantworten, können wir also sagen, dass <strong>Programmieren </strong>eine Kombination von <strong>Anweisungen </strong> ist <strong>, </strong> die mit <strong> <a class="glossterm" data-glossterm="variabel" href="#">Variable</a></strong> <span class="glossextra">s</span><strong> </strong>zu bilden <strong> <a class="glossterm" data-glossterm="Ausdruck" href="#">Ausdruck</a></strong><span class="glossextra">s</span>, <strong>Funktionen </strong>, um Aufgaben auszuführen, und <strong><a class="glossterm" data-glossterm="Bedingt" href="#">bedingte</a></strong> <span class="glossextra">s</span>, um Fragen zu stellen - und diese Anweisungen dann gleichzeitig auszuführen, um ein Ziel zu erreichen. Unten sehen Sie ein etwas komplexeres Programm in <span class="notranslate">GML</span> Visual und <span class="notranslate">GML</span>. Können Sie erraten, was es tut?</p>
  <p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p>
  <p>oder:</p>
  <p class="code">if mouse_check_button_pressed(mb_left) == true<br />
    {<br />
    <br />
        x = mouse_x<br />
    <br />
        y = mouse_y<br />
    <br />
        image_blend = c_red;<br />
    <br />
    }<br />
    else<br />
    {<br />
    <br />
        if (mouse_check_button_released(mb_left) == true)<br />
        {<br />
    <br />
            image_blend = c_white;<br />
    <br />
        }<br />
    <br />
    }
  </p>
  <p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">Spoiler</a><span class="expandtext" data-targetname="expanding">Die obige <span class="notranslate">code</span> prüft zunächst, ob eine Maustaste gedrückt wird (die <strong>linke </strong>Maustaste, die durch die Konstante &quot; <span class="inline">mb_left</span>&quot; definiert ist),
      und wenn sie gedrückt wurde, wird die Instanz, auf der <span class="notranslate">code</span> läuft, an die aktuelle Mausposition verschoben (definiert durch die eingebauten Variablen &quot; <span class="inline">mouse_x</span>&quot; und &quot; <span class="inline">mouse_y</span>&quot;) und
      setzt außerdem die Farbe der Instanzüberblendung auf <strong>Rot</strong>. Wenn die Maustaste nicht gedrückt wurde, prüft es, ob die Maustaste <strong>losgelassen</strong> wurde, und wenn ja, setzt es die Farbe der Instanzüberblendung auf weiß zurück (beachte, dass
      wir wieder einige eingebaute <strong>Konstanten </strong> verwenden <strong>- </strong>&quot; <span class="inline">c_red</span>&quot; und &quot; <span class="inline">c_white</span>&quot; - um die Farben einfach zu definieren).</span></p>
  <p> </p>
  <p>Wir hoffen, dass Sie nun eine Vorstellung davon haben, worum es beim Programmieren geht. Lassen Sie uns nun die <a class="glossterm" data-glossterm="IDE" href="#">GameMaker-IDE</a> erkunden und sehen, wie Sie Assets wie <em>Sprites </em>und <em>Objekte </em>sowie andere wichtige Ressourcen, die Ihr Spiel benötigt, hinzufügen.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Content.htm">Index</a></div>
        <div style="float:right">Nächste: <a href="Creating_Sprites.htm">Sprites erstellen</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>