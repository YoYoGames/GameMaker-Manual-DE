<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shader</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Der Shader-Editor</h1>
  <p><img>Shader sind ein sehr leistungsfähiges Werkzeug, mit dem die Grafiken, die Ihr Spiel auf den Bildschirm rendert, manipuliert werden können. Sie ermöglichen unglaublich schnelle Effekte, die z. B. vom Hinzufügen eines subtilen Farbtons zu einer <span class="notranslate">sprite</span> bis hin zu Verzerrungseffekten auf dem gesamten Bildschirm reichen können. Aber was ist ein Shader?</p>
  <p>Ein Shader ist im Grunde ein zweiteiliges Programm, das direkt auf der Grafikkarte ausgeführt wird und sehr schnell ist, da der Grafikprozessor die gesamte Arbeit erledigt und CPU-Zyklen für das Spiel freigibt <span class="notranslate">code</span>. Der vollständige Shader besteht aus einem Vertex-Shader-Programm und einem Fragment-Shader-Programm (auch bekannt als Pixel-Shader). Diese beiden kleinen Programme arbeiten zusammen, um das, was die Grafikkarte auf den Bildschirm rendert, zu manipulieren. Dadurch können Sie die Position, die Farbe und die Alphawerte, die tatsächlich auf den <a class="glossterm" data-glossterm="Display-Puffer" href="#">Anzeigepuffer</a> <a class="glossterm" data-glossterm="gerendert" href="#">gerendert</a> werden, in Echtzeit manipulieren.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Vertex-Shader</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Der Vertex-Shader ist die programmierbare Shader-Stufe in der Rendering-Pipeline, die die Verarbeitung einzelner Scheitelpunkte (die Punkte der Dreiecke, die zum Rendern eines Bildes verwendet werden) übernimmt. Wenn Sie eine Geometrie rendern - wie eine <span class="notranslate">sprite</span> oder eine Oberfläche
      - <span data-keyref="GameMaker Name">GameMaker</span> erstellt einen Strom von Scheitelpunkten - <strong>Vertex Buffer </strong> genannt <strong>- </strong>, der die Geometrie dieser Dreiecke definiert. Eine <span class="notranslate">sprite</span> zum Beispiel hat eine Geometrie aus zwei Dreiecken (normalerweise <em>Polygone</em> genannt), die gerendert werden
      gerendert, um ein &quot;Quad&quot; zu bilden. Dieser Scheitelpunktstrom von der Vertex <span class="notranslate">Buffer</span> wird als Eingabe an den Vertex Shader weitergeleitet, der die Scheitelpunktdaten auf programmierbare Weise verarbeiten kann. Die Ausgabe des Vertex-Shaders wird von der GPU verwendet, um Dreiecke zusammenzusetzen,
      Die Dreiecke werden dann ordnungsgemäß beschnitten und an den View Port und die View Camera angepasst und dann an den Rasterizer-Block der GPU weitergeleitet, der einen neuen Ausgabestrom erzeugt, der aus so genannten <strong>Fragmenten</strong> besteht. Dies sind winzige Daten
      Strukturen, von denen sich jede auf ein einzelnes Pixel bezieht, das auf dem Bildschirm erscheint.</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Fragment-Shader</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Der Fragment-Shader ist die programmierbare Shader-Stufe in der Rendering-Pipeline, die sich mit &quot;Fragmenten&quot; befasst - den interpolierten Pixeln, die zur Texturierung eines bestimmten Polygons verwendet werden - und die für die Ausgabe der endgültigen Pixelfarbe jedes
      gerenderten Dreieckspixels. Der Fragment-Shader erhält als Eingabe alle Fragmente (die einzelnen Pixel des gerenderten Dreiecks), die vom Vertex-Shader durch die Pipeline geleitet wurden. Er kann dann
      diese Fragmente verarbeiten, um die Farbe und das Alpha des endgültigen Zielpixels zu ändern, das auf den Bildschirm gezeichnet wird.</p>
  </div>
  <p> </p>
  <p>Ein vollständiger Überblick darüber, wie Shader wirklich funktionieren und welchen Platz sie in der Grafikpipeline einnehmen, würde den Rahmen dieses Artikels sprengen, aber Sie können hier einen kurzen Leitfaden finden:</p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">Anleitung zur Verwendung von Shadern</a></li>
  </ul>
  <p> </p>
  <h2>Sprachliche Unterstützung</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> unterstützt die folgenden Shader-Sprachen:</p>
  <table>
    <tbody>
      <tr>
        <th>Shader-Sprache</th>
        <th>Ziel-Plattform</th>
      </tr>
      <tr>
        <td><strong>GLSL ES 1.0</strong></td>
        <td>Alle Zielplattformen</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac und <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td>Windows, UWP, Xbox One &amp; Serie S/X</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td>PlayStation 4 &amp; 5</td>
      </tr>
    </tbody>
  </table>
  <p>Beim Schreiben von GLSL ES-Shadern wird empfohlen, sich so genau wie möglich an die <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf" title="GLSL ES 1.0 Specification">offizielle Sprachspezifikation</a> zu halten, um Fehler zu vermeiden, da einige Zielplattformen strenger sein können als andere (z. B. die Zielplattformen HTML5 und Opera GX, die restriktiver sein können als andere <span class="notranslate">platforms</span> wie <span class="notranslate">Windows</span>, <span class="notranslate">macOS</span>, usw., wenn es um Sprachbeschränkungen geht).</p>
  <p> </p>
  <h2>Einen Shader erstellen</h2>
  <p>Um eine Shader-Ressource zu erstellen, klicken Sie einfach mit der rechten Maustaste auf <img> im <a href="../Introduction/The_Asset_Browser.htm">Asset-Browser</a> und wählen Sie <em>Erstellen -&gt; Shader</em>. Sobald Sie den Basis-Shader erstellt haben, können Sie über das rechte Mausmenü <img> der neuen Ressource den Shader-Typ auswählen, bevor Sie den Code weiter bearbeiten:</p>
  <p><img>Der <span class="notranslate">code</span> Editor selbst ist in zwei &quot;Programme&quot; aufgeteilt - Vertex und Fragment - wenn Sie einen neuen Shader erstellen, wobei jedes Programm über die Registerkarten am oberen Rand des Editors verfügbar ist. Beide werden auf einmal erstellt, da Sie <em>keinen Shader ohne beide Teile erstellen können</em>. Selbst wenn Sie nur den Fragment-Shader verwenden möchten, müssen Sie zuerst einen &quot;Pass-Through&quot;-Vertex-Shader erstellen, weshalb jeder neu erstellte Shader standardmäßig einen Vertex- und einen Fragment-Pass-Through-Shader enthält, die bereits für Sie kodiert sind (auf dem Screenshot oben auf der Seite können Sie sehen, dass wir die Ansicht des <span class="notranslate">code</span> -Editors verwendet haben, um die beiden nebeneinander anzuzeigen... nützlich, wenn Sie an beiden Shader-Programmen zusammen arbeiten).</p>
  <p>Es ist erwähnenswert, dass Sie GLSL ES-Shader auf <em>allen </em>Zielen verwenden können <span class="notranslate">platforms</span>, aber damit sie auf dem <strong>HTML5-Ziel </strong> <span class="notranslate">platform</span> funktionieren, müssen Sie WebGL in den <a href="../Settings/Game_Options/HTML5.htm">HTML5-Spieloptionen</a> aktiviert haben, sonst funktionieren sie nicht.</p>
  <p>Weitere Details zu den Shader-Funktionen und wie sie im <span data-keyref="GameMaker Name">GameMaker</span> eingesetzt werden können, finden Sie auf den folgenden Seiten:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">Shader-Funktionen</a> - Der <span class="notranslate">GML</span> Referenzabschnitt für Shader.</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Shader-Konstanten</a> - Die in <span data-keyref="GameMaker Name">GameMaker</span> eingebauten Konstanten, die beim Schreiben von Shadern verwendet werden können.</li>
    <li><a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf">GLSL ES 1.0 Spezifikationen</a> - PDF-Datei für die OpenGL ES 1.0 Shader-Sprache, die <span data-keyref="GameMaker Name">GameMaker</span> verwendet.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">HLSL Language Reference</a> - Die Microsoft-Referenzseiten zur Verwendung von HLSL.</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">PSSL Language Presentation</a> - Überblick über die PSSL-Sprache im Präsentationsformat.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="The_Asset_Editors.htm">Die Asset-Redaktion</a></div>
        <div style="float:right">Nächste: <a href="Sounds.htm">Klänge</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
The Shader Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->
</body>
</html>