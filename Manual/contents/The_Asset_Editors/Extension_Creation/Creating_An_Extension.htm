<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Eine Erweiterung erstellen</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Eine Erweiterung erstellen</h1>
  <p>Um eine Erweiterung zu erstellen, müssen Sie zunächst mit der rechten Maustaste auf <img> im <a href="../../Introduction/The_Asset_Browser.htm">Asset-Browser</a> klicken und <strong>Erstellen -&gt; Erweiterung</strong> wählen. Dadurch werden die Erweiterungseigenschaften für Ihr neu erstelltes Asset im Arbeitsbereich geöffnet:</p>
  <p><img>Wenn dies nicht der Fall ist, können Sie im Asset-Browser auf Ihr Erweiterungs-Asset doppelklicken, um sein Eigenschaftsfenster zu öffnen oder den Fokus darauf zu richten, wenn es bereits geöffnet ist.</p>
  <p>Jetzt können Sie die erforderlichen Dateien und Funktionen hinzufügen und der Erweiterung einen Namen geben (nach der üblichen Konvention, die nur Buchstaben/Zahlen und keine Sonderzeichen außer dem Unterstrich &quot;_&quot; vorsieht). Wenn Sie möchten, können Sie auch die Versionsnummer für die Erweiterung festlegen.</p>
  <p>Unter &quot;Kopien nach&quot; können Sie die <span class="notranslate">platforms</span> auswählen, in die diese Erweiterung exportiert werden soll. Bei einer einfachen <span class="notranslate">GML</span> -Erweiterung brauchen Sie sich darüber keine Gedanken zu machen, da sie auf allen <span class="notranslate">platforms</span> läuft. Wenn Sie jedoch eine plattformspezifische Erweiterung erstellen (z. B. für <span class="notranslate">Android</span>), müssen Sie sicherstellen, dass sie <em>nicht</em> auf nicht kompatible <span class="notranslate">platforms</span> (wie <span class="notranslate">iOS</span>, Konsolen usw.) exportiert wird.</p>
  <h2>Platzhalter-Dateien</h2>
  <p>Um der neuen Erweiterung eine Datei hinzuzufügen, klicken Sie auf das Menüsymbol <img> und wählen Sie entweder eine Platzhalterdatei (&quot;Platzhalter hinzufügen&quot;) oder importieren Sie die eigentliche Datei, die für das Ziel <span class="notranslate">platform</span> benötigt wird (&quot;Datei hinzufügen&quot;):</p>
  <p class="dropspot"><img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /></p>
  <p>Ein &quot;generischer&quot; Platzhalter ist eine Datei, die von beliebigem Typ sein kann, mit Ausnahme derjenigen, die von der spezifischen <span class="notranslate">platforms</span> benötigt werden (also z. B. keine <span class="inline">DLL</span> oder <span class="inline">SO </span>Dateien), und die nur als &quot;Linker&quot;-Datei verwendet wird, um einen Satz von Funktionen oder Konstanten mit der gegebenen Erweiterung zu verbinden (im Allgemeinen ist sie nur für die Verwendung mit <span class="notranslate">iOS</span> und <span class="notranslate">Android</span> Erweiterungen gedacht, was in den folgenden Abschnitten für diese Ziele erklärt wird). Sie können auch &quot;GML&quot;- und &quot;JS&quot;-Platzhalterdateien für eine spezifischere Verwendung hinzufügen.</p>
  <h2>Hinzufügen von Dateien</h2>
  <p>Normalerweise brauchen Sie keine Platzhalter zu verwenden, es sei denn, Sie bauen für <span class="notranslate">iOS</span> und <span class="notranslate">Android</span>. Daher wählen Sie die Option &quot;Datei hinzufügen&quot;, um eine der folgenden Dateien hinzuzufügen, je nachdem, für welches Ziel <span class="notranslate">platform</span> sie bestimmt ist:</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>: Dies ist eine Datei, die nur mit dem <span class="notranslate">GameMaker Language</span> erstellt wurde und mit allen <span class="notranslate">platforms</span> kompatibel ist.</li>
    <li class="dropspot"><span class="inline">.js</span>: Dies ist ein JavaScript-Erweiterungsformat und ist nur mit dem HTML5-Ziel kompatibel.</li>
    <li class="dropspot"><span class="inline">.dll</span>: Dies ist ein Dynamic-Link-Library-Erweiterungsformat und ist nur mit den Zielen <span class="notranslate">Windows</span>, UWP und Xbox kompatibel (jedes Ziel benötigt eine andere <span class="inline">*.dll</span> Datei, die mit seinen Spezifikationen kompatibel ist).</li>
    <li class="dropspot"><span class="inline">.dylib</span>: Dies ist das Mac-Äquivalent einer DLL und ist nur mit Mac target kompatibel (nicht <span class="notranslate">iOS</span>).</li>
    <li class="dropspot"><span class="inline">.so</span>: Dies ist das <span class="notranslate">Linux</span> Äquivalent einer DLL und ist nur mit dem <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>) Ziel kompatibel.</li>
    <li class="dropspot"><span class="inline">.prx</span>: Dies ist ein Dateiformat zum Hinzufügen von Funktionen zum PlayStation-Ziel (jedes Ziel benötigt eine andere <span class="inline">*.prx</span> Datei, die mit seinen Spezifikationen kompatibel ist).</li>
  </ul>
  <p>Sie werden feststellen, dass es keinen Dateityp für <strong>Android </strong>oder <strong>iOS</strong> gibt, weil deren Einrichtung etwas anders ist. Weiter unten finden Sie Erklärungen zur Einrichtung, aber zunächst wollen wir uns die Erstellung einer allgemeinen <span class="notranslate">GML</span> -Erweiterung für eines der Ziele <span class="notranslate">platforms</span> ansehen, da der Prozess für alle gleich ist.</p>
  <h2>Erstellen einer <span class="notranslate">GML</span> Erweiterung</h2>
  <p>Zunächst müssen Sie die Datei erstellen, die verwendet werden soll. Bei der Erweiterung <span class="notranslate">GML</span> wäre dies eine Textdatei (gespeichert mit der Erweiterung <span class="inline">.gml</span> ), die etwa so formatiert wäre:</p>
  <p class="code">#define c_alice_blue<br />
    return make_color_rgb(240,248,255);<br />
    <br />
    <br />
    #define instance_create_colour<br />
    var i = instance_create_layer(argument0, argument1, argument2, argument3);<br />
    with (i)<br />
    {<br />
        image_blend = argument3;<br />
    }<br />
    return i;
  </p>
  <p>Wie Sie sehen können, beginnen wir jeden Abschnitt mit einem <span class="inline">#define</span> -Aufruf, der im obigen Beispiel zur Definition von zwei Funktionen verwendet wird. Schauen wir uns nun die einzelnen Teile einer definierten Funktion an:</p>
  <ul class="colour">
    <li>Die Anweisung <span class="inline">#define</span> wird verwendet, um eine neue Funktion mit dem angegebenen Namen zu definieren;</li>
    <li>Auf diese Anweisung folgt die Funktion <span class="notranslate">code</span>, die die Variablen <span class="inline">argument0</span>, <span class="inline">argument1</span> usw. verwendet, um auf die <span class="notranslate">arguments</span> zuzugreifen, die beim Aufruf der Funktion übergeben wird;</li>
    <li>Am Ende haben wir eine <a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm"><span class="notranslate">return</span></a> Anweisung, die verwendet wird, um Daten aus der Erweiterung an die <span class="notranslate">GML</span> <span class="notranslate">code</span> zurückzugeben, wo die Funktion aufgerufen wurde.</li>
  </ul>
  <p>Wenn Sie eine <span class="inline">DLL</span> oder JavaScript-Erweiterung schreiben würden, wäre der Prozess ähnlich, aber in der richtigen Sprache für das Dateiformat der Erweiterung.</p>
  <p>Wenn Sie das getan haben, müssen Sie die Datei zur Erweiterung hinzufügen (mit der Option &quot;Datei hinzufügen&quot;), was ein neues Fenster zu den Erweiterungseigenschaften für die Dateieigenschaften öffnen wird:</p>
  <p class="dropspot"><img alt="Extension Properties" class="center" height="519" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" width="486" /></p>
  <p>Hier wählen Sie das Ziel <span class="notranslate">platform</span> für die Erweiterung aus (für GML wählen Sie alle aus), benennen die Erweiterungsdatei um und legen einige andere Details fest, die wir gleich behandeln werden.</p>
  <p class="note"><strong>HINWEIS</strong>: Wenn Sie eine Datei zu einer Erweiterung hinzufügen, wird sie in das Projektverzeichnis kopiert, was bedeutet, dass alle weiteren Änderungen an dieser Kopie vorgenommen werden müssen, damit sie im Spiel sichtbar sind. Sie können die Kopie finden, indem Sie mit der rechten Maustaste auf Ihre Erweiterung im Asset-Browser klicken und &quot;Im Explorer öffnen&quot; wählen.</p>
  <h2>Hinzufügen von Funktionen</h2>
  <p>Der Editor sollte automatisch mit den in unserer Datei <span class="notranslate">GML</span> enthaltenen Funktionen gefüllt werden. Ist dies nicht der Fall, können Sie sie manuell hinzufügen, indem Sie auf die Schaltfläche Funktionen im Menü <img> klicken und die gewünschten Funktionen auswählen:</p>
  <p class="dropspot"><img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" /></p>
  <p>Wenn Sie &quot;Funktion hinzufügen&quot; wählen, können Sie der Erweiterung eine Funktion hinzufügen, die dann im <span data-keyref="GameMaker Name">GameMaker</span> wie eine der eingebauten Funktionen aufgerufen werden kann. <span>Sobald die Funktion hinzugefügt wurde, öffnet sich das folgende Fenster, in dem Sie die Eigenschaften der Funktion festlegen können (oder Sie können die Funktion mit einem Doppelklick öffnen):</span></p>
  <p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p>
  <p>In der obigen Abbildung haben wir den Funktionseditor mit den Details für die Funktion <span class="inline">instance_create_colour()</span> gefüllt, die wir in unserer <span class="notranslate">GML</span> -Erweiterungsdatei definiert haben (beachten Sie, dass dieses Funktionseditor-Fenster nicht nur für die Definition von <span class="notranslate">GML</span> -Funktionen gedacht ist - es wird für alle Erweiterungstypen gleich sein). Gehen wir nun die einzelnen Optionen durch, die für eine Funktion definiert werden können:</p>
  <ul class="colour">
    <li>Sie können sehen, dass wir der Funktion einen <em>Namen</em> gegeben haben, den Sie verwenden würden, wenn Sie die Funktion in Ihrem Projekt aufrufen; beachten Sie, dass dieser Name nicht mit dem in der Erweiterung verwendeten übereinstimmen muss - Sie können die Funktion beliebig benennen und dann das Feld <em>Externer Name</em> verwenden, um sie mit dem tatsächlichen in der Erweiterung definierten Namen zu verknüpfen:<img></li>
    <li>Darunter befindet sich ein Abschnitt zur Definition des <em>Hilfetextes </em>, d. h. des Textes, der im Popup-Fenster zur Vervollständigung von <span class="notranslate">code</span> angezeigt wird, sowie des Hilfetextes am unteren Rand des <span class="notranslate">code</span> Editors.</li>
    <li>Als Nächstes können Sie den <em>Rückgabetyp</em> definieren, der ein <strong>Double </strong>( <a class="glossterm" data-glossterm="Fließkomma" href="#">Fließkommawert</a> einer reellen Zahl) oder eine <strong>Zeichenkette</strong> sein kann; wenn die externe Funktion nichts zurückgibt, spielt dies keine Rolle.</li>
    <li>Darunter legen Sie die <span class="notranslate">arguments</span> fest, die die Funktion annehmen soll. Diese <span class="notranslate">arguments</span> können entweder <strong>Doubles </strong>oder <strong>Strings</strong> sein, und Sie können sie hinzufügen, indem Sie auf die Schaltfläche <img> klicken, und sie entfernen, indem Sie auf die Schaltfläche <img> klicken.<br>
      <br>
      Wenn Ihre Funktion eine variable Anzahl von <span class="notranslate">arguments</span> annehmen kann (d. h. sie hat einige optionale <span class="notranslate">arguments</span>), sollten Sie sicherstellen, dass Sie das Kontrollkästchen &quot;Variable Längenargumente&quot; am unteren Rand aktivieren.
    </li>
  </ul>
  <p class="note"><strong>HINWEIS</strong>: Wenn die Funktion Teil einer nativen Erweiterung für <span class="notranslate">Windows</span>, Mac oder <span class="notranslate">Ubuntu</span> (<span class="inline">dll</span>, <span class="inline">dylib</span> bzw. <span class="inline">so</span> ) ist und mehr als vier <span class="notranslate">arguments</span> hat, <strong>müssen alle <span class="notranslate">arguments</span> vom gleichen Typ sein</strong>.</p>
  <p>Wenn Sie all dies getan haben, ist die Funktion bereit, im Projekt verwendet zu werden; sie wird nun in der Autovervollständigung angezeigt und ist auch farblich gekennzeichnet:</p>
  <p><img>Definierte Funktionen können auch als <strong>Init-Funktionen</strong> oder <strong>Final-Funktionen</strong> festgelegt werden, was bedeutet, dass sie automatisch aufgerufen werden, wenn das Spiel beginnt (Init) und wenn das Spiel endet (Final).</p>
  <p class="note"><strong>WICHTIG!</strong> Alle <span class="notranslate">platforms</span> unterstützen den Aufruf der Init-Funktion, <strong>aber nicht alle <span class="notranslate">platforms</span> führen den Aufruf der Final-Funktion aus.</strong> Der Grund dafür ist, dass einige <span class="notranslate">platforms</span> die App einfach schließen, ohne einen Hinweis oder Zeit für den Aufruf dieser Funktion zu geben. Die <span class="notranslate">platforms</span>, die am meisten davon betroffen sind, sind <strong>iOS</strong>, <strong>Android</strong>, <strong>HTML5</strong>, <strong>PlayStation </strong>und <strong>Xbox</strong>.</p>
  <h2>Makros</h2>
  <p>Die andere Möglichkeit, die Sie haben, ist die Erstellung eines <strong>Makros</strong>. Ein Makro kann entweder ein <a class="glossterm" data-glossterm="Konstante" href="#">konstanter</a> Wert oder ein kurzer Ausschnitt aus <span class="notranslate">code</span> sein (weitere Informationen zu Makros finden Sie <a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">hier</a>). Wir könnten zum Beispiel die Funktion <span class="inline">c_alice_blue</span> aus unserer zuvor definierten Erweiterung <span class="notranslate">GML</span> entfernen und sie stattdessen zu einem Makro machen. Um ein Makro zu erstellen, klicken Sie einfach auf die Schaltfläche &quot;Makros&quot; in den Erweiterungseigenschaften, woraufhin sich das folgende Fenster öffnet:</p>
  <p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p>
  <p>Der Editor ist hier ziemlich selbsterklärend: Sie geben den Namen des Makros und seinen konstanten Wert an, oder eine kurze Zeile von <span class="notranslate">code</span>. Beachten Sie, dass das Makro, wenn es eine Zeile von <span class="notranslate">code</span> ist <strong>, bei jedem Aufruf des Makros ausgewertet wird</strong>.</p>
  <h2 id="h1">Erstellen von Erweiterungsoptionen</h2>
  <p>Klicken Sie auf das Zahnradsymbol neben &quot;<strong>Erweiterungsoptionen</strong>&quot;, um die Optionen für Ihre Erweiterungen zu erstellen oder zu ändern:</p>
  <p><img>Nachdem Sie bei der Bestätigungsaufforderung auf &quot;<strong>Ja&quot;</strong> geklickt haben, wird ein neues Fenster angezeigt, in dem Sie neue Erweiterungsoptionen hinzufügen können:</p>
  <p><img>Sie können jeder Erweiterungsoption einen Namen, einen Standardwert und einen Datentyp geben. Der Name ist das, was Sie intern in Ihrer Erweiterung <span class="notranslate">code</span> verwenden würden, um den Wert der Option abzurufen.</p>
  <p>Neben dem Hinzufügen von Optionen mit &quot;Option hinzufügen&quot; können Sie auch Abschnitte mit &quot;Abschnitt hinzufügen&quot; hinzufügen. Ein Abschnitt ist <strong>keine</strong> Option, sondern nur eine Überschrift, die im Hauptfenster des Erweiterungseditors angezeigt wird. Verwenden Sie dies, wenn Sie viele Optionen haben und die Optionsliste, die der Endbenutzer sieht, aufräumen möchten.</p>
  <p>Die folgenden Arten von Optionen können erstellt werden:</p>
  <ul class="colour">
    <li><strong>Boolesch</strong>: Damit wird ein wahres/falsches Kontrollkästchen erstellt.</li>
    <li><strong>Zahl</strong>: Dies ist eine reelle Zahl.</li>
    <li><strong>Zeichenfolge</strong>: Dies ist eine Textzeichenfolge.</li>
    <li><strong>Dateipfad</strong>: Dies ist ein Pfad zu einer Datei. Damit können Sie den Explorer Ihres Betriebssystems verwenden, um nach einer Datei zu suchen.</li>
    <li><strong>OrdnerPfad</strong>: Dies ist ein Pfad zu einem Ordner/Verzeichnis. Damit können Sie den Explorer Ihres Betriebssystems verwenden, um nach einem Ordner zu suchen.</li>
    <li><strong>Liste</strong>: Dies ist eine Auswahlliste, aus der ein einzelnes Element aus einer vordefinierten Liste von Elementen ausgewählt werden kann.</li>
  </ul>
  <p>Sie können auch auf das Zahnradsymbol <img> neben einer Option klicken, um ihr einen optionalen <strong>Anzeigenamen</strong> und eine <strong>Beschreibung</strong> zu geben (die als QuickInfo erscheint, wenn Sie den Mauszeiger über den Anzeigenamen bewegen).</p>
  <p>Im Extras-Fenster können Sie diese Option auch in die Datei <strong>options.ini</strong> exportieren, die mit Ihrem Spiel geliefert wird.</p>
  <p>Schließlich können Sie die Option aus dem Editor ausblenden, so dass sie für den Endbenutzer, der die Erweiterung verwendet, nicht sichtbar ist.</p>
  <h3>Verwendung von Erweiterungsoptionen</h3>
  <p>Sie können die Werte der Optionen einer Erweiterung unter <span class="notranslate">runtime</span> abrufen, indem Sie die <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Extensions/Extensions.htm">Erweiterungsfunktionen</a> verwenden.</p>
  <p>Sie können Ihre Erweiterungsoptionen auch in Ihren <a data-xref="{title}" href="../../Settings/Runner_Details/Compiler_Batch_Files.htm">Compiler-Batch-Dateien/Skripten</a> abrufen, indem Sie den Namen <span class="inline2">YYEXTOPT_&lt;Erweiterungsname&gt;_&lt;Optionsname&gt;</span> verwenden <span class="inline2">.</span></p>
  <p>Erweiterungsoptionen sind nur dann unter <span class="notranslate">runtime</span> verfügbar, wenn die Erweiterung über Funktionen verfügt, die unter <span class="notranslate">runtime</span> verwendet werden. Unabhängig von der Verwendung der Erweiterung werden die Optionen jedoch immer in die INI-Datei (wenn die Option aktiviert ist) und in den Batch <span class="notranslate">scripts</span> exportiert.</p>
  <h2>Proxy-Dateien</h2>
  <p>Wenn Sie mit mehreren Zielplattformen arbeiten <span class="notranslate">platforms</span>, sollten Sie beachten, dass Sie eine einzige Erweiterung mit nur einem Satz von Funktionen/Makros erstellen können, die auf <em>allen </em>Plattformen funktionieren wird. Dies wird erreicht, indem Sie nur eine der Link-Bibliotheken als Erweiterung zu Ihrem Spiel hinzufügen und die andere(n) in die Liste der <strong>Proxy-Dateien</strong> im Fenster " <strong>Eigenschaften der Erweiterung</strong> " aufnehmen.</p>
  <p><img>Nehmen wir an, Sie haben eine <span class="notranslate">Windows</span> -Erweiterung mit dem <span class="inline"> <strong>dll </strong></span>&quot;<span class="inline">Haggis.dll</span>&quot;. Sie würden diese <span class="inline"> <strong>dll</strong></span> einfach als Mac <span class="inline"> <strong>DyLib</strong></span> replizieren, ihr den Namen &quot;<span class="inline"><strong>libHaggis.dylib</strong></span>&quot; geben und sicherstellen, dass die internen Funktionsnamen mit denen des Originals <span class="notranslate">Windows</span> <span class="inline"> <strong>dll</strong></span> übereinstimmen. Diese <strong> <span class="inline">DyLib</span> </strong>wird dann in die Proxy-Dateien eingefügt und zum Exportieren eingestellt, wenn das Spiel auf dem Mac-Ziel ausgeführt wird, und <span data-keyref="GameMaker Name">GameMaker</span> verwendet sie automatisch, wenn die Erweiterungsfunktionen aufgerufen werden.</p>
  <p>Um eine Proxy-Datei hinzuzufügen, klicken Sie einfach auf die Schaltfläche <img> im Fenster "Eigenschaften" für die ausgewählte Ressourcendatei und suchen Sie den Speicherort der Datei. Sobald die Datei hinzugefügt wurde, müssen Sie möglicherweise die Ziele der Erweiterung aktualisieren, um die entsprechende <span class="notranslate">module</span> hinzuzufügen. Wenn Sie Ihr Spiel das nächste Mal starten, wird die Datei als Proxy für diese <span class="notranslate">platform</span> eingebunden. Sie können Proxydateien auch entfernen, indem Sie auf die Schaltfläche <img> klicken, wodurch die ausgewählte Proxydatei entfernt wird.</p>
  <p>Sobald Sie Ihre Proxy-Dateien hinzugefügt haben, werden sie in den Ordner "Extensions" Ihres Projekts kopiert (Sie finden sie, indem Sie mit der rechten Maustaste auf die Erweiterung <img> klicken und " <em>Im Explorer öffnen</em>" wählen). Wenn Sie sie also bearbeiten müssen, sollten Sie die kopierten Dateien bearbeiten, die mit dem Spiel gebündelt sind, und nicht die Quelldatei, die importiert wurde, da <span data-keyref="GameMaker Name">GameMaker</span> die Dateien im Projekt zum Kompilieren verwenden wird.</p>
  <h2 id="h">Benennungskonventionen</h2>
  <p>Es ist sehr wichtig, dass Ihre Proxy-Dateien den unten aufgeführten Namenskonventionen folgen, da <span data-keyref="GameMaker Name">GameMaker</span> diese Namen analysiert und das Ziel <span class="notranslate">module</span> für die Datei entsprechend ihrer Erweiterung und ihrem Namen zuweist und die Dateien automatisch für Sie verknüpft. Wenn Sie sich nicht an diese Konventionen halten, kann es sein, dass Ihr Spiel unter <span class="notranslate">runtime</span> nicht funktioniert, da <span data-keyref="GameMaker Name">GameMaker</span> nicht in der Lage ist, herauszufinden, welche Datei zu verwenden ist, und die Datei daher nicht richtig lädt.</p>
  <p>Die Namenskonventionen für die einzelnen Ziele <span class="notranslate">platform</span> sind nachstehend aufgeführt:</p>
  <table>
    <colgroup>
      <col style="width: 173px;" />
      <col style="width: 715px;" />
    </colgroup>
    <tbody>
      <tr>
        <th>Plattform</th>
        <th>Namen</th>
      </tr>
      <tr>
        <td>Windows 32bit Laufzeit</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td>Windows 64bit Laufzeit</td>
        <td><span class="inline">&lt;<em>N</em><em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td>UWP</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll</td>
      </tr>
      <tr>
        <td>Ubuntu (<span class="notranslate">Linux</span>)</td>
        <td><span class="inline">&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so,<br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so,<br>
            <span class="inline">lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_arm.so,<br>
            <br>
            &lt;<em>Name&gt;_arm64</em>.so, lib&lt;<em>Name&gt;_arm64</em>.so, lib&lt;<em>Name&gt;_linux_arm64</em>.so,<br>
            <br>
            &lt;<em>Name&gt;_arm64-v8</em>.so,<br>
            lib&lt;<em>Name&gt;_arm64-v8</em>.so, lib&lt;Name&gt;_linux_arm64-v8.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_armeabi-v7a.so</td>
      </tr>
      <tr>
        <td>macOS</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td>HTML5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td>PS4</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps4.prx, lib&lt;<em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td>PS5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps5.prx, lib&lt;<em>Name</em>&gt;_ps5.prx</span></td>
      </tr>
      <tr>
        <td>Xbox Eins</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span><em>&lt;Name&gt;_xboxone</em>.dll</td>
      </tr>
      <tr>
        <td>Xbox Serie X|S</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span><em>&lt;Name&gt;_xboxseriesxs</em>.dll</td>
      </tr>
    </tbody>
  </table>
  <p>Unter Verwendung der obigen Konventionen würden Sie den Teil <span class="inline">&lt;<em>Name</em>&gt;</span> durch den Namen der Basisdatei ersetzen, für die Sie die Proxydateien hinzufügen wollen.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Extensions.htm">Der Erweiterungseditor</a></div>
        <div style="float:right">Nächste: <a href="Android_Extensions.htm">Android-Erweiterungen</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>