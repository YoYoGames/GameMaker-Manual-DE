<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>iOS / tvOS Erweiterungen</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how iOS extensions work" />
  <meta name="rh-index-keywords" content="Extensions - Creating iOS / tvOS Extensions" />
  <meta name="search-keywords" content="iOS Extensions,iOS, tvOS Extensions, tvOS" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>iOS / <span class="notranslate">tvOS</span> Erweiterungen</h1>
  <p>Um eine Erweiterung für <span class="notranslate">iOS</span> oder tvOS zu erstellen, müssen Sie in zwei Teilen vorgehen. Der erste Teil ist das Hinzufügen der Erweiterung selbst, zusammen mit den erforderlichen Dateien, und der zweite Teil ist die Erstellung der Funktionen und Makros/Konstanten, die die Erweiterung benötigt.</p>
  <p>Die Funktionen und Konstanten werden mithilfe von <strong>Platzhalterdateien </strong>hinzugefügt, um sie zu gruppieren. Sie fügen also einen Platzhalter hinzu und definieren dann die Funktionen und Makros wie im Abschnitt <a href="Creating_An_Extension.htm">hier</a> erklärt. Um den Rest der Dateien hinzuzufügen, müssen Sie jedoch zuerst das <em>iOS- </em>und/oder das <em>tvOS-Kontrollkästchen </em>im Abschnitt " <strong>Zusätzliche Funktionen"</strong> des Editors aktivieren, um das entsprechende Fenster " <strong>Eigenschaften der Erweiterung"</strong> zu öffnen (das Bild unten zeigt das Fenster "Eigenschaften von <span class="notranslate">iOS</span> ", aber das Fenster <span class="notranslate">tvOS</span> ist genau dasselbe):</p>
  <p class="dropspot"><img alt="iOS Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_iOS.png" /></p>
  <p>Hier können Sie die folgenden Angaben machen:</p>
  <ul class="colour">
    <li class="dropspot"><strong>Compiler <span class="notranslate">Flags</span> / Linker-Flags</strong>: Einige Frameworks und SDKs von Drittanbietern erfordern die Hinzufügung von zusätzlichen Linker-Flags <span class="notranslate">flags</span> und <span class="notranslate">compiler</span> <span class="notranslate">flags</span>, die hier angegeben werden können (siehe die Dokumentation des jeweiligen SDKs oder Frameworks für weitere Details).</li>
    <li class="dropspot"><strong>Klassenname</strong>: Ihre Erweiterung kann mehrere Klassen haben, wobei jede Klasse ihre eigenen Funktionen und Konstanten hat, daher sollten Sie ihr einen Namen geben, der ihren Zweck widerspiegelt.</li>
    <li class="dropspot"><strong>App Delegate Class Name</strong>: Der Name Ihrer benutzerdefinierten App-Delegate-Klasse. Wenn Sie dies festlegen, kann die Erweiterung die Kernfunktionalität der App außer Kraft setzen/erweitern. Um diese Funktion zu nutzen, müssen Sie Folgendes tun:
      <ol>
        <li>Stellen Sie sicher, dass die Delegaten-Quelldateien den gleichen Namen wie die Delegatenklasse haben (z.B. sollte <span class="inline">@interface MyCustomAppDelegate</span> in &quot; <span class="inline">MyCustomAppDelegate.h</span>&quot; definiert werden)</li>
        <li>Fügen Sie die Umgebungsvariable <span class="inline">${YYExtAppDelegateIncludes}</span> am Anfang der Delegaten-Header-Datei Ihrer Anwendung hinzu. Diese wird zur Kompilierzeit durch die relevanten Include-Dateien für die übergeordnete Delegatenklasse ersetzt.</li>
        <li>Verwenden Sie die Umgebungsvariable <span class="inline">${YYExtAppDelegateBaseClass}</span> als Basisklasse für Ihren benutzerdefinierten App-Delegaten. Diese wird bei der Kompilierung durch die richtige Basis-Delegiertenklasse ersetzt.<br>
          <br>
          Um sicherzustellen, dass Ihre Erweiterung mit anderen Erweiterungen funktioniert, die benutzerdefinierte App-Delegate verwenden, sollten Sie alle Methoden der Basisklasse von überschriebenen Methoden in Ihrer Kindklasse aufrufen. Bevor Sie die Methode der Oberklasse aufrufen, müssen Sie sicherstellen, dass sie in der Klassenhierarchie implementiert ist, um Fehler zu vermeiden, z.B.:
        </li>
      </ol>
     <p class="code">- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions<br />
        {<br />
            // Check if any superclasses implement this method and call it<br />
            if([[self superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions:)])<br />
              return [super application:application willFinishLaunchingWithOptions:launchOptions];<br />
            else<br />
                return TRUE;<br />
        }</p>
    </li>
    <li class="dropspot"><strong>System-Frameworks</strong>: Hier können Sie beliebige <span class="notranslate">iOS</span> <a class="glossterm" data-glossterm="Rahmenwerk" href="#">System-Frameworks</a>in Ihre Erweiterung einfügen. Diese werden hinzugefügt, indem Sie auf die Schaltfläche <img> klicken, wodurch ein Platzhalter-Framework hinzugefügt wird, das Sie dann durch einen Doppelklick auf <img> bearbeiten können. Weitere Informationen über die verfügbaren System-Frameworks finden Sie <a href="https://developer.apple.com/documentation/">hier</a>. Um ein Systemgerüst zu entfernen, wählen Sie es einfach aus und klicken dann auf die Schaltfläche <img>.<br>
      <br>
      <img>Sie können das Kontrollkästchen für ein Framework aktivieren, um es als &quot;<strong>Schwache Referenz</strong>&quot; zu kennzeichnen. Dadurch wird es dem Abschnitt &quot;<strong>Build Phases -&gt; Link Binary with Libraries</strong>&quot; auf <span class="notranslate">Xcode</span> als &quot;<strong>optionales</strong>&quot; Framework hinzugefügt, im Gegensatz zu einem &quot;<strong>erforderlichen</strong>&quot; Framework (was das Standardverhalten ist).
    </li>
    <li class="dropspot"><strong>3rd Party Frameworks + Bundles</strong>: Dieser Abschnitt dient zum Hinzufügen von Drittanbieter- und SDK-Bundles. Wie bei den System-Frameworks klicken Sie auf die Schaltfläche <img>, um sie hinzuzufügen, und doppelklicken Sie dann auf <img>, um sie zu bearbeiten, und wählen Sie sie aus und klicken Sie dann auf <img>, um sie zu entfernen (Informationen zum Namen des Frameworks finden Sie in der Dokumentation des von Ihnen gewählten SDK).<br>
      <br>
      Hier können Sie wählen, ob Sie das Framework <strong>nicht einbetten</strong>, <strong>einbetten und signieren</strong> oder <strong>ohne Signierung einbetten</strong> möchten:<br>
      <img>Dies entspricht der gleichen Option für ein Framework, das unter &quot;<strong>Frameworks, Bibliotheken und eingebettete Inhalte</strong>&quot; in <span class="notranslate">Xcode</span> hinzugefügt wurde.
    </li>
    <li class="dropspot"><strong>Framework-Pfad auf dem Mac eingeben</strong>: Wenn Sie der Erweiterung ein Framework hinzufügen möchten, dessen Dateien auf dem Mac vorhanden sind, der zur Erstellung Ihres Projekts verwendet wird, können Sie den Pfad zu diesem Framework (auf dem Erstellungsrechner) in dieses Feld eingeben und dann auf die Schaltfläche <img> klicken, um es hinzuzufügen.<br>
      <br>
      Der Pfad muss auf eine Datei <span class="inline">.framework</span> verweisen, die als <span class="inline">.zip</span> komprimiert und im Ordner <span class="inline">iOSSourceFromMac</span> unter Ihrem Erweiterungsverzeichnis abgelegt wird. Sie können diese Datei jederzeit öffnen, indem Sie mit der rechten Maustaste auf <img> auf der Erweiterung klicken und <em>Im Explorer öffnen</em> wählen.
    </li>
    <li class="dropspot"><strong>Quelle hinzufügen</strong>: Hier können Sie die Quelldateien hinzufügen, die für die Funktion Ihrer Erweiterung erforderlich sind. Die hinzugefügten Dateien werden im Ordner <span class="inline">iOSSource</span> in Ihrem Erweiterungsverzeichnis gespeichert.</li>
    <li class="dropspot"><b>Code-Injektion</b>: Hier können Sie alle <span class="notranslate">code</span> hinzufügen, die in Ihre <span class="notranslate">iOS</span> Anwendung injiziert (hinzugefügt) werden sollen, wenn Ihr Spiel zum Testen oder zur endgültigen Veröffentlichung erstellt wird. Stellen Sie sicher, dass Sie dies (und Ihre Berechtigungen) sorgfältig überarbeiten, bevor Sie Spiele in den Store einreichen, da falsche Einstellungen dazu führen, dass Ihr Spiel nicht eingereicht werden kann.</li>
  </ul>
  <h2>Code-Injektion</h2>
  <p>Code Injection kann für iOS/tvOS-Erweiterungen auf dieselbe Weise verwendet werden, wie auf der Seite <span class="notranslate">Android</span> Extensions beschrieben: siehe <a data-xref="{text}" href="Android_Extensions.htm#h">Code Injection</a>.</p>
  <p>Die folgenden Tags sind für die Plattformen <span class="notranslate">iOS</span> und <span class="notranslate">tvOS</span> verfügbar:</p>
  <p class="code">YYIosPlist<br />
    YYIosEntitlements<br />
    YYIosCocoaPods<br />
    YYIosCocoaPodsDependencies<br />
    YYIosBuildRules<br />
    YYIosBuildSettingsInjection<br />
    YYIosScriptPhase<br />
    YYIosCFBundleURLSchemesArray<br />
    YYIosLSApplicationQueriesSchemesArray<br />
    YYIosPrivacyManifest<br />
    YYIosLaunchActionCommandLineArguments<br />
    YYIosBridgeHeader<br />
    <br />
    YYTvosPlist<br />
    YYTvosEntitlements<br />
    YYTvosCocoaPods<br />
    YYTvosCocoaPodsDependencies<br />
    YYTvosBuildRules<br />
    YYTvosBuildSettingsInjection<br />
    YYTvosScriptPhase<br />
    YYTvosCFBundleURLSchemesArray<br />
    YYTvosLSApplicationQueriesSchemesArray<br />
    YYTvosPrivacyManifest
  </p>
  <p>Der <span class="notranslate">runtime</span> Ort, an dem die <span class="notranslate">code</span> injiziert wird, hängt von der Art des Tags ab:</p>
  <table>
    <colgroup>
      <col style="width: 174px;" />
      <col style="width: 760px;" />
    </colgroup>
    <tbody>
      <tr>
        <th style="">Tag-Typ</th>
        <th style="">Injektionspfad</th>
      </tr>
      <tr>
        <td style=""><b>Berechtigungen</b></td>
        <td style="">{RUNTIME}\ios\TemplateProject\${YYXCodeProjName}\<br>
         <span>${YYXCodeProjName}.entitlements</span>
        </td>
      </tr>
      <tr>
        <td style=""><b>info.plist</b></td>
        <td style="">{RUNTIME}\ios\TemplateProject\${YYXCodeProjName}\<br>
          Unterstützungsdateien\${YYXCodeProjName}-Info<span>.plist</span></td>
      </tr>
      <tr>
        <td style=""><strong>infoPlist.strings</strong></td>
        <td style="">{RUNTIME}\ios\TemplateProject\${YYXCodeProjName}\<br>
          de.lproj\InfoPlist.strings</td>
      </tr>
      <tr>
        <td style=""><strong>projekt.pbxproj</strong></td>
        <td style="">{RUNTIME}\ios\TemplateProject\${YYXCodeProjName}.xcodeproj\<br>
          projekt.pbxproj</td>
      </tr>
      <tr>
        <td style=""><strong>xcscheme</strong></td>
        <td style="">{RUNTIME}\ios\TemplateProject\${YYXCodeProjName}.xcodeproj\<br>
          xcshareddata\xcschemes\${YYXCodeProjName}.xcscheme</td>
      </tr>
      <tr>
        <td style=""><strong>PrivacyManifest</strong></td>
        <td style=""><span>{RUNTIME}\ios\TemplateProject\${YYXCodeProjName}\Supporting Files\PrivacyInfo.xcprivacy</span></td>
      </tr>
    </tbody>
  </table>
  <p class="note"><strong></strong><span class="note">HINWEIS</span> Diese Pfade gelten nur für VM. Für YYC wird <span class="notranslate">code</span> in das Verzeichnis <span class="inline">{RUNTIME}\yyc\</span> kopiert, wo die Pfade mit denen für VM übereinstimmen können, aber nicht müssen.</p>
  <p>Beachten Sie, dass es eine Spieloption <a href="../../Settings/Game_Options/iOS.htm">für iOS</a> und <a href="../../Settings/Game_Options/tvOS.htm">für tvOS</a> gibt, um eine <span class="inline">Podfile.lock</span> Datei zu <span data-keyref="GameMaker Name">GameMaker</span> hinzuzufügen, die erforderlich ist, wenn Sie <span class="notranslate">CocoaPods</span> Abhängigkeiten in diesem Abschnitt hinzufügen.</p>
  <h2>Zusätzliche Informationen</h2>
  <p>Wenn Ihrer Erweiterung System-Frameworks oder Frameworks von Drittanbietern hinzugefügt wurden, werden diese nun im Fenster <strong>Eigenschaften der Erweiterung </strong>aufgelistet, wobei jedes dieser Frameworks ein Kontrollkästchen daneben hat. Wenn Sie das Kontrollkästchen markieren, aktivieren Sie das &quot;weak linking&quot;, was nützlich ist, wenn Sie ein Symbol aus der enthaltenen Bibliothek mit Ihrem eigenen Wert &quot;überschreiben&quot; müssen, aber es sollte beachtet werden, dass dies die Verknüpfung verlangsamt.</p>
  <p>Informationen zur Erstellung von nativen Erweiterungen für <span class="notranslate">iOS</span> finden Sie unter <a href="Extended_Examples.htm">Quellcode-Beispiele</a>; Informationen zur Verwendung von <span class="notranslate">CocoaPods</span> in Erweiterungen finden Sie in der folgenden Anleitung:</p>
  <ul class="colour">
    <li><a href="https://help.yoyogames.com/hc/en-us/articles/360008958858">iOS und tvOS: Verwendung von Cocoa Pods</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="../Extensions.htm">Der Erweiterungseditor</a></div>
        <div style="float:right">Nächste: <a href="Extended_Examples.htm">Quellenbeispiele</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
iOS Extensions
tvOS Extensions
-->
  <!-- TAGS
extensions_ios
-->
</body>
</html>