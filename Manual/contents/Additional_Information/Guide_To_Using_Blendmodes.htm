<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Anleitung zur Verwendung von Blendmodes</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how blendmodes work." />
  <meta name="rh-index-keywords" content="blendmodes,Guide To Using Blendmodes" />
  <meta name="search-keywords" content="blendmodes,blending,blend modes" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Anleitung zur Verwendung von Blendmodes</h1>
  <p>Wenn du schon länger mit <span data-keyref="GameMaker Name">GameMaker</span> arbeitest, wirst du mit ziemlicher Sicherheit auf <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">Überblendmodi</a> gestoßen sein und sie wahrscheinlich sogar in deinen Spielen verwendet haben. Überblendmodi sind eine großartige Möglichkeit, die Art und Weise, wie etwas gezeichnet wird, zu verändern, um interessante und spezifische grafische Effekte zu erzielen. Das ist ein Thema, das viele Leute verwirren kann. In diesem Abschnitt wollen wir das Geheimnis um die Überblendungsmodi lüften und Sie in die Lage versetzen, sie in Ihren Spielen optimal zu nutzen.</p>
  <p> </p>
  <h2>ÜBERBLICK</h2>
  <p>Mischmodi weisen Ihr Spiel im Grunde an, bestimmte Dinge gemischt mit dem zu zeichnen, was bereits vorher gezeichnet wurde. Alles, was Sie auf den Bildschirm zeichnen, besteht aus vier Komponenten - Rot, Grün, Blau und Alpha - und standardmäßig werden sie mit dem Mischmodus <span class="inline">bm_normal</span> auf den Bildschirm gezeichnet. Dieser Überblendungsmodus zeichnet alle Pixel mit ihren Farb- und Alphawerten im Wesentlichen unverändert (obwohl Sie später in diesem Abschnitt sehen werden, dass das nicht <em>ganz</em> richtig ist...), aber <span data-keyref="GameMaker Name">GameMaker</span> hat eine Reihe von eingebauten Überblendungsmodi, die eingestellt werden können, um dieses Verhalten zu ändern.</p>
  <p>Wenn <span data-keyref="GameMaker Name">GameMaker</span> ein Pixel zeichnet, gibt es eine <strong>Quellfarbe</strong> (die Farbe des Pixels, das gezeichnet werden soll) und eine <strong>Zielfarbe</strong> (die Farbe, die bereits in dem Pixel enthalten ist, zu dem wir zeichnen). Bei der Bestimmung der neuen Farbe des Pixels kombiniert <span class="notranslate">GameMaker</span> die Quell- und Zielfarbe entsprechend dem oben erwähnten <strong>Mischmodus</strong>. Jede Komponente der Farben wird als Fließkommawert zwischen 0 und 1 gespeichert, und die neue Farbe wird berechnet, indem jede Komponente der Quellfarbe mit einem Faktor und jede Komponente der Zielfarbe mit einem anderen Faktor multipliziert wird und die Ergebnisse dann Komponente für Komponente addiert werden.</p>
  <p> </p>
  <h2>GRUNDLEGENDE MISCHMODI</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> verwendet die Funktion <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode()</a>, um die Überblendung zu ändern, die Ihr Spiel zum Zeichnen verwendet. Sie rufen diese Funktion auf, bevor Sie (zum Beispiel) eine <span class="notranslate">sprite</span> zeichnen, und setzen sie danach wieder zurück, etwa so:</p>
  <p class="code">gpu_set_blendmode(bm_add);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>Diese <span class="notranslate">code</span> zeichnet die Instanz <span class="notranslate">sprite</span> unter Verwendung eines <strong>additiven </strong>Mischmodus. Der additive Mischmodus wird mit einer der verfügbaren <span class="notranslate">GML</span> Konstanten eingestellt, von denen es vier für die Grundmodi gibt:</p>
  <p class="code">bm_normal<br />
    bm_add<br />
    bm_subtract<br />
    bm_max</p>
  <p>Wir haben bereits gesehen, wie <span class="inline">bm_normal</span> aussieht - denn das ist die Standardeinstellung für alles! - Lassen Sie uns also fortfahren und die anderen drei ein wenig genauer betrachten...</p>
  <p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmNormal.png" /></p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">bm_add</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Dieser Mischmodus fügt die Farben der Quell- und Zielpixel zusammen (wirkt sich aber nicht auf die Alphawerte aus). Wenn Ihr Hintergrundbild beispielsweise eine Volltonfarbe mit einem RGB-Wert von (100,15,70) ist und Sie dann ein Rechteck mit einem RGB-Wert von (120,25,30) zeichnen, wären die endgültigen RGB-Werte für jedes Pixel des Rechtecks (mit bm_add) (220,40,100). Beachten Sie, dass Farbwerte nicht über 255 (oder unter 0) gehen können, so dass alles, was mehr als das ergibt, auf 255 geklemmt wird.</p>
    <p class="dropspot"><img>Dieser Mischmodus eignet sich hervorragend, um ein &quot;neonfarbenes Leuchten&quot; zu erzielen, und wird am häufigsten für Lichteffekte, Laser oder so ziemlich alles verwendet, was leuchten oder lumineszieren soll.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">bm_subtract</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Dieser Mischmodus unterscheidet sich ein wenig vom vorherigen, da er auf einer prozentualen Basis und nicht mit einem direkten Wert arbeitet. Dieser Prozentsatz wird von der Zielfarbe (der Farbe des Pixels, auf das gezeichnet wird) abgezogen. Um dies besser zu erklären, sehen wir uns ein Beispiel an.</p>
    <p class="dropspot"><img>Stellen Sie sich vor, Sie möchten den Rotwert aller in einem Bereich des Raums gezeichneten Pixel um 25 % reduzieren. Sie müssten zunächst 25 % von 255 ermitteln, diesen Wert dann in einen RGB-Farbwert umwandeln und ihn schließlich zusammen mit bm_subtract verwenden, um über den Bereich zu zeichnen. Etwa so:</p>
    <p class="code">var red = (25 / 100) * 255;<br />
      var col = make_colour_rgb(red, 0, 0);<br />
      gpu_set_blendmode(bm_subtract);<br />
      draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);<br />
      gpu_set_blendmode(bm_normal);</p>
    <p class="dropspot">Wenn Sie die Helligkeit eines Hintergrunds einfach um 50 % reduzieren möchten, würden Sie eine Farbe wählen, die zu 50 % aus Rot, 50 % aus Grün und 50 % aus Blau besteht, also RGB (128, 128, 128). Dieser Mischmodus wird hauptsächlich zum Zeichnen von Schatten oder zum Erstellen interessanter Ausblendeffekte verwendet.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">bm_max</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Dieser Mischmodus ist komplizierter zu erklären, aber im Grunde multipliziert er die Quellfarben mit dem Quellalpha und addiert sie dann zu den Zielfarbwerten, die mit den inversen Quellfarbwerten multipliziert werden. Die eigentliche Mathematik, die hinter bm_max (und den anderen Mischmodi) steckt, werden wir im zweiten Teil unseres Artikels behandeln, aber alles, was Sie wissen müssen, ist, dass das Ergebnis eine &quot;gesättigtere&quot; und hellere Farbe sein wird, ohne zu demselben reinen Weißglanz zu führen, den die Verwendung von <span class="inline">bm_add</span> verursacht.</p>
    <p class="dropspot"><img>Dieser Mischmodus kann nützlich sein, wenn Sie überlappende Bilder zeichnen müssen, ohne dass sie so hell werden, dass man sie nicht mehr sehen kann. Die hellen Teile werden zwar heller, aber sie sollten immer noch ein gewisses Maß an Farbe und Farbton beibehalten. Beachten Sie jedoch, dass der Alphawert des Quellbildes bei Verwendung dieses Mischmodus ebenfalls einen Einfluss auf den endgültigen Effekt hat.</p>
  </div>
  <p> </p>
  <p>Jetzt kennst du die Grundlagen für die Verwendung eines Mischmodus in <span data-keyref="GameMaker Name">GameMaker</span>. Er nimmt die RGB- und Alpha-Werte des Quellbildes (das, was gezeichnet wird) und mischt diese mit den RGB- und Alpha-Werten des Zielbildes (das, was auch gezeichnet wird). Diese Überblendung erfolgt durch Multiplikation der einzelnen Komponenten für jede Pixelfarbe und jeden Alphawert mit unterschiedlichen Beträgen, je nachdem, welche Effekte wir erzielen möchten. Mit diesem Wissen können Sie beginnen, Überblendungsmodi in Ihren Spielen zu verwenden, um leuchtende Laser, realistische Schatten oder gesättigte Übergangseffekte zu erzielen, aber es gibt noch mehr zu lernen! Im Folgenden sehen wir uns die <strong>erweiterten Überblendungsmodi</strong> an und erforschen ein wenig die Mathematik dahinter, damit Sie Ihre eigenen Überblendungseffekte wie Multiplikation oder Überlagerung erstellen können.</p>
  <p> </p>
  <h2>Erweiterte Blend-Modi</h2>
  <p>Oben haben wir über die Funktion <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"><span class="inline">gpu_set_blendmode()</span></a>gesprochen, aber jetzt werden wir uns die Funktion <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"><span class="inline">gpu_set_blendmode_ext()</span></a>. Dies ist (wie der Name schon sagt) eine erweiterte Funktion zum Einstellen von <em>benutzerdefinierten </em>Mischmodi, aber wie funktioniert das? Werfen wir zunächst einen Blick auf die trockene technische Antwort, bevor wir weitermachen:</p>
  <ul class="colour">
    <li>Die Funktion <span class="inline">gpu_set_blendmode_ext</span><span class="inline">(src, dest)</span> gibt an, welcher Mischmodus für die Quell- und die Zielfarbe verwendet werden soll. Die neue Farbe ist ein Faktor mal die Quelle und ein anderer Faktor mal das Ziel. Diese Faktoren werden mit dieser Funktion festgelegt. Zum Verständnis: Quelle und Ziel haben jeweils eine Rot-, Grün-, Blau- und Alpha-Komponente. Die <strong>Quelle </strong>ist also (<span class="inline">Rs, Gs, Bs, As</span>) und das <strong>Ziel </strong>ist (<span class="inline">Rd, Gd, Bd, Ad</span>). Alle Werte werden als zwischen 0 und 1 liegend betrachtet.</li>
  </ul>
  <p>Dieser Text ist zwar korrekt und erklärt, was Mischmodi bewirken, aber er ist nicht wirklich intuitiv... Gehen wir also ein bisschen mehr ins Detail und erklären, worum es dabei geht.</p>
  <p>Wenn wir über die <strong>Quelle </strong>sprechen, meinen wir die Farbe und die Alphawerte des Pixels, das gezeichnet wird, und wenn wir über das <strong>Ziel </strong>sprechen, meinen wir die Farbe und die Alphawerte des Pixels, über das es gezeichnet wird. Um die Dinge einfacher zu halten, können wir die Quellfarbe als ihre Komponenten ausschreiben, etwa so:</p>
  <ul class="colour">
    <li><span class="inline">(Rs, Gs, Bs, As)</span> = die RGB- und Alpha-Werte der Farbe, die Sie zeichnen wollen.</li>
  </ul>
  <p>Und das Ziel würde so aussehen:</p>
  <ul class="colour">
    <li><span class="inline">(Rd, Gd, Bd, Ad)</span> = die RGB- und Alpha-Werte der Farbe, mit der Sie zeichnen wollen.</li>
  </ul>
  <p>Wenn wir also etwas auf den Bildschirm zeichnen, macht unser Grafikprozessor für jedes einzelne Pixel Folgendes:</p>
  <p class="code">final_pixel_colour =  (Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p>
  <p>Die oben erwähnten <strong>Überblendfaktoren</strong> werden in <span data-keyref="GameMaker Name">GameMaker</span> durch eine Reihe von <span class="notranslate">GML</span> Konstanten definiert, die jeweils einen Faktor darstellen, mit dem die Quell- bzw. Zielwerte R, G, B und A multipliziert werden sollen. Die verfügbaren Faktoren sind:</p>
  <ul class="colour">
    <li><span class="inline">bm_zero</span>: Der Überblendfaktor ist (0, 0, 0, 0)</li>
    <li><span class="inline">bm_one</span>: Der Überblendfaktor ist (1, 1, 1, 1)</li>
    <li><span class="inline">bm_src_colour</span>: Blendfaktor ist (Rs, Gs, Bs, As)</li>
    <li><span class="inline">bm_inv_src_colour</span>: Der Überblendfaktor ist (1-Rs, 1-Gs, 1-Bs, 1-As)</li>
    <li><span class="inline">bm_src_alpha</span>: Blendfaktor ist (As, As, As, As)</li>
    <li><span class="inline">bm_inv_src_alpha</span>: Der Überblendfaktor ist (1-As, 1-As, 1-As, 1-As)</li>
    <li><span class="inline">bm_dest_alpha</span>: Blendfaktor ist (Ad, Ad, Ad, Ad)</li>
    <li><span class="inline">bm_inv_dest_alpha</span>: Der Überblendfaktor ist (1-Ad, 1-Ad, 1-Ad, 1-Ad)</li>
    <li><span class="inline">bm_dest_colour</span>: Blendfaktor ist (Rd, Gd, Bd, Ad)</li>
    <li><span class="inline">bm_inv_dest_colour</span>: Der Überblendfaktor ist (1-Rd, 1-Gd, 1-Bd, 1-Ad)</li>
    <li><span class="inline">bm_src_alpha_sat</span>: Der Blendfaktor ist (f, f, f, 1); f = min(As, 1-Ad)</li>
  </ul>
  <p>Die vier &quot;grundlegenden&quot; Überblendmodi, die <span data-keyref="GameMaker Name">GameMaker</span> hat, sind eigentlich Zusammensetzungen von zwei dieser Überblendfaktoren.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Beispiel für die Funktionsweise von bm_normal</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Es ist an der Zeit, sich ein praktisches Beispiel dafür anzusehen, wie dies beim Zeichnen in <span data-keyref="GameMaker Name">GameMaker</span> zusammenkommt. Dafür werden wir uns bm_normal ansehen, was wirklich ist:</p>
    <p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);</p>
    <p class="dropspot">Eines der Probleme, die man mit Mischmodi hat, ist die Visualisierung der Ergebnisse. Um die Mathematik dahinter zu veranschaulichen, nehmen wir diesen Mischmodus als Testobjekt, da er von allen am häufigsten verwendet wird und wir genau wissen, was wir von ihm erwarten können. Stellen Sie sich vor, Sie zeichnen ein Rechteck mit der Farbe (128, 255, 64, 255) über einen Hintergrund mit der Farbe (64, 128, 255, 255):</p>
    <p class="dropspot"><img>Unser Mischmodus sieht also wie folgt aus:</p>
    <p class="code">Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) =  (0, 0, 0, 0)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br />
      (0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)</p>
    <p class="dropspot">Wie Sie sehen können, multiplizieren wir die Zielwerte mit 0, wodurch sie ebenfalls den Wert 0 erhalten, was bedeutet, dass die Ausgangsfarben unverändert bleiben, so dass unser endgültiger Farbwert <strong>(128, 255, 64, 255)</strong> ist. Sie können sehen, wie sich die Einbeziehung von Alpha auch auf diesen Wert auswirkt:</p>
    <p class="code">Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5, 0.5)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br />
      (0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75) = (96, 192, 159, 192)</p>
    <p class="dropspot">Dies ergibt eine endgültige Pixelfarbe (96, 192, 159, 192) und ergibt ein Bild wie das unten gezeigte:</p>
    <p class="dropspot"><img alt="bm_add example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" /></p>
    <p class="dropspot">Ich hoffe, Sie können jetzt klar erkennen, was die Mischmodusfaktoren bewirken und wie ihre Kombination das Gezeichnete verändern kann, um interessante Effekte zu erzielen. Wir werden uns nun ein praktisches Beispiel ansehen, wie Sie diese Faktoren kombinieren können, um Ihre eigenen benutzerdefinierten Mischmodi zu erstellen.</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p>Jetzt wissen Sie, wie das Einstellen von Mischmodi funktioniert, und haben ein Beispiel gesehen, wie es beim täglichen Zeichnen verwendet wird.</p>
  <p> </p>
  <h2>EIGENE MISCHMODI ERSTELLEN</h2>
  <p>Mithilfe der verschiedenen verfügbaren Faktoren können Sie Ihre eigenen Mischmodi erstellen, um Mischoptionen zu erzielen, die Ihnen normalerweise nicht zur Verfügung stehen. In diesem Beispiel werden wir einen <strong>Multiplikationseffekt </strong>erstellen, wie er in Photoshop verwendet wird. Wir können diesen Mischmodus mit zwei unserer oben erwähnten Mischmodus-Faktor-Konstanten wie folgt simulieren:</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p>
  <p>Bevor wir etwas mit diesem Mischmodus zeichnen, wollen wir uns ansehen, wie es in Photoshop aussehen soll:</p>
  <p><img>Wenn wir den erweiterten Mischmodus verwenden, erhalten wir das folgende Ergebnis:</p>
  <p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br />
    Source colour * dest colour + dest colour * zero = source colour * dest colour</p>
  <p>Der Überblendfaktor <span class="inline">bm_zero</span> entfernt die Zielfarbe effektiv aus der Gleichung (da Null mal irgendetwas Null ist), so dass die Quellfarbe multipliziert mit dem Überblendfaktor der Zielfarbe übrig bleibt, daher der Name &quot;multiplizieren&quot; für diesen Modus. Um dies in <span data-keyref="GameMaker Name">GameMaker</span> zu verwenden, würden Sie einfach etwas wie dieses in Ihrem <strong>Draw Event</strong> haben:</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>Das nächste Bild stammt aus einem Testprojekt in <span class="notranslate">GameMaker</span>, bei dem genau dieser Code verwendet wurde:</p>
  <p><img>Können Sie den Unterschied erkennen? Wahrscheinlich nicht! Es wird jedoch einige Abweichungen zwischen den beiden geben, die auf die Unterschiede zwischen den verwendeten Render-Tools zurückzuführen sind, aber es ist fast genau so, wie Sie es erwarten würden. Beachten Sie jedoch, dass nicht alle Mischmodi, die von Kunstprogrammen verwendet werden, in <span data-keyref="GameMaker Name">GameMaker</span> zur Verfügung stehen, da einige von ihnen die Farbwerte zwingen können, über 255 hinauszugehen und so spezielle Effekte zu erzeugen, aber das bedeutet nicht, dass Sie damit keine passablen Imitationen dieser Effekte oder sogar ganz neue Effekte erzeugen können.</p>
  <p>Es ist erwähnenswert, dass Sie mit <span data-keyref="GameMaker Name">GameMaker</span> mit der Funktion <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha()</a></span> noch einen Schritt weiter gehen können. Sie erlaubt es, die Alphakomponente der verschiedenen Blend-Mode-Faktoren zu trennen und sie einzeln zu verwenden, um noch mehr Kombinationsmöglichkeiten zu schaffen. Wir werden hier nicht auf diese Funktion eingehen, da sie bereits im Handbuch ausführlich erklärt wird, aber sie ist es wert, erwähnt zu werden, damit Sie wissen, dass sie zur Verfügung steht.</p>
  <p> </p>
  <h2>OBERFLÄCHEN UND ALPHA</h2>
  <p>Ein letzter Punkt, den man bei Mischmodi beachten sollte, ist die Auswirkung auf die <strong>Alpha-Komponente </strong>einer Farbe. Wenn Sie einfach auf die <a class="glossterm" data-glossterm="Anwendungsfläche" href="#">Anwendungsoberfläche</a> oder den <a class="glossterm" data-glossterm="Display-Puffer" href="#">Anzeigepuffer</a> zeichnen, brauchen Sie den Ziel-Alpha-Wert nicht zu berücksichtigen, da er <em>immer </em>eins sein wird. Bei Oberflächen, die Sie selbst erstellen, ist das anders, denn Sie können eine Oberfläche mit einem beliebigen Alphawert zwischen null und eins versehen. Dies führt zu einigen interessanten Effekten, die im Gegensatz zu dem stehen, was die meisten Leute erwarten würden.</p>
  <p>Um dies zu veranschaulichen, werden wir uns das Zeichnen mit der Grundeinstellung <span class="inline">bm_normal</span> ansehen. Die meisten Leute denken, dass eine Fläche, die auf Alpha 0 gesetzt ist, und dann etwas mit einem Alpha-Wert von 0,5 gezeichnet wird, auch einen resultierenden Alpha-Wert von 0,5 ergibt... <strong>aber das ist nicht der Fall</strong> und ist etwas, das viele Leute für einen &quot;Bug&quot; in der Art und Weise halten, wie <span data-keyref="GameMaker Name">GameMaker</span> Dinge rendert. Wie du jedoch sehen wirst, ist es überhaupt kein Fehler!</p>
  <p>Nehmen wir an, Sie haben eine Fläche, bei der jedes Pixel Alpha 0 hat, und Sie zeichnen darauf einen Kreis mit Alpha 0,5, indem Sie den Mischmodus <span class="inline">bm_normal</span> verwenden. Die gesamte Oberfläche wird immer noch Alpha 0 sein, aber in dem Kreis wird das Alpha tatsächlich 0,25 sein, da:</p>
  <p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p>
  <p>Wenn Sie dann einen weiteren Kreis in den bestehenden Kreis zeichnen, ebenfalls mit einem Alpha-Wert von 0,5, dann wäre der Alpha-Wert außerhalb der Kreise 0, zwischen den Kreisen 0,25 und in dem kleineren Kreis 0,375:</p>
  <p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p>
  <p>Wenn Sie weiterhin eine Reihe von 0,5-Alpha-Kreisen auf eine Fläche mit 0-Alpha ziehen und diese Fläche dann in den Raum zeichnen, können Sie dies deutlich erkennen:</p>
  <p><img>Wenn Sie immer noch etwas verwirrt über Alpha sind, versuchen Sie sich vorzustellen, dass es sich um eine weitere Farbe handelt. Es verhält sich wie eine Farbe, und alle Berechnungen mit ihm werden auf ähnliche Weise durchgeführt. Es ist nur nicht wirklich sichtbar, obwohl der Effekt, den es auf andere Farben hat, es ist. Das bringt uns zum letzten Punkt, der bei der Verwendung von Flächen und Mischmodi (auch <span class="inline">bm_normal</span>) zu beachten ist...</p>
  <p>Selbst wenn der Alphawert der Oberfläche 0, <em><strong>die Farbkomponenten sind immer noch vorhanden und wirken sich auf alle Überblendungsvorgänge aus</strong></em>. Wenn Sie also auf eine Fläche mit einem Alpha-Wert von Null zeichnen, die (zum Beispiel) mit der Farbe Rot geleert wurde, werden die Quellfarben mit den Zielfarben gemischt und es entstehen andere Effekte, als Sie vielleicht denken. Das obige Bild wurde auf einer schwarzen Fläche mit schwarzem Hintergrund erstellt, aber wenn wir die Fläche auf Rot setzen, erhalten wir stattdessen dieses Bild:</p>
  <p><img>Ich hoffe, Sie können nun selbst herausfinden, warum dies geschieht, indem Sie die Formeln verwenden, die ich oben beschrieben habe, und die entsprechenden Zahlen für <span class="inline">bm_normal</span> anwenden.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
        <div style="float:right">Nächste: <a href="Error_Reporting.htm">Fehlerberichterstattung</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Blendmodes
Blending
Blend Modes
-->
  <!-- TAGS
using_blendmodes
-->
</body>
</html>