<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Leitfaden zur Verwendung von Partikeln</title>
    <meta name="generator" content="Adobe RoboHelp 2020" />
    <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
    <script src="../assets/scripts/main_script.js"></script>
    <meta name="rh-authors" content="Mark Alexander" />
    <meta name="topic-comment" content="Page that explains how to set up and use particles" />
    <meta name="rh-index-keywords" content="Guide To Using Particles" />
    <meta name="search-keywords" content="particles,particle guide,particle setup" />
  </head>
  <body><!--<div class="body-scroll" style="top: 150px;">-->
    <h1>Leitfaden zur Verwendung von Partikeln</h1>
    <p>Diese Anleitung ist für diejenigen unter euch, die verstehen wollen, wie man <strong>Partikel</strong> verwendet und erstellt. Diese Seite behandelt sowohl die <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">GameMaker Language-Funktionen</a> als auch die <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Particle_Actions.htm">GML Visual-Aktionen</a> für Partikel. Wenn du also noch nie Partikel benutzt hast, hoffen wir, dass diese Anleitung dir den Einstieg erleichtern kann, denn sie sind sehr nützlich und es macht Spaß, sie zu erstellen.</p>
    <p>Bevor wir weitermachen, sollten wir vielleicht erklären, was ein Partikel eigentlich ist... Grundsätzlich ist ein Partikel eine grafische Ressource, die bestimmte Eigenschaften hat, die durch ein <strong>Partikelsystem</strong> definiert sind. Diese Eigenschaften können nicht direkt für <em>einzelne </em>Partikel manipuliert werden, sondern werden kollektiv durch die <span class="notranslate">code</span> oder Aktionen geändert, die verwendet werden, um das System zu definieren, zu dem sie gehören. Sie sind sehr nützlich, um schöne und auffällige Effekte - oder subtile und diskrete - in einem Spiel zu erzeugen, ohne den CPU-Overhead, den die Verwendung von Instanzen mit sich bringt.</p>
    <p>Wir haben Partikelsysteme erwähnt, also lassen Sie uns erklären, was das ist, bevor wir fortfahren. Stellen Sie sich ein Partikelsystem wie einen Behälter vor, in dem Sie Ihre Partikel für den Einsatz bereithalten. Sie können <span class="notranslate">code</span> oder Aktionen verwenden, um den visuellen Aspekt der Partikel zu definieren, und dann werden sie in den &quot;Behälter&quot; (das Partikelsystem) gelegt, so dass Sie sie herausnehmen und verwenden können, wann und wo immer Sie sie später brauchen.</p>
    <p>Bevor man ein System einrichtet und Partikel erstellt, ist es wichtig, ein paar Dinge zu wissen... Erstens: Die meisten Partikelsysteme <span class="notranslate">code</span> werden <strong>nur einmal im Spiel aufgerufen</strong>, normalerweise in einer Art Controller-Objekt im ersten Raum oder Level - das ist nicht immer der Fall, aber der Einfachheit halber werden wir dieses Szenario für die folgende kurze Anleitung verwenden, da es die häufigste Art ist, Partikel zu verwenden. Ein einmal erstelltes Partikelsystem verbleibt im Speicher und ist jederzeit einsatzbereit. Wenn Sie es also mehr als einmal erstellen, kann es schnell den Speicherverbrauch erhöhen und zu ernsthaften Verzögerungen führen und sogar das Spiel zum Absturz bringen. Der Einfachheit halber wirst du in dieser Anleitung ein <strong>globales </strong>Partikelsystem erstellen, das von jeder Instanz im Spiel zu jeder Zeit verwendet werden kann.</p>
    <p> </p>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Erstellen eines Partikelsystems</a></p>
    <div class="droptext" data-targetname="drop-down">
      <p class="dropspot">Zu Beginn müssen Sie das Partikelsystem definieren und ihm einen Namen geben, damit Sie es verwenden können. Da es sich um ein globales System handelt, das von jedem Objekt verwendet werden kann, würde man dies in einem Controller-Objekt oder einer Initialisierungsfunktion tun, die zu Beginn des Spiels ausgeführt wird. Die <span class="notranslate">GML</span> würde wie folgt aussehen:</p>
      <p class="code">global.P_System = part_system_create_layer(&quot;Instance_Layer&quot;, false);</p>
      <p class="dropspot">Und mit <span class="notranslate">GML</span> Visual:</p>
      <p class="dropspot"><img>Beachten Sie, dass der angegebene Ebenenname eine gültige Ebene in dem Raum sein muss, in dem das System verwendet wird, da sonst keine Partikel sichtbar sind. Beachten Sie auch, dass wir das Flag &quot;persistent&quot; (sowohl in <span class="notranslate">code</span> als auch in <span class="notranslate">GML</span> Visual) auf false gesetzt haben. Ein persistentes Partikelsystem ist eines, das über mehrere Räume hinweg &quot;bestehen&quot; bleibt, ohne dass es für jeden Raum zerstört und neu erstellt werden muss. Um die Dinge in dieser Anleitung einfach zu halten, werden wir jedoch keine Persistenz verwenden.</p>
      <p class="dropspot">Damit ist das System geschaffen, aber was ist mit den Teilchen? Wir müssen sie auch definieren, sonst ist das System nutzlos und bringt nichts.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Definieren eines Partikeltyps</a></p>
    <div class="droptext" data-targetname="drop-down1">
      <p class="dropspot">Um ein Partikel in einem System zu verwenden, müssen Sie zunächst seine allgemeinen Eigenschaften definieren. Diese sind wie Objekteigenschaften, aber sie gelten nur <em>allgemein </em>für einzelne Partikel. Das bedeutet, dass, wenn Sie den Partikeln eine minimale Bewegungsgeschwindigkeit von 1 und eine maximale Bewegungsgeschwindigkeit von 2 zuweisen, alle vom System erzeugten Partikel eine zufällige Geschwindigkeit zwischen 1 und 2 Pixeln pro Schritt haben werden, und dass sie insgesamt eine durchschnittliche Geschwindigkeit von 1,5 haben werden. Benennen Sie Ihr erstes Partikel und fügen Sie es dem System hinzu, indem Sie das folgende <span class="notranslate">GML</span> in demselben Objekt verwenden, das Sie zum Erstellen des Systems verwendet haben:</p>
      <p class="code">global.Particle1 = part_type_create();</p>
      <p class="dropspot">Und für diejenigen unter Ihnen, die <span class="notranslate">GML</span> Visual verwenden:</p>
      <p class="dropspot"><img>Beachten Sie, dass wir bei <span class="notranslate">GML</span> Visual auch die Option " <strong>Überblenden </strong>" ankreuzen. Dies ermöglicht <strong>additive Blending</strong> für die Partikel, die wir ein wenig weiter unten diskutieren.</p>
      <p class="dropspot">Sie haben jetzt ein System und ein Partikel, das Sie darin einsetzen können, aber Sie sind noch nicht bereit, Ihre herausragenden Effekte zu erstellen! Du musst noch die Eigenschaften des Partikels definieren, d.h. wie er aussieht - seine Geschwindigkeit, seine Rotation, sein Alpha usw... Es gibt viele Details, die verwendet werden können, um einen Partikeleffekt zu definieren. Im Folgenden finden Sie einen Überblick über die wichtigsten Einstellungen und dann einen Ausschnitt aus <span class="notranslate">code</span> und <span class="notranslate">GML</span> Visual, der alle diese Einstellungen verwendet:</p>
      <ul class="dropspotlist">
        <li class="dropspot"><strong>Form</strong>: Die Form des Partikels ist die eingebaute <span class="notranslate">sprite</span>, die er verwenden wird, wobei die Voreinstellung die Konstante <span class="inline">pt_shape_pixel</span> ist. Es gibt auch eine Funktion zum Hinzufügen eines benutzerdefinierten Partikels, falls erforderlich - <a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particle_Types/part_type_sprite.htm"><span class="inline">part_type_sprite()</span></a> - oder die Aktion <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Particles/Set_Particle_Sprite.htm">Partikel-Sprite setzen</a>.</li>
        <li class="dropspot"><strong>Größe</strong>: Legt die Größenparameter für den Partikeltyp fest. Sie geben die minimale Startgröße, die maximale Startgröße und die Größenzunahme in jedem Schritt an (verwenden Sie eine negative Zahl für eine Verringerung der Größe). Dies ist ein skalarer Wert, der die x/y-Skala des Basisbildes gleichermaßen verändert.</li>
        <li class="dropspot"><strong>Farbe</strong>: Legt die Farbe für das Partikel fest, wenn eine einzige Farbe verwendet wird. Wenn zwei oder drei Farben angegeben werden, wird dies die Farbmischung sein, die sich während der Lebensdauer des Partikels von einer zur anderen mischt.</li>
        <li class="dropspot"><strong>alpha</strong>: Legt den Alphawert des Partikels zwischen 0 und 1 fest. Wird ein einzelner Wert angegeben, so ist dies der Alphawert des Partikels, werden zwei oder drei Werte angegeben, so mischt sich der Alphawert während der Lebensdauer des Partikels zwischen diesen Werten.</li>
        <li class="dropspot"><strong>speed</strong>: Legt die Geschwindigkeitseigenschaften für den Partikeltyp fest. Du gibst eine minimale und maximale Geschwindigkeit an und ein Zufallswert zwischen den angegebenen Grenzen wird gewählt, wenn der Partikel erstellt wird. Sie können eine Geschwindigkeitserhöhung in jedem Schritt angeben und sogar eine negative Zahl verwenden, um den Partikel zu verlangsamen (die Geschwindigkeit wird nie kleiner als 0).</li>
        <li class="dropspot"><strong>Richtung</strong>: Legt die Richtungseigenschaften für den Partikeltyp fest. Auch hier geben Sie einen Bereich von Richtungen an (in Grad gegen den Uhrzeigersinn - 0 bedeutet eine Bewegung nach rechts, 90 bedeutet eine Bewegung nach oben, usw...). Wenn sich das Partikel beispielsweise in eine zufällige Richtung bewegen soll, wählt man als Werte ein Minimum von 0 und ein Maximum von 360. Sie können auch einen Anstieg der Richtung für jeden Schritt angeben (kann auch negativ sein).</li>
        <li class="dropspot"><strong>Ausrichtung</strong>: Legt die Ausrichtungswinkeleigenschaften für den Partikeltyp fest. Sie geben den minimalen und maximalen Winkel sowie die Zunahme in jedem Schritt an. Sie können auch angeben, ob der angegebene Winkel relativ zur aktuellen Bewegungsrichtung oder absolut sein soll, z. B. indem Sie alle Werte auf 0, aber relativ auf true setzen, wird die Partikelausrichtung genau dem Pfad des Partikels folgen.</li>
        <li class="dropspot"><strong>Vermischung</strong>: Legt fest, ob für den Partikeltyp <strong>additives </strong>Blending oder <strong>normales </strong>Blending verwendet werden soll. Dies wird in einer Funktion festgelegt, wenn <span class="notranslate">GML</span> verwendet wird, und als Teil der Partikelinitialisierung, wenn <span class="notranslate">GML</span> Visual verwendet wird. Additives Überblenden bedeutet, dass die Partikel den Überblendungsmodus <span class="inline">bm_add</span> verwenden, was ihnen an den Stellen, an denen sie sich überlappen, ein &quot;leuchtendes&quot; Aussehen verleiht und sie auch mit allem überblendet, was darunter gezeichnet wird (<span class="notranslate">sprites</span>, Hintergründe, Kacheln, etc...) - sehr nützlich für Feuer- und Magieeffekte (zum Beispiel), aber am besten ausgeschaltet für etwas wie Rauch. Experimentieren Sie, um die Unterschiede zu sehen! Beachten Sie, dass die Aktivierung dieser Funktion das Textur-Batching bei der Erstellung von Partikeln unterbricht, so dass mehr Batches pro Schritt benötigt werden, um sie zu zeichnen - etwas, das man bedenken sollte, da es die Leistung beeinträchtigen kann, insbesondere auf mobilen Geräten.</li>
        <li class="dropspot"><strong>Leben</strong>: Legt die Lebensdauer in Schritten (Spielframes) für den Partikeltyp fest. Wie bei den vorherigen Einstellungen gibt es auch hier einen Minimal- und einen Maximalwert, und die Partikel bleiben innerhalb dieser Werte eine zufällige Anzahl von Schritten bestehen. Bei einer Lebensdauer von 30 min und 30 max wird das Partikel genau 30 Schritte lang existieren, bei einer Lebensdauer von 20 min und 60 max wird jedes Partikel eine zufällige Anzahl von Schritten zwischen 20 und 60 existieren.</li>
      </ul>
      <p class="dropspot">Bevor wir Ihnen die <span class="notranslate">code</span> zur Definition des Partikels vorstellen, lassen Sie uns kurz über &quot;<strong>wiggle</strong>&quot; sprechen... Ob du es glaubst oder nicht, &quot;wiggle&quot; ist eine Partikeleigenschaft und kann für viele der oben genannten Einstellungen individuell festgelegt werden. Wenn du &quot;wiggle&quot; als <span class="notranslate">argument</span> für eine Partikelfunktion oder -aktion siehst, bedeutet das, dass das Partikel &quot;wackelt&quot; oder zwischen den Minimal- und Maximalwerten für die Eigenschaft schwankt, wobei 1 für ein langsames Wackeln und 20 für ein sehr schnelles steht. Ein Partikel mit einer Mindestgeschwindigkeit von 2 und einer Höchstgeschwindigkeit von 5 und einem Wackelwert von 20 wird also während der Lebensdauer jedes erzeugten Partikels sehr schnell zwischen den Minimal- und Maximalgeschwindigkeiten oszillieren.</p>
      <p class="note"><strong>HINWEIS</strong>: Es gibt noch weitere kleinere Partikeleigenschaften, auf die wir hier nicht eingehen, um die Dinge für den Anfang so einfach wie möglich zu halten. Auf den entsprechenden Seiten finden Sie alle Details zu den Partikeleigenschaften.</p>
      <p class="dropspot">Schauen wir uns nun <span class="notranslate">code</span> an, das ein Teilchen definiert:</p>
      <p class="code">// This defines the particle&#39;s shape
        <br/>
        part_type_shape(global.Particle1,pt_shape_pixel);
        <br/>
        <br/>
        // This is for the size
        <br/>
        part_type_size(global.Particle1,1,1,0,2);
        <br/>
        <br/>
        // This sets its colour. There are three different codes for this
        <br/>
        part_type_color1(global.Particle1,c_white);
        <br/>
        <br/>
        // This is its alpha. There are three different codes for this
        <br/>
        part_type_alpha1(global.Particle1,1);
        <br/>
        <br/>
        // The particles speed
        <br/>
        part_type_speed(global.Particle1,0.50,2,-0.10,0);
        <br/>
        <br/>
        // The direction
        <br/>
        part_type_direction(global.Particle1,0,359,0,20);
        <br/>
        <br/>
        // This changes the rotation of the particle
        <br/>
        part_type_orientation(global.Particle1,0,0,0,0,true);
        <br/>
        <br/>
        // This is the blend mode, either additive or normal
        <br/>
        part_type_blend(global.Particle1,1);
        <br/>
        <br/>
        // This is its lifespan in steps
        <br/>
        part_type_life(global.Particle1,5,30); </p>
      <p class="dropspot">Um dieselbe Partikeldefinition in <span class="notranslate">GML</span> Visual zu erstellen, benötigen wir diese Aktionen:</p>
      <p class="dropspot"><img>Das war's also! Wir haben jetzt unsere Partikel definiert und sie sind bereit, verwendet zu werden.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Partikel direkt im Spiel erstellen</a></p>
    <div class="droptext" data-targetname="drop-down2">
      <p class="dropspot">Es gibt mehrere Möglichkeiten, Partikel zu erstellen, und jede hat ihre Vor- und Nachteile. Sie können <strong>Emitter</strong> verwenden, um Partikel <strong>platzen </strong>oder <strong>strömen </strong>zu lassen, oder Sie können Partikel <strong>direkt </strong>an einem Punkt erstellen. Welche Methode Sie verwenden, hängt davon ab, was Sie erreichen wollen und welchen Effekt Sie erzielen möchten. Wir beginnen jedoch mit der einfachsten Methode, nämlich der direkten Erstellung von Partikeln. In <span class="notranslate">GML</span> würden wir die folgende Funktion verwenden:</p>
      <p class="code">part_particles_create(global.P_System, x, y, global.Particle1, 10);</p>
      <p class="dropspot">und in <span class="notranslate">GML</span> Visual wäre es:</p>
      <p class="dropspot"><img>Der obige Code/die obige Aktion wird 10 Partikel an den angegebenen x/y-Koordinaten vom Typ &quot;Partikel1&quot; aus unserem globalen System erzeugen. Ganz einfach! Das Großartige an dieser Codezeile/Aktion ist, dass sie überall ohne viel Aufhebens verwendet werden kann. Wenn du sie zum Beispiel in das <strong>globale "Left Pressed"-Ereignis</strong> für die Maus in einem Objekt einfügst und die x/y-Werte für die mouse_x/y-Position änderst, werden jedes Mal, wenn du die Taste drückst, Partikel an der Mausposition erzeugt. Oder wenn du eine Rakete hast, dann könntest du dies in das Step-Ereignis setzen und bei jedem Schritt Rauchpartikel kommen lassen (obwohl 1 oder 2 wahrscheinlich besser wären als 10!). Du kannst sogar Partikel über einen Bereich erzeugen lassen, indem du zum Beispiel die x/y-Koordinaten zufällig änderst:</p>
      <p class="code">repeat(50)
        <br/>
        {
        <br/>
        var xx = x + 20 - random(40);
        <br/>
        var yy = y + 20 - random(40);
        <br/>
        part_particles_create(global.P_System, xx, yy, global.Particle1, 1);
        <br/>
        }</p>
      <p class="dropspot"><img>Die obige <span class="notranslate">code</span> wird 50 Partikel an einer zufälligen Position innerhalb eines quadratischen Bereichs von 40px erzeugen.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Partikel mit Emittern erzeugen</a></p>
    <div class="droptext" data-targetname="drop-down3">
      <p class="dropspot">Nachdem wir den einfachen Weg zur Erstellung von Partikeln erklärt haben, wollen wir nun den etwas komplexeren Weg gehen, nämlich die Verwendung von <strong>Emittern</strong>. Emitter sind ein weiterer Teil des Partikelsystems, der vor der Verwendung definiert werden muss, also erstellen wir einen globalen Emitter auf die gleiche Weise wie für das System und die Partikel. Wir müssen auch entscheiden, ob wir einen statischen (sich nicht bewegenden) Emitter haben wollen oder nicht und ob wir die Partikel <strong>platzen lassen </strong>oder <strong>streamen </strong>wollen, sowie entscheiden, über welchen Bereich und welche Art der Verteilung wir den Emitter verwenden wollen.</p>
      <p class="dropspot">Was bedeutet das alles? Nun, ein <strong>statischer </strong>Emitter ist ein Emitter, den man einmal definieren und dann vergessen kann, da er sich für die Dauer des Spiels nirgendwo hinbewegt, d.h.: Denken Sie an ein Holzfeuer - es bewegt sich nicht, es gibt nur Flammen ab und ist daher statisch, aber ein Feuerball würde einen <strong>dynamischen</strong> Emitter erfordern und sich über den Bildschirm bewegen. Ein Ausbruch ist eine einmalige Explosion von Partikeln, während ein Strom genau das ist - ein konstanter Strom von Partikeln bei jedem Schritt. Was die Fläche und die Verteilung anbelangt, so können Sie bei Emittern eine Fläche für die Emission von Partikeln (Rechteck, Ellipse, Raute oder Linie) sowie eine Verteilungskurve (Gauß, inverser Gauß oder linear) festlegen.</p>
      <p class="dropspot">Die folgenden Bilder veranschaulichen die verschiedenen Arten von Flächenformen, die für Emitter zur Verfügung stehen:</p>
      <p class="dropspot"> </p>
      <center><img alt="Create Particle System" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_CreateSystem.png"/> <img alt="Create Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Type.png"/></center>
      <center><img alt="Define Particle Type" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Define_Particle.png"/> <img alt="Create Particles At A Position" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Burst.png"/></center>
      <p class="dropspot">
        <br>
        Und die Verteilungskurven (linear, gaußförmig und invers gaußförmig) sind hier abgebildet:</p>
      <p><img alt="Create Particles Over A Random Area" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Particles_DnD_Create_Particles.png"/></p>
      <p class="dropspot">Nachfolgend ein Beispiel für den Code/die Aktionen, die erforderlich sind, um zwei Emitter zu definieren, die normalerweise im <strong>Create-Ereignis</strong> eines Controller-Objekts, direkt nach der Definition des Partikelsystems, auftreten würden. Einer wird statisch sein und Partikel über den gesamten Raum verteilen, während der andere dynamisch sein wird und der Maus folgt und alle 30 Schritte aus einer kleinen Ellipse ausbricht:</p>
      <p> </p>
      <p class="code">global.Particle1_Emitter1 = part_emitter_create(global.P_System);
        <br/>
        global.Particle1_Emitter2 = part_emitter_create(global.P_System);
        <br/>
        <br/>
        // Set up the area that will emit particles
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);
        <br/>
        part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x-10, mouse_x+10, mouse_y-10, mouse_y+10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        <br/>
        // Set the first to stream 10 particles every step
        <br/>
        part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10);
        <br/>
        <br/>
        // This can now be forgotten as it will function until told to stop...
        <br/>
        // Set the alarm[0] event to burst the emitter2 particles...
        <br/>
        alarm[0] = 30; </p>
      <p class="dropspot"><img>Hier erstellen wir also zwei Partikelemitter, die dem eingangs erstellten Partikelsystem zugewiesen werden. Die Funktionen/Aktionen zur Erstellung dieser Emitter erlauben es uns, einen Bereich im Raum zu definieren, über den sie Partikel emittieren werden, sowie den Partikeltyp, der emittiert werden soll, und die Form und Verteilung, die innerhalb des definierten Bereichs verwendet werden soll. Die Funktionen/Aktionen geben einen numerischen Wert zurück, der die Emitter-ID darstellt, und wir speichern diesen in einer Variablen, so dass wir weitere Emitter-Funktionen verwenden können, um diese Emitter anzuvisieren.</p>
      <p class="dropspot">Jetzt haben wir Code/GML Visual, um Partikel zu streamen (diese Partikel werden bei jedem Spielschritt emittiert, ohne dass wir etwas anderes tun müssen), aber wir wollen auch ein<strong>Alarm[0]</strong> <strong>-Ereignis</strong> hinzufügen, um Partikel in bestimmten Intervallen platzen zu lassen:</p>
      <p class="code">part_emitter_region(global.P_System, global.Particle1_Emitter2, mouse_x - 10, mouse_x + 10, mouse_y - 10, mouse_y + 10, ps_shape_ellipse, ps_distr_gaussian);
        <br/>
        part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30);
        <br/>
        alarm[0] = 30;</p>
      <p class="dropspot"><img>Ein Partikelburst ist einfach eine einmalige Explosion von Partikeln aus dem Emitter, anstatt eines konstanten Stroms von Partikeln bei jedem Spielschritt.</p>
      <p class="dropspot">Was aber, wenn mehrere Objekte Partikel aussenden sollen? Ein globaler Emitter kann immer nur an einer Stelle sein, also müssen Sie in jedem Objekt <em>lokale Emitter </em>erstellen. Diese Emitter verwenden immer noch das globale Partikelsystem und alle darin enthaltenen Partikel, aber sie können unterschiedliche Formen und Größen haben und sich mit dem Objekt bewegen, was sie ideal für Raketen, Kugeln oder ähnliches macht. Die <span class="notranslate">code</span>, die Sie verwenden würden, ist genau die gleiche wie oben, aber ohne das Präfix &quot;global&quot; vor den Emitter-Namen.</p>
      <p class="dropspot">Damit ist die Erstellung von Partikeln erledigt, aber es gibt noch eine weitere sehr wichtige Sache... Das Aufräumen, wenn man mit ihnen fertig ist.</p>
      <p class="dropspot"> </p>
    </div>
    <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Aufräumen</a></p>
    <div class="droptext" data-targetname="drop-down4">
      <p class="dropspot">Wie eingangs erwähnt, wird ein einmal erstelltes Partikelsystem (und seine Partikel, Emitter usw.) zur sofortigen Verwendung im Speicher abgelegt. Toll, aber was passiert, wenn man das Spiel neu startet? Oder wenn dein Spieler stirbt und den Raum neu startet? Nun, wenn man das Spiel nicht richtig verwaltet, entsteht ein <strong>Speicherleck</strong>. Das ist der Fall, wenn etwas erstellt wurde und Speicher verbraucht, aber &quot;de-referenziert&quot; wurde, was bedeutet, dass <span class="notranslate">GameMaker</span> keinen Zugriff mehr darauf hat. So etwas frisst langsam den Speicher auf und verursacht Verzögerungen im Spiel oder blockiert sogar den Computer, was zum Absturz des Spiels führt.</p>
      <p class="dropspot">Wie kann man das vermeiden? Nun, <span data-keyref="GameMaker Name">GameMaker</span> verfügt über <span class="notranslate">GML</span> <span class="notranslate">Code</span> Funktionen und <span class="notranslate">GML</span> Visual-Aktionen, um Partikelsysteme und deren Emitter und Partikel aus dem Speicher zu löschen, wenn sie nicht verwendet werden, und mit ein wenig Planung bei der Verwendung des folgenden Codes/der folgenden Aktionen können Sie dieses potenzielle Problem leicht vermeiden.</p>
      <p class="dropspot">Als Erstes müssen Sie entscheiden, wo Sie das System erstellen und wie Sie es verwenden wollen. Du könntest ein globales System im <strong>Spielstart-Ereignis</strong> eines Objekts erstellen, das sich in deinem ersten Raum befindet (wie ein Menü oder ein Titelbildschirm), aber das bedeutet, dass es bei einem Neustart des Spiels mit der <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_restart.htm"><span class="inline">game_restart()</span></a> Funktion starten, wird es neu erstellt und verursacht ein Speicherleck. Oder du könntest ein lokales System in einer Instanz in einem beliebigen Raum erstellen, aber auch hier gilt: Wenn du den Raum verlässt, ist das System unzugänglich und verursacht ein Speicherleck. Um dies zu vermeiden, müssten Sie etwas wie dieses in der <a href="../The_Asset_Editors/Object_Properties/Other_Events.htm"><strong>Spielende Veranstaltung</strong></a> oder der <a href="../The_Asset_Editors/Object_Properties/Object_Events.htm"><strong>Aufräum-Ereignis</strong></a> deines Objekts:</p>
      <p class="code">part_type_destroy(global.Particle1);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle1_Emitter);
        <br/>
        part_emitter_destroy(global.P_System, global.Particle2_Emitter);
        <br/>
        part_system_destroy(global.P_System);</p>
      <p class="dropspot"><img>Dadurch werden die definierten Partikel, Emitter und dann das System aus dem Speicher entfernt, so dass Sie das Spiel neu starten oder den Raum wechseln können. Denken Sie daran, dass Sie, nachdem Sie sich überlegt haben, wo der geeignetste Ort zum Erstellen des Systems ist, auch überlegen sollten, wo der geeignetste Ort zum Zerstören des Systems ist!</p>
      <p class="dropspot"> </p>
    </div>
    <p> </p>
    <p>Jetzt kennst du die Grundlagen über Partikel, Partikelsysteme und Emitter und kannst sie in dein Spiel einbauen! Aber bevor Sie losstürmen und alles mit Partikeleffekten versehen, beachten Sie bitte, dass Partikel zwar weniger rechenintensiv sind als Instanzen, aber auch nicht die Lösung für alles sind, da sie bei Tausenden von Partikeln gleichzeitig Lag verursachen. Am besten ist es, mit ihnen zu experimentieren und sie vorsichtig einzusetzen, um ein Spiel optisch aufzupeppen und ihm ein bisschen mehr Augenschmaus zu verleihen, ohne es zu übertreiben.</p>
    <p> </p>
    <p> </p>
    <div class="footer">
      <div class="buttons">
        <div class="clear">
          <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
          <div style="float:right">Nächste: <a href="Guide_To_Using_Shaders.htm">Anleitung zur Verwendung von Shadern</a></div>
        </div>
      </div>
      <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
    </div>
    <!-- KEYWORDS
Vectors
Vector Maths
--><!-- TAGS
vector_maths
--></body>
</html>