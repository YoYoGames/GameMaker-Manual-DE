<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Vektoren</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how vectors work" />
  <meta name="rh-index-keywords" content="Vectors" />
  <meta name="search-keywords" content="Vectors,vector maths" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Vektoren</h1>
  <p>Wenn Sie ein Spiel beliebiger Komplexität entwickeln, werden Sie wahrscheinlich irgendwann mit <strong>Vektoren</strong> zu tun haben. Sie werden in der Physik, in der KI, in der Trigonometrie und in vielen anderen Situationen verwendet, aber was ist ein <span class="notranslate">vector</span>? Nun, um es einfach auszudrücken, ist ein <span class="notranslate">vector</span> eine <em>gerichtete Menge</em>. Betrachten wir zunächst eine eindimensionale <span class="notranslate">vector</span> - was einer einzelnen Zahl entspricht - indem wir eine nummerierte Linie mit einem Pfeil zeichnen, der bei Null beginnt und bei 5 endet. Dies ist die <span class="notranslate">vector</span> &quot;a&quot;, die gleich 5 ist, und wenn wir einen weiteren Pfeil zeichnen, der bei der 5 beginnt und bei der 8 endet, haben wir <span class="notranslate">vector</span> &quot;b&quot;, die gleich 3 ist:</p>
  <p><img>Sie sollten wissen, dass es keine Rolle spielt, wo eine <span class="notranslate">vector</span> beginnt, wichtig ist nur, wie lang sie ist und in welche Richtung sie geht. <span class="notranslate">vector</span> &quot;b&quot; beginnt also bei 5, ist 3 Einheiten lang und zeigt nach &quot;rechts&quot;, ist also identisch mit einem <span class="notranslate">vector</span>, das bei 0 beginnt und bis 3 geht. Nun können Sie diese <span class="notranslate">vectors</span> auch addieren, indem Sie die beiden <span class="notranslate">vectors</span> &quot;a&quot; und &quot;b&quot; aneinanderlegen, um das <span class="notranslate">vector</span> &quot;c&quot; zu erhalten, das gleich 8 ist. Was ist mit negativen Zahlen? Nun, wenn in der obigen Abbildung ein <span class="notranslate">vector</span>, das nach &quot;rechts&quot; zeigt, einer positiven Zahl entspricht, können Sie sehen, dass ein <span class="notranslate">vector</span>, das nach &quot;links&quot; zeigt, einer negativen Zahl entsprechen würde, so dass eine eindimensionale <span class="notranslate">vector</span> nichts anderes als eine Zahl mit Vorzeichen (+/-) ist. Dies erklärt das wesentliche Konzept eines Vektors: nur <em>Länge</em> und <em>Richtung</em> (&quot;links&quot; oder &quot;rechts&quot; in diesem Fall) zählen, nicht die Position.</p>
  <p>Wie sieht es also mit 2-dimensionalen <span class="notranslate">vectors</span> aus? Nun, wir können uns vorstellen, dass sie nicht nur aus &quot;links&quot; und &quot;rechts&quot; bestehen, sondern auch aus &quot;oben&quot; und &quot;unten&quot;:</p>
  <p><img>Diese sind noch nicht wirklich <span class="notranslate">vectors</span>, da wir sie noch anhand ihrer Start- und Endkoordinaten reduzieren müssen. Wenn wir uns <span class="notranslate">vector</span> &quot;a&quot; ansehen, sehen wir, dass es eine Startkoordinate von [2,2] und eine Endkoordinate von [4,3] hat. Um <span class="notranslate">vector</span> zu erhalten, müssen wir es reduzieren, indem wir die Endkoordinaten von den Startkoordinaten subtrahieren, wie folgt:</p>
  <p class="code">a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]</p>
  <p>Dasselbe gilt nun für <span class="notranslate">vector</span> b:</p>
  <p class="code">b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]</p>
  <p>Fällt Ihnen etwas auf? Diese beiden <span class="notranslate">vectors</span> sind identisch! Dies ist ein weiterer Beweis dafür, dass <span class="notranslate">vector</span> keine Position hat, sondern nur Richtung und Länge, und wir können diese <span class="notranslate">vectors</span> relativ zueinander um eine lokale [0,0]-Achse zeichnen:</p>
  <p><img>Das bedeutet, dass eine 2D <span class="notranslate">vector</span> durch zwei Werte definiert ist, eine &quot;x&quot;- und eine &quot;y&quot;-Position relativ zur lokalen [0,0]-Achse. Und was ist mit 3D <span class="notranslate">vectors</span>? Nun, sie haben mit der zusätzlichen Dimension der &quot;Tiefe&quot; zu kämpfen und würden als Positionen &quot;x&quot;, &quot;y&quot; und &quot;z&quot; um eine lokale Achse etwa so berechnet werden:</p>
  <p><img>Ein gutes Beispiel für eine <span class="notranslate">vector</span>, die in <span data-keyref="GameMaker Name">GameMaker</span> verwendet wird, ist die physikalische <strong>Schwerkrafteigenschaft</strong> im Raumeditor. Die Schwerkraft wird als <span class="notranslate">vector</span> um eine [0,0]-Position berechnet. Wenn Sie also die Schwerkraft als [x0, y10] definieren, würde die Schwerkraft mit einer Kraft von 10 <em>nach unten</em> wirken.</p>
  <p>Normalerweise kann <span class="notranslate">vectors</span> in vielen Situationen verwendet werden, aber manchmal möchte man ihren Wert einschränken (z. B. beim Umgang mit Winkeln), weshalb wir sie <strong>normalisieren </strong>. Dies ist im Wesentlichen ein mathematischer Trick, der verwendet wird, um eine <span class="notranslate">vector</span> der Länge <em>n</em> in eine <span class="notranslate">vector</span> der Länge 1 umzuwandeln, was bedeutet, dass die Komponenten von <span class="notranslate">vector</span> auf einen Wert zwischen 0 und 1 <em>normalisiert </em>werden. Diese <span class="notranslate">vectors</span> werden auch <strong>Einheitsvektoren</strong> genannt:</p>
  <p><img>Um ein normalisiertes <span class="notranslate">vector</span> zu berechnen, müssen wir zunächst die ursprünglichen <span class="notranslate">vector</span> Komponenten haben, dann verwenden wir sie, um die Länge des <span class="notranslate">vector</span> zu erhalten. Dann teilen wir jede der <span class="notranslate">vector</span> Komponenten durch diese Länge, um die normalisierten <span class="notranslate">vector</span> Komponenten zu erhalten, die das normalisierte <span class="notranslate">vector</span> bilden, bei dem die <strong>Summe der Quadrate aller Koordinaten gleich 1 ist</strong>. So geht es:</p>
  <p><img>Zuerst nehmen wir die Koordinaten der <span class="notranslate">vector</span> und erhalten die Komponenten:</p>
  <p class="code">vx = (x2 - x1) = (7 - 1) = 6<br />
    vy = (y2 - y1) = (4 - 1) = 3</p>
  <p>Anhand dieser Werte wird dann die Länge des Vektors berechnet:</p>
  <p class="code">len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6.708203932499369</p>
  <p>Damit haben wir die exakte Länge von <span class="notranslate">vector</span> &quot;a&quot; und können damit die beiden Komponenten <span class="notranslate">vector</span> <span class="inline">vx</span> und <span class="inline">vy</span> normalisieren:</p>
  <p class="code">vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159<br />
    vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579</p>
  <p>Großartig! Wir haben jetzt die Komponenten der <span class="notranslate">vector</span> normalisiert! Aber was nützt uns das im Zusammenhang mit <span data-keyref="GameMaker Name">GameMaker</span> in der Praxis? Okay, geben wir dir ein praktisches Beispiel...</p>
  <p>Angenommen, Sie haben ein Spiel, in dem der Spieler auf einen Feind schießen muss, und Sie müssen wissen, wie weit sich das Geschossobjekt bei jedem Schritt entlang der X- und Y-Achse bewegen muss, um es zu treffen:</p>
  <p><img>Dazu würden Sie die Spieler- und Feindkoordinaten verwenden, um die <span class="notranslate">vector</span> Komponenten und die Länge zu erhalten, dann würden Sie sie normalisieren, um einen Wert zwischen 0 und 1 zu erhalten, den Sie schließlich mit der Geschwindigkeit multiplizieren würden, die das Geschoss bei jedem Schritt erreichen soll. Diese beiden Werte werden gespeichert und bei jedem Schritt zu den Startkoordinaten x und y addiert. Klingt kompliziert? Ist es auch nicht (die Werte wurden der Einfachheit halber auf eine Dezimalstelle gerundet):</p>
  <p class="code">px = 100;<br />
    py = 425;<br />
    ex = 356;<br />
    ey = 83;<br />
    bullet_speed = 5;<br />
    <br />
    vx = (ex - px); // = 256<br />
    vy = (ey - py); // = -342<br />
    <br />
    len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2<br />
    <br />
    vx = vx / len; // = 0.6<br />
    vy = vy / len; // = 0.8<br />
    <br />
    speed_x = vx * bullet_speed; // = 3<br />
    speed_y = vy * bullet_speed; // = 4
  </p>
  <p>Um das Ziel zu treffen, müssen wir also bei jedem Schritt 3 zur x-Koordinate des Geschosses und 4 zu seiner y-Koordinate addieren.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
        <div style="float:right">Nächste: <a href="Guide_To_Using_Buffers.htm">Leitfaden zur Verwendung von Puffern</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Vectors
Vector Maths
-->
  <!-- TAGS
vector_maths
-->
</body>
</html>