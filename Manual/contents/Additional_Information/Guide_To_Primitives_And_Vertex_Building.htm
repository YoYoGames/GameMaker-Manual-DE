<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Leitfaden für Primitive und Vertex Building</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Leitfaden für Primitive und Vertex Building</h1>
  <p>In diesem Handbuch wird kurz beschrieben, wie man <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitive</a> mit benutzerdefinierten <strong>Vertex-Formaten</strong> und <strong>Vertex-Puffern</strong> erstellt und verwendet. </p>
  <p>Wenn Sie anfangen, mit 3D, Spezialeffekten, komplexen Zeichenprozessen oder Shadern zu arbeiten, brauchen Sie sich im Allgemeinen nicht allzu viele Gedanken über das verwendete Vertex-Format zu machen, da <span data-keyref="GameMaker Name">GameMaker</span> die <a class="glossterm" data-glossterm="Scheitelpunkt" href="#">Vertex-Daten</a> automatisch für Sie einrichtet und weiterleitet. Manchmal ist es jedoch notwendig, eigene Vertexdaten zu erstellen und diese entsprechend zu formatieren, vor allem wenn man die Geschwindigkeit erhöhen oder zusätzliche Informationen übergeben möchte. Das Standard-Vertex-Format umfasst beispielsweise eine x-, y-, z-3D-Position, eine Farbe (mit Alpha) und UV-Texturkoordinaten, die, wenn Sie sie selbst erstellen würden, etwa so aussehen würden:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Wenn Sie jedoch (z. B.) nur einen Shader verwenden, um die Position des Scheitelpunkts zu manipulieren, besteht keine Notwendigkeit, Farb- oder Texturdaten weiterzugeben. In diesem Fall würden Sie Ihr eigenes Format wie folgt erstellen:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    my_format = vertex_format_end();</p>
  <p>Insgesamt gibt es fünf verschiedene Scheitelpunktattribute, die Sie bei der Definition eines Scheitelpunktformats verwenden können:</p>
  <ul class="colour">
    <li>Farbe</li>
    <li>Normal</li>
    <li>Position</li>
    <li>3D-Position</li>
    <li>Textur-Koordinate</li>
  </ul>
  <p>Im Allgemeinen müssen Sie <em>immer</em> Position oder 3D-Position als Teil des Formats angeben, aber alle anderen Angaben sind optional.</p>
  <p>Beachten Sie, dass nach der Erstellung Ihres Scheitelpunktformats die Reihenfolge, in der Sie die Scheitelpunktattribute definiert haben, bei der Erstellung Ihrer <strong>Primitive</strong> <i>beachtet werden muss</i>. Wenn Sie also ein Scheitelpunktformat als Position, Farbe und Texturkoordinate definiert haben, <b> <i>müssen</i></b> Sie diese Attribute dem Primitiv in der gleichen Reihenfolge hinzufügen, sonst erhalten Sie einen Fehler. Beachten Sie auch, dass ein Scheitelpunktformat wie jede andere dynamische Ressource Speicher benötigt und daher mit der Funktion<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><span class="inline">vertex_format_delete()</span></a>.</p>
  <p>Alle Primitive, die Sie erstellen, werden in einem <b>Vertex-Puffer</b> gespeichert. Dieser muss zuvor erstellt werden und wird dann von den Funktionen referenziert, die zur Erstellung Ihres Primitivs verwendet werden. Der Scheitelpunktpuffer <span class="notranslate">buffer</span> kann so oft wie nötig wiederverwendet werden, um verschiedene Primitive zu erstellen, oder er kann &quot;eingefroren&quot; werden, um einen bestimmten Primitivtyp für die Dauer Ihres Spiels oder Levels beizubehalten (was die schnellste Methode ist, wenn Sie also wissen, dass sich ein Primitiv, das Sie erstellen, nicht ändern wird, sollten Sie immer diese Option verwenden).</p>
  <p>Ein Beispiel für die Erstellung eines einzelnen Dreiecksprimitivs ist im folgenden Code dargestellt:</p>
  <p class="code">// CREATE EVENT<br />
    v_buff = vertex_create_buffer();<br />
    vertex_begin(v_buff, global.my_format);<br />
    vertex_position(v_buff, 10, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 0, 0);<br />
    vertex_position(v_buff, 110, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 0);<br />
    vertex_position(v_buff, 110, 110);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 1);<br />
    vertex_end(v_buff);</p>
  <p class="code_heading">Draw Event</p>
  <p class="code"><br />
    var tex = sprite_get_texture(spr_Background, 0);<br />
    shader_set(shd_shimmer);<br />
    vertex_submit(v_buff, pr_trianglelist, tex);<br />
    shader_reset();
  </p>
  <p>Hier haben wir zuerst unseren Scheitelpunkt <span class="notranslate">buffer</span> im Create Event der Instanz erstellt, dann beginnen wir mit der Definition der verschiedenen Scheitelpunkte, aus denen unser Dreiecksprimitiv besteht, und geben die Position, die Farbe und die Textur-UV-Koordinate für jeden der drei Punkte an, die wir verwenden wollen. Wir beenden dann die Scheitelpunktdefinition und wissen, dass der Scheitelpunkt <span class="notranslate">buffer</span> mit diesen Scheiteldaten in der Variablen &quot;v_buff&quot; gespeichert ist.  </p>
  <p class="note"><strong>HINWEIS</strong>: Wenn der Inhalt von <span class="notranslate">buffer</span> ständig aktualisiert werden soll, würde <span class="notranslate">buffer</span> erstellt, mit den Vertex-Daten versehen und dann wieder zerstört werden - nachdem es gezeichnet wurde - alles im selben Schritt.</p>
  <p>Wir zeichnen dann den Inhalt des Vertex <span class="notranslate">buffer</span> im Draw Event mit einem Shader. Dies ist ein sehr einfaches Beispiel und entspricht im Wesentlichen der internen Arbeitsweise von <span data-keyref="GameMaker Name">GameMaker</span>, d. h.: Wenn Sie ein <span class="notranslate">sprite</span> zeichnen, erstellt <span class="notranslate">GameMaker</span> einen Scheitelpunkt <span class="notranslate">buffer</span> mit vier Scheitelpunkten, die zwei Dreiecke bilden (die ein Quadrat ergeben, auch &quot;Quad&quot; genannt), und texturiert diese beiden Dreiecke mit dem Bild <span class="notranslate">sprite</span>. Wenn wir dieses <span class="notranslate">sprite</span> zeichnen, übermitteln wir den Scheitelpunkt <span class="notranslate">buffer</span> und sein Inhalt wird auf den Bildschirm gezeichnet.</p>
  <p>Sie werden feststellen, dass wir einen primitiven Typ angeben, wenn wir den Scheitelpunkt <span class="notranslate">buffer</span> zum Zeichnen einreichen. Der Typ des Primitivs, den Sie verwenden, kann ein Punkt, eine Linienliste oder -leiste oder eine Dreiecksliste oder -leiste sein, aber Dreiecksfächer sind <i>nicht</i> erlaubt, da die meisten mobilen Geräte diesen Primitivtyp nicht akzeptieren. Vergessen Sie nicht, Ihren Scheitelpunkt <span class="notranslate">buffer</span> richtig für den Typ des Primitivs zu formatieren, das zum Zeichnen verwendet werden soll. Wenn Sie zum Beispiel ein Primitiv mit zwei Dreiecken als Dreiecksliste zeichnen, benötigen Sie 6 Punkte, als Dreiecksstreifen jedoch nur 4 Punkte. Welchen Typ Sie verwenden, ist Ihnen überlassen und hängt davon ab, was Sie zeichnen möchten und welchen Effekt Sie erzielen wollen.</p>
  <p>Ein letzter wichtiger Punkt, den Sie beachten sollten, wenn Sie Ihre eigenen Vertexe <span class="notranslate">buffers</span> auf diese Weise verwenden, ist die Auswirkung auf die Vertex-Batches, die an die GPU gesendet werden. Wenn Sie einen Scheitelpunkt <span class="notranslate">buffer</span> erstellen, erstellen Sie die unterste Ebene der Grafikdaten. Wenn Sie also zeichnen, ist alles, was passiert, dass <span data-keyref="GameMaker Name">GameMaker</span> Ihre <span class="notranslate">buffer</span> direkt an die Grafikkarte sendet. Aus diesem Grund müssen Sie, wenn Sie eine bessere Stapelverarbeitung wünschen, selbst dafür sorgen, dass die Dinge, die Sie stapeln wollen, im selben <span class="notranslate">buffer</span> gespeichert werden.</p>
  <p>Wie bereits oben erwähnt, werden Scheitelpunktformate aus den folgenden 5 Attributtypen zusammengesetzt (die über die entsprechende Funktion <span class="inline">vertex_format_add_*</span> hinzugefügt werden):</p>
  <ul class="colour">
    <li>Farbe</li>
    <li>Normal</li>
    <li>Position</li>
    <li>3D-Position</li>
    <li>Textur-Koordinate</li>
  </ul>
  <p>Im GLSL ES-Shader werden diese Arten anhand der folgenden 4 Attribute erkannt:</p>
  <ul class="colour">
    <li>Farbe</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Textur-Koordinate</li>
  </ul>
  <p>Dies mag seltsam erscheinen, da es scheint, dass wir in unserem Vertex-Format mehr Attributarten angeben können als im Vertex-Shader. Im Shader werden <i>Position</i> und <i>3D-Position</i> jedoch als <em>dasselbe </em>Attribut behandelt, mit der Ausnahme, dass für <i>Position</i> nur &quot;x&quot;- und &quot;y&quot;-Koordinaten erwartet werden, während <i>3D-Position</i> &quot;x&quot;-, &quot;y&quot;- und &quot;z&quot;-Koordinaten hat. Wie ordnen Sie also das Vertex-Format der Definition von Attributen in Ihrem Shader zu? Schauen wir uns zunächst einen typischen Satz von Attributen aus dem Standard-Shader an:</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position;        // (x,y,z)<br />
    //attribute vec3 in_Normal;        // (x,y,z) unused in this shader.<br />
    attribute vec4 in_Colour;          // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;    // (u,v)</p>
  <p>Und hier ist ein Teil von <span class="notranslate">code</span>, der ein Vertex-Format einrichtet, das mit diesem Shader kompatibel ist:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Wie wird nun das Shader-Attribut mit dem Vertex-Format-Typ verknüpft? Es basiert einfach auf der Namenskonvention:</p>
  <ul class="colour">
    <li><span class="inline">&quot;in_Position&quot;</span> Karten zu <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm">vertex_format_add_position</a>/<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm">_3d()</a></span></li>
    <li><span class="inline">&quot;in_Colour&quot;</span> Karten zu <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"><span class="inline">vertex_format_add_colour()</span></a></li>
    <li><span class="inline">&quot;in_TextureCoord&quot;</span> Karten zu <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"><span class="inline">vertex_format_add_texcoord()</span></a></li>
  </ul>
  <p><span class="inline"><span class="inline"><span class="inline"></span> Schwieriger wird es, wenn Sie mehrere Attribute der gleichen Art haben, aber die Dinge basieren immer noch auf der gleichen Namenskonvention. Wir werden uns jetzt mit der Angabe zusätzlicher <b>Farb-</b> und <b>Texturkoordinaten</b> befassen, da es im Shader- oder Vertex-Format nur <b>ein</b> Positions- und <b>ein</b> Normal-Attribut geben kann, aber mehrere Farb- oder Textur-Attribute <em>möglich sind</em>.</p>
  <p>Wenn Sie Ihrem Shader zusätzliche Farbattribute hinzufügen, muss am Ende des Shader-Attributs eine Zahl hinzugefügt werden, die angibt, welchem Eintrag im Vertex-Format das Attribut zugeordnet ist. Hier ist ein Beispiel - zuerst das Vertex-Format:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Und nun die zugehörigen Shader-Attribute:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour0;       // (r,g,b,a)<br />
    attribute vec4 in_Colour1;       // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;  // (u,v)</p>
  <p>In diesem Fall entspricht <span class="inline">in_Colour0</span> dem ersten <span class="inline">vertex_format_add_colour()</span> und <span class="inline">in_Colour1</span> dem zweiten.</p>
  <p>Texturkoordinaten werden etwas anders gehandhabt als Farben. Grundsätzlich wird alles, was nicht als <span class="inline">in_Position</span>, <span class="inline">in_Normal</span> oder eines der <span class="inline">in_Colour[0 ... ]</span> Attribute bezeichnet wird, als Texturkoordinate behandelt. Die Reihenfolge, in der sie in der Liste der Attribute im Shader definiert sind, gibt an, welchem Attribut im Vertexformat sie zugeordnet sind. Siehe das folgende <span class="notranslate">GML</span> Beispiel:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Und der Shader <span class="notranslate">code</span> würde etwa so aussehen:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour;        // (r,g,b,a)<br />
    attribute vec2 in_myTexcoord;    // (u,v)<br />
    attribute vec2 in_TextureCoord;  // (u,v)<br />
    attribute vec2 in_Something;     // (u,v)</p>
  <p>In diesem Beispiel entsprechen <span class="inline">in_myTexcoord</span>, <span class="inline">in_TextureCoord</span> und <span class="inline">in_Something</span> den drei aufeinanderfolgenden Textur-Koordinatenattributen, die im Vertex-Format definiert sind.</p>
  <p>Eine vollständige Liste aller Funktionen, die zur Erstellung von Scheitelpunktformaten, Scheitelpunkten <span class="notranslate">buffers</span> und Primitiven erforderlich sind, finden Sie auf der folgenden Seite:</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitive und Vertex-Formate</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
        <div style="float:right">Nächste: <a href="Guide_To_Using_Blendmodes.htm">Anleitung zur Verwendung von Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->
</body>
</html>