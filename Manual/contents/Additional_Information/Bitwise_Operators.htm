<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Bitweise Operatoren</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how bitwise operators work" />
  <meta name="rh-index-keywords" content="Bitwise Operators" />
  <meta name="search-keywords" content="bitwise,bitwise operators" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Bitweise Operatoren und Binär</h1>
  <p>Zu Beginn des Computerzeitalters waren <strong>Binär-</strong> und <strong>Hexadezimaldarstellungen</strong> eine Selbstverständlichkeit, wahrscheinlich weil Hochsprachen (wie BASIC) einfach zu langsam waren. Beispielsweise hätte die Multiplikation von 32 x 32 in BASIC mehrere CPU-Zyklen benötigt, während sie in Binärsprache in einem einzigen CPU-Zyklus durchgeführt werden kann.</p>
  <p>Heutzutage jedoch, mit der Leistung selbst eines einfachen PCs, müssen Sie sich darüber keine Gedanken mehr machen und können die Dinge auf die &quot;lange Art&quot; erledigen, da die Geschwindigkeit des Rechners und seine komplexere CPU-Konstruktion alle Mängel dieses Ansatzes ausgleichen werden. Das ist natürlich eine großartige Neuigkeit, da es bedeutet, dass Sie nicht mehr jede Zeile von <span class="notranslate">code</span> optimieren müssen, die Sie schreiben, aber wenn das der Fall ist - sollten Sie sich dann überhaupt noch um Binärdateien kümmern?</p>
  <p>Die Antwort lautet eindeutig &quot;ja, das sollten Sie&quot;. Es stimmt zwar, dass man immer noch Geschwindigkeitssteigerungen erzielen kann - und diese können manchmal beträchtlich sein - aber die Verwendung von Binär- und Hexadezimalformaten führt zu einem besseren Verständnis der Funktionsweise der CPU und kann auch dazu führen, dass man besser <span class="notranslate">code</span> schreibt, Daten besser verpacken kann und einige Aufgaben viel einfacher werden. Auf dieser Seite wird ein wenig erklärt, was Binary ist und wie es bei der Entwicklung von Spielen verwendet werden kann.</p>
  <p>Schauen wir uns also zunächst die grundlegendste binäre Theorie an - wie Zahlen entstehen. Werfen Sie einen Blick auf diese Tabelle:</p>
  <p class="code">000 = 0<br />
    001 = 1<br />
    010 = 2<br />
    100 = 4</p>
  <p>Jede 1 oder 0 steht für ein einzelnes <a class="glossterm" data-glossterm="bit" href="#">Datenbit</a>, und wie Sie sehen können, bedeutet dies, dass 10 im Binärformat gleich 2 ist! Jedes Bit ist das Zweifache des vorherigen Wertes, wobei das erste Bit gleich 1 ist, also Bit 2 = 2, Bit 3 = 4, Bit 4 = 8 usw. (wie unten in dieser <a class="glossterm" data-glossterm="Byte" href="#">Byte-Tabelle</a> dargestellt):</p>
  <p class="code">00000001 = 1<br />
    00000010 = 2<br />
    00000100 = 4<br />
    00001000 = 8<br />
    00010000 = 16<br />
    00100000 = 32<br />
    01000000 = 64<br />
    10000000 = 128</p>
  <p>Das ist in Ordnung, wenn Sie Zahlen wollen, die eine Potenz von 2 sind, aber wie können wir komplexere Zahlen erzeugen? Nun, eine einzelne Binärzahl kann nur eine 0 oder 1 speichern, und das war's. Für komplexere Zahlen müssen wir also Bits zusammenzählen. Wenn wir zum Beispiel die Zahl 6 erhalten wollen, müssen wir 4 und 2 zusammenzählen.</p>
  <p class="code">00000010 = 2<br />
    00000100 = 4<br />
    00000110 = 6</p>
  <p>Das gilt für <strong>alle </strong>binären Zahlen und dafür, wie der Computer jede Zahl intern zusammensetzt. Nehmen wir als weiteres Beispiel eine etwas kompliziertere Zahl: 23. Die Zahl 23 setzt sich eigentlich aus <span class="inline">1+2+4+16</span> oder <span class="inline">00010111</span> zusammen. Wie wäre es mit einem viel komplexeren Beispiel: 196? Nun, die besteht aus <span class="inline">128+64+4</span> oder <span class="inline">11000100</span>. Also ist sie eigentlich gar nicht so komplex!</p>
  <p>Wenn wir mit Werten außerhalb des Byte-Bereichs beginnen (der Zahlen von 0 bis 255 speichern kann), wird es allerdings etwas schwieriger, den Überblick zu behalten. 217.361 ist zum Beispiel <span class="inline">110101000100010001</span> im Binärformat. Oder <span class="inline">1+16+256+etc...</span>. Die Regeln sind dieselben, unabhängig davon, welcher Wert ausgedrückt wird - jede Zahl wird durch die Addition mehrerer Bits erzeugt.</p>
  <p>Wie können wir nun mathematische Operationen mit diesen Werten durchführen? Nehmen wir an, Sie möchten <span class="inline">true</span> oder <span class="inline">false</span> als Wert speichern. Normalerweise verwendet <span class="notranslate">compilers</span> einen <span class="inline">INT</span> ( <span class="inline">INT</span> ist normalerweise als vorzeichenbehaftete 32-Bit-Zahl definiert - vorzeichenbehaftet bedeutet, dass der Wert positiv oder negativ sein kann, während vorzeichenlos bedeutet, dass er nur positiv sein kann) und weist ihn dann einfach <span class="inline">0</span> oder <span class="inline">1</span> zu. Da er nur zwei Zustände hat, ist ein <span class="inline">true</span> / <span class="inline">false</span> -Wert ideal, um ihn in einem Bit zu speichern, und wenn wir dies tun würden, könnten wir 32 <span class="inline">true</span> / <span class="inline">false</span> -Bits für jedes <span class="inline">INT</span> speichern, anstatt nur eines, da ein <span class="inline">INT</span> aus 32 Bits besteht.</p>
  <p>Wie würden wir das machen? Nun, ganz einfach, wie sich herausstellt:</p>
  <p class="code">flags = flags | 1;</p>
  <p>Der Operator &quot;<span class="inline">|</span>&quot; ist ein bitweiser <span class="inline">OR</span>, und das bedeutet, dass die obige Anweisung <span class="inline">ORs</span> 1 in den in der Variablen <span class="inline">flags</span> enthaltenen Wert einfügt. Wie Sie sich erinnern, wird durch die Verwendung einer 1 das erste Bit gesetzt. Wenn wir das zweite Bit setzen wollten, würden wir dies tun:</p>
  <p class="code">flags = flags | 2;</p>
  <p>Wir <span class="inline">OR</span> in 2, weil das Bitmuster <span class="inline">00000010</span> gleich 2 ist. Was genau macht also der binäre Operator <span class="inline">OR</span>? Nun, er fügt alle Bits zu einem einzigen Wert zusammen, etwa so:</p>
  <p class="code">010110100 // Value 1<br />
    110011001 // value 2<br />
    110111101 // Value 1 OR Value 2</p>
  <p>Die folgende Tabelle ist eine so genannte <a class="glossterm" data-glossterm="Wahrheitstabelle" href="#">Wahrheitstabelle</a> für den Operator OR:</p>
  <p class="code">00 | 00 = 00<br />
    00 | 01 = 01<br />
    01 | 01 = 01<br />
    01 | 00 = 01</p>
  <p>Wenn also ein Wert mit 2 Nullen vorhanden ist, bleibt er Null. Der Vorteil der Verwendung solcher Bits als <span class="inline">true</span>/<span class="inline">false</span> Zustand ist, dass man mehrere Bits als &quot;Flaggen&quot; in einer Operation setzen kann, was mit einem normalen booleschen Wert nicht möglich ist. Nehmen wir zum Beispiel an, Bit 1 ist ein &quot;aktiv&quot;-Flag und Bit 3 ist ein &quot;sichtbar&quot;-Flag. Wir könnten beide auf diese Weise setzen:</p>
  <p class="code">flags = flags | 5<span class="inline"></span>;</p>
  <p>Der Grund dafür ist, dass 5 im Binärformat <span class="inline">00000101</span> ist, und nach der obigen Regel werden diese beiden Bits mit der Variablen &quot;flags&quot; zusammengeführt. Auch wenn Bit 1 bereits gesetzt war, funktioniert die Operation und Bit 3 wird nun ebenfalls gesetzt.</p>
  <p>Was ist mit der Löschung von <span class="notranslate">flags</span>? Nun, hier kommt die bitweise &quot;<span class="inline">&amp;</span>&quot; <span class="inline">AND</span> Operation ins Spiel. Wenn Sie etwas <span class="inline">AND</span>, werden die Bits, die in der Maske gesetzt sind, beibehalten, während die Bits, die in der Maske gelöscht sind, entfernt werden - wie hier:</p>
  <p class="code">01110010101 // Value 1<br />
    00110000100 // Value 2<br />
    00110000100 // Value 1 AND value 2</p>
  <p>Wie Sie sehen können, wird dort, wo jeder Wert eine 1 enthält, die 1 beibehalten, und dort, wo es eine Mischung aus 0 und 1 gibt, wird diese auf 0 zurückgesetzt. Hier ist die Wahrheitstabelle für <span class="inline">AND</span>ing:</p>
  <p class="code">00 &amp; 00 = 00<br />
    01 &amp; 00 = 00<br />
    00 &amp; 01 = 00<br />
    01 &amp; 01 = 01</p>
  <p>Das heißt, nur wenn an jeder Stelle ein Bit vorhanden ist, wird es behalten. Das bedeutet, dass Sie nicht nur mehrere <span class="notranslate">flags</span> auf einmal setzen können, sondern auch mehrere <span class="notranslate">flags</span> auf einmal löschen können. Nehmen wir zum Beispiel den obigen Fall, aber dieses Mal löschen wir sie. Wir wollen die Bits 1 und 3 löschen (wodurch wir den Wert 5 erhalten), aber wenn wir uns an die obige Wahrheitstabelle erinnern, wollen wir alle anderen Bits behalten und die Bits 1 und 3 löschen. Dies wäre eine binäre &quot;Maske&quot; von 11111111111111111111111111111010 (32 Bits). Diese Maske lässt alle Bits gesetzt, löscht aber die beiden Bits, die wir eigentlich löschen wollen. Wenn ich also einen Wert von 1000111011 hätte und mit der obigen Maske die Bits 1 und 3 löschen wollte, würde das so aussehen...</p>
  <p class="code">00000000000000000000001000111011 // Value<br />
    11111111111111111111111111111010 // Mask<br />
    00000000000000000000001000111010 // Value AND Mask</p>
  <p>Das ist großartig, aber wenn wir das jedes Mal machen müssten, wenn wir <span class="notranslate">flags</span> löschen wollen, würde es lästig werden. Was wir brauchen, ist eine Möglichkeit, Bits einfach umzudrehen (und vorzugsweise ohne CPU-Kosten). Glücklicherweise gibt es eine einfache Möglichkeit, dies zu tun, indem man den Operator &quot; <span class="inline">~</span>&quot; <span class="inline">NOT</span> verwendet.</p>
  <p>Der Operator <span class="inline">NOT</span> ist genau das, was er sagt - <em>nicht</em> diese Bits. Hier ist eine Wahrheitstabelle für <span class="inline">NOT</span>.</p>
  <p class="code">~00 = 11<br />
    ~01 = 10<br />
    ~10 = 01<br />
    ~11 = 00</p>
  <p>Dieser Operator macht das Entfernen von <span class="notranslate">flags</span> sehr einfach, und was noch besser ist, es ist in der Regel eine Kompilierzeit-Optimierung, d.h. wenn Sie eine konstante Zahl (d.h. keine Variable) verwenden, wird <span class="notranslate">compiler</span> die Bits automatisch für Sie umkehren. Nehmen wir diese Anweisung, bei der wir die Bits 1 und 3 wieder löschen wollen:</p>
  <p class="code">a = a &amp; ~5;</p>
  <p>Dies lässt sich in der Tat zu &quot;<span class="inline">a &amp; 11111111111111111111111111111010</span>&quot; kompilieren. Das macht das Leben ziemlich einfach, wenn es darum geht, <span class="notranslate">flags</span> zu löschen.</p>
  <p>Der letzte Operator, den wir uns ansehen wollen, ist &quot;<span class="inline">^</span>&quot; <span class="inline">EOR</span> (<span class="inline">Exclusive OR</span>, manchmal auch <span class="inline">XOR</span> genannt ), dieser Operator vertauscht die in beiden Werten gesetzten Bits. Hier ist die <span class="inline">EOR</span> Wahrheitstabelle:</p>
  <p class="code">0 ^ 0 = 0<br />
    0 ^ 1 = 1<br />
    1 ^ 0 = 1<br />
    1 ^ 1 = 0</p>
  <p>Dies ist eine seltsame, aber unglaublich nützlich. Angenommen, wir wollen einen Zähler, der einfach von 0 auf 1 und wieder zurück auf 0 zählt (zwischen 0 und 1 hin- und herschaltet), dann könnten wir eine 1 hinzufügen und eine <span class="inline">IF</span> machen, um zu sehen, ob er auf 2 gekommen ist, und ihn dann wieder auf 1 zurücksetzen. Oder... wir könnten 1 hinzufügen und dann <span class="inline">AND</span> mit 1 (seit <span class="inline">01+01 = 10</span>, und <span class="inline">10 &amp; 01 = 0</span>) oder wir können dies tun:</p>
  <p class="code">a = a ^ 1;</p>
  <p>Beim ersten Mal wird <span class="inline">0 ^ 1 = 1</span> ausgeführt, beim zweiten Mal <span class="inline">1 ^ 1 = 0</span>, wodurch die Dinge von 0 auf 1 umgeschaltet werden.</p>
  <p>Also - <span class="inline">OR</span> (<span class="inline">|</span>), <span class="inline">AND</span>(<span class="inline">&amp;</span>), <span class="inline">NOT</span>(<span class="inline">~</span>) und <span class="inline">EOR</span>(<span class="inline">^</span>) lassen uns Bits mit relativer Leichtigkeit manipulieren und erlauben uns, auf der einfachsten Ebene, mehrere Bits auf einmal zu kontrollieren. Bei der Entwicklung unserer Spiele können wir diese Operationen natürlich auch für andere Dinge verwenden, z. B. zum Maskieren von <span class="notranslate">sprites</span>, für ganzzahlige <span class="inline">MOD</span> Operationen (unter Verwendung von <span class="inline">AND</span>) oder für schöne Zählerschleifen.</p>
  <p>Wir können also einfache bitweise Operationen durchführen, aber sehen wir uns die komplexeren Dinge an, angefangen mit der Frage, wie ein Computer addiert. Schauen wir uns ein sehr einfaches Beispiel an: <span class="inline">1+1</span>.</p>
  <p class="code">00000001<br />
    00000001<br />
    00000010</p>
  <p>Genau wie bei normalen Additionen werden Zahlen addiert und dann in die nächste Spalte übergeleitet, aber im Gegensatz zu einer normalen Dezimaladdition können wir nur von 0 bis 1 gehen, nicht von 0 bis 9. Die Addition von <span class="inline">1+1</span> bedeutet also, dass wir in <span class="inline">10</span> überlaufen. Schauen wir uns also ein komplexeres Beispiel an.</p>
  <p class="code">01011011 = 91<br />
    00101101 = 45<br />
    10001000 = 136</p>
  <p>Hier ist es natürlich schwieriger zu sehen, aber die Überläufe plätschern so lange vor sich hin, bis es keine Einsen mehr in einer Spalte gibt. Es ist erwähnenswert, dass Computer nur 2 Zahlen auf einmal addieren (oder subtrahieren, multiplizieren oder dividieren) können. Nehmen Sie <span class="inline">19 + 19 + 19</span>. Als Mensch können wir alle 9en zusammenzählen, die 2 übertragen und dann weitergehen! Aber Computer können das nicht - was sie können, ist das hier:<span class="inline"> (19 + 19) + 19</span>. Sie führen also jede Berechnung in 2er-Blöcken durch.</p>
  <p>Die binären Berechnungen, die für uns als Programmierer am interessantesten sind, sind Multiplikation und Division. Computer multiplizieren nur mit 2, und um mehr zu tun, zerlegen sie eine Zahl und addieren dann alle Ergebnisse zusammen. Betrachten wir zunächst einige sehr einfache Beispiele. <span class="inline">4 * 2 = 8</span>. Um binär mit 2 zu multiplizieren, <em>verschieben </em>wir alle Bits um eins nach LINKS. Etwa so:</p>
  <p class="code">00000100 * 2 = 00001000 = 8</p>
  <p>In diesem Fall sind alle Bits um eins nach links gewandert, so dass sich der Wert vom 3. auf das 4. Bit und damit von 4 auf 8 ändert. Wie wäre es mit einer größeren Zahl?</p>
  <p class="code">101 = 01100101 * 2 = 11001010 = 202</p>
  <p>Wieder bewegen sich alle Bits um eins, und das ist ein Vielfaches von 2. Wie wäre es also mit einem Vielfachen von 4? Ganz einfach, wir verschieben alles um 2 nach links, statt um eins. Wie wäre es also mit 16 oder 128? Das würde eine Linksverschiebung von 4 Bits bzw. 7 Bits erfordern. Das ist unglaublich nützlich, denn es bedeutet, dass wir einfache Multiplikationen durchführen können, indem wir einfach Bits verschieben. Dazu verwenden wir den <strong>Linksverschiebungsoperator</strong> <span class="inline">&lt;&lt;</span>. Hier sind einige Beispiele:</p>
  <p class="code">00000001 &lt;&lt; 1 = 000000010 = 2<br />
    00000001 &lt;&lt; 2 = 000000100 = 4<br />
    00000001 &lt;&lt; 3 = 000001000 = 8<br />
    00000001 &lt;&lt; 4 = 000010000 = 16<br />
    00000001 &lt;&lt; 5 = 000100000 = 32<br />
    00000001 &lt;&lt; 6 = 001000000 = 64<br />
    00000001 &lt;&lt; 7 = 010000000 = 128<br />
    00000001 &lt;&lt; 8 = 100000000 = 256</p>
  <p>Abgesehen davon, dass es sehr nützlich für schnelle/einfache Multiplikationen ist, ist es auch sehr nützlich, um bestimmte Bits zu setzen, ohne den Bitwert herausfinden zu müssen. Nehmen wir an, wir wollen Bit 27 setzen, welche Zahl ist das? (67108864 übrigens!), dann können wir die obige <span class="notranslate">syntax</span> verwenden, um <span class="notranslate">flags</span> einfach so zu setzen:</p>
  <p class="code">a = a | (1 &lt;&lt; 27)</p>
  <p>Okay... also eigentlich wäre das Bit 26, so wie wir es bisher beschrieben haben (da die Bits bei 1 beginnen), aber eigentlich... beginnen die Bits bei Bit 0 und gehen nach oben, nicht bei Bit 1. Es gibt zwar 32 Bits in einem INTEGER, aber die Bits reichen von 0 bis 31, nicht von 1 bis 32. Das ist eigentlich ziemlich nützlich, da wir jetzt Konstanten für Bit-Zahlen einrichten können.</p>
  <p>Nehmen wir also an, Bit 27 ist ein aktives Flag und Bit 0 ist ein Explosionsflag. Wie können wir beides setzen?</p>
  <p class="code">ACTIVE = 27;<br />
    BOOM = 0;<br />
    A = A | (1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM);</p>
  <p>Das mag nach einer Menge <span class="notranslate">code</span> aussehen, aber wenn diese Zahlen Konstanten sind, wird <span class="notranslate">compiler</span> diese Operationen zu einem einzigen Wert vorkompilieren, so dass wir am Ende diesen als tatsächlichen <span class="notranslate">code</span> erhalten.</p>
  <p class="code">A = A | 13421772;</p>
  <p>Das Löschen dieser Bits (wie wir oben gesehen haben) ist einfach eine Frage der Verwendung des NOT-Modifikators, wie hier:</p>
  <p class="code">A = A &amp; ~((1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM));</p>
  <p>Damit können wir zum einen alle Bits setzen und löschen, die wir wollen, und zum anderen können wir unsere Datenstrukturen massiv komprimieren. Die Komprimierung von Datenstrukturen ist eine gute Sache, denn wenn Sie weniger Speicher verwenden, gibt es weniger <span class="notranslate">cache</span> Fehlversuche, und Ihr <span class="notranslate">code</span> läuft einfach schneller. Sagen wir mal so: Was ist schneller, 32 MB Daten zu kopieren oder 4 MB? Nun, ganz klar 4. Wenn Sie also alle Ihre <span class="notranslate">flags</span> in einem einzigen Speicherzugriff unterbringen können, ist das gut!</p>
  <p>Werfen wir nun einen kurzen Blick darauf, wie die Division durchgeführt wird und warum sie so nützlich ist. Bei der Division werden die Bits mit dem <strong>Rechtsschiebeoperator</strong> <span class="inline">&gt;&gt;</span><em>nach rechts</em> verschoben. Nehmen wir eine einfache Zahl - 64 - und teilen wir sie durch 32:</p>
  <p class="code">64 / 32 = 01000000 &gt;&gt; 5 = 00000010</p>
  <p>Also verschiebt man das einzelne Bit um 5 nach unten (das ist die Anzahl der Verschiebungen, die für 32 erforderlich sind - siehe oben), was uns 2 ergibt. Aber was passiert, wenn da noch andere Bits drin sind? Schauen wir uns das mal an:</p>
  <p class="code">68 / 32 = 01000100 &gt;&gt; 5 = 00000010</p>
  <p>Da haben Sie es also.... Es ist genau das Gleiche. Die Bits, die wir nach unten verschieben, gehen einfach verloren. Das ist wirklich nützlich, denn wenn wir bei der Division nach unten den Rest brauchen, gibt es einen noch einfacheren Weg, ihn zu erhalten, zu dem wir gleich kommen werden. Aber zunächst ein praktisches Beispiel. Ich habe eine X- und Y-Position und möchte die Gitterzelle ermitteln, in die diese fällt, wobei das Gitter 32x32 groß ist. Diese Methode erlaubt es, Objekte, Kollisionen, <span class="notranslate">flags</span> - alle möglichen Dinge - zu speichern und sehr schnell darauf zuzugreifen. Also los geht's:</p>
  <p class="code">var X_index = x &gt;&gt; 5;<br />
    var Y_index = y &gt;&gt; 5;<br />
    cell_data = mygrid[# X_index,Y_index];</p>
  <p>Was wäre also, wenn wir den Rest brauchen? Vielleicht wird dieser Rest als eine Art Ordnungskennzeichen oder ähnliches verwendet. Was auch immer der Grund ist, den Rest zu erhalten ist so einfach wie eine <span class="inline">AND</span>:</p>
  <p class="code">var remainder = x &amp; 31<br />
    var X_Index = x &gt;&gt; 5;</p>
  <p>Sie haben vielleicht bemerkt, dass wir hier mehrere Zeilen von <span class="notranslate">code</span> verwendet haben (wie so oft), aber es handelt sich trotzdem nur um ein paar sehr schnelle Anweisungen. Aber warum die 31? Nun, da Bit 5 32 ist, wären alle Bits darunter 31, und das ist der maximale Rest, mit dem wir <span class="inline">AND</span> verwenden (wir könnten auch <span class="inline">(1 &lt;&lt; 5) - 1</span> verwenden, was <span class="inline">32 - 1 = 31</span> ergeben würde). Wenn ich dies nun tun würde, ohne das Binärsystem zu verstehen, würde es so aussehen:</p>
  <p class="code">var r = x mod 32;<br />
    var X_Index = floor(x / 32);</p>
  <p>Warum ist dies also viel schlimmer? Nun, um durch 32 zu dividieren, müssen wir eine Fließkommadivision durchführen - was natürlich Zeit kostet, aber um die <span class="inline">mod 32</span> zu machen, muss man eigentlich noch eine weitere durchführen! Wenn wir das in Assembler machen würden, bekämen wir tatsächlich BEIDE Werte in einer Division, aber in Hochsprachen ist das nicht möglich (naja... nicht sehr oft), und so muss man die ganze Arbeit zweimal machen. Das summiert sich, vor allem, wenn man eine enge <span class="notranslate">loop</span> mit vielen Berechnungen wie dieser macht. Integer-Divisionen mit Bit-Shifting, wie oben gezeigt, helfen wirklich bei der Optimierung Ihres Spiels.</p>
  <p>Da dies ein recht komplexes Konzept sein kann, das man verstehen und dann auf reale Programmiersituationen anwenden muss, finden Sie im Folgenden eine Reihe von kurzen Beispielen, die sich auf jedes mit <span data-keyref="GameMaker Name">GameMaker</span> erstellte Spiel anwenden lassen.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Ausrichtung der Kacheln</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker-Entwickler</span> verwenden oft die Funktion <span class="inline">place_free()</span> und versuchen dann, wenn eine Kollision gefunden wurde, das Objekt langsam zu entfernen, indem sie entweder eine Schleife um eine <span class="inline">x</span> oder <span class="inline">y</span> Position machen und dabei die Funktion weiter ausführen oder die Funktion <span class="inline">move_outside_all()</span> verwenden.</p>
    <p class="dropspot">Wie kann man das schneller machen? Nun, wenn wir richtige Power-of-2-Kacheln verwenden, dann haben wir eine sehr einfache Methode, die auch blitzschnell ist. Wenn wir uns nach rechts bewegen und in einen Kollisionsblock geraten, dann ist, wie wir wissen, alles auf 32 ausgerichtet, also müssen wir auch die <span class="notranslate">sprite</span> auf eine 32-Pixel-Grenze ausrichten - vorzugsweise auf die linke -, damit die <span class="notranslate">sprite</span> aus der Kollision herausbewegt wird. Das ist wirklich einfach, wenn man die Regeln kennt, die wir oben verwendet haben, um den Rest zu erhalten, und wenn man weiß, wie man den Kehrwert von Bits erhält, kann man dies einfach tun:</p>
    <p class="code">x = x &amp; ~31;</p>
    <p class="dropspot">Das ist richtig, das ist ALLES, was man braucht, um sich an einer 32-Pixel-Grenze auszurichten. Indem wir die 31 ändern, können wir uns an allem ausrichten, was wir wollen - solange es eine Potenz von 2 ist. (Dies entspricht der Division durch 32 und der anschließenden Multiplikation mit 32, wodurch die unteren Bits entfernt werden).</p>
    <p class="dropspot">Wenn wir uns nach rechts ausrichten wollten, würden wir wie oben beschrieben vorgehen, aber dann 32 hinzufügen, um es in die nächste Kachel zu verschieben. Ganz einfach. All dies macht die gesamte Kollision <span class="notranslate">code</span> monumental schneller, und lässt Sie die CPU-Zeit zu verbringen, wo Sie es wirklich brauchen.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Schlüssel und Türen</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Angenommen, Sie haben ein Level mit mehreren Türen und einem Schlüssel für jede. Wie kann man einen Schlüssel einfach für eine bestimmte Tür markieren? Nun, normalerweise würde man dem Schlüssel und der Tür einfach eine ID zuweisen. Was aber, wenn man mit einem Schlüssel 2 oder 3 Türen öffnen will? Ganz einfach. Man verwendet eine MASKE. Der Tür wird ein einzelnes Bit zugewiesen, etwa so:<br>
       </p>
    <p class="code">door_id = 1; // 0001</p>
    <p class="dropspot">Die anderen wären etwa so:<br>
       </p>
    <p class="code">door_id=2; // 0010<br />
      door_id=4; // 0100<br />
      door_id=8; // 1000<br />
      etc...</p>
    <p class="dropspot">Wenn wir wollen, dass der Schlüssel die Türen 1 und 3 öffnet, dann würde der Schlüssel den MASK-Wert 5 haben (das ist 101 in binärer Form). Wenn wir eine <span class="inline">AND</span> durchführen und das Ergebnis &quot;ungleich Null&quot; ist, dann wissen wir, dass der Schlüssel die Tür öffnen kann. Man könnte auch Schlüssel haben, die nichts öffnen, wenn sie eine MASK von 0 haben. Die eigentliche Prüfung finden Sie unter <span class="notranslate">code</span>:</p>
    <p class="code">if ((key_id &amp; door_id) ! = 0)<br />
      {<br />
          opendoor();<br />
      }</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Zähler in Schleifen</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Nehmen wir an, wir wollen einen einfachen Animationszähler, der von 0 bis 15 geht (da wir 16 Bilder der Animation haben). Normalerweise würde man eine Inkrementierung vornehmen und dann eine <span class="inline">if</span> -Prüfung durchführen, um die Zahl einzuschließen, aber für dieses Beispiel wollen wir den <span class="inline">AND(&amp;)</span> -Operator verwenden:</p>
    <p class="code">counter = (counter + 1) &amp; 15;</p>
    <p class="dropspot">Da 16 eine Potenz von 2 ist, können wir diese Zahl um 1 verringern und sie als Maske verwenden, die wir dann zum Einschließen unseres Zählerwerts verwenden können. Wenn der Zähler von 15 auf 16 aufsteigt, erhalten wir das Bitmuster <span class="inline">10000</span>, und wenn wir <span class="inline">AND</span> mit 15 (Bitmuster <span class="inline">01111</span>) verwenden, erhalten wir <span class="inline">00000</span> (einfach Null). Das bedeutet, dass die obige <span class="notranslate">code</span> für die Umhüllung von Werten im Bereich einer Potenz von 2 nützlich ist.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Macht der 2 Kontrolle</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">Was wäre, wenn Sie prüfen wollten, ob etwas eine Potenz von 2 ist? Nun, hier ist ein netter kleiner Trick... Dies gibt <span class="inline">true</span> zurück, wenn der angegebene Wert eine Potenz von 2 ist:</p>
    <p class="code">function is_pow2(_val)<br />
      {<br />
          return _val &amp; (_val - 1)) == 0;<br />
      }</p>
    <p class="dropspot">Wenn wir also die Zahl 51 haben (<span class="inline">110011</span>), was bedeutet das? Nun, wir erhalten dies... <span class="inline">110011 &amp; 110010</span>, was natürlich <span class="inline">false</span> ergibt, da nach <span class="inline">AND</span> noch viele Bits übrig sind. Hätten wir 64 (<span class="inline">1000000</span>), dann ergibt sich dies... <span class="inline">1000000 &amp; 0111111</span>, was 0 <em>ergibt</em>, also <span class="inline">true</span>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Index-Ausrichtung</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Hier ist ein schnelles Bit von <span class="notranslate">code</span>, um sich an Potenzen von 2 Zahlen auszurichten. (1,2,4,8,16 und so weiter). Dies kann bei der Speicherzuweisung sehr nützlich sein, oder um sicherzustellen, dass Sie Daten an die richtigen Grenzen schreiben. In diesem Beispiel muss <span class="inline">_val1</span> an <span class="inline">_val2</span> Bytes ausgerichtet werden, wobei <span class="inline">_val2</span> eine Potenz von 2 Zahlen ist. Diese kleine Funktion rundet auf die nächste Grenze der gewünschten Zahl auf.</p>
    <p class="code">function align_pow2(_val1, _val2)<br />
      {<br />
          return _val1 + (_val2 - 1)) &amp; ~(_val2 - 1);<br />
      }</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
        <div style="float:right">Nächste: <a href="Type_Tables.htm">Typentabellen</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Bitwise Operators
-->
  <!-- TAGS
bitwise_operators
-->
</body>
</html>