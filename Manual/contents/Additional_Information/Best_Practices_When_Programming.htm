<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Bewährte Praktiken bei der Programmierung</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Bewährte Praktiken bei der Programmierung</h1>
  <p>Auf dieser Seite werden wir einige &quot;Best Practices&quot; für die Programmierung Ihres Spiels vorstellen und gleichzeitig ein wenig über die Funktionsweise von <span data-keyref="GameMaker Name">GameMaker</span> berichten. Bevor wir jedoch fortfahren, sollten Sie zwei sehr wichtige Punkte beachten:</p>
  <ul class="colour">
    <li>Dies ist ein <em>Leitfaden</em> und nicht die alles entscheidende, 100% perfekte Methode, um Ihr Spiel zu schreiben! Die hier erwähnten Dinge sind im Allgemeinen eher auf der Organisations- und Mikro-Optimierungsskala angesiedelt und sollten in Ihre Programmiergewohnheiten integriert werden, wenn Sie sich mit <span class="notranslate">GML</span> wohl fühlen und sie für angemessen halten.</li>
    <li>Wenn Ihr Spiel gut läuft und Sie mit den Dingen zufrieden sind, wie sie sind, dann sollten Sie <em>nicht alles überstürzt ändern, nur um ein paar zusätzliche FPS herauszuholen</em>. Sie müssen ein Gleichgewicht finden zwischen lesbarer, flexibler und modularer <span class="notranslate">code</span> und dem Zeit- und Energieaufwand, der für Änderungen erforderlich ist, sowie dem Gesamtgewinn am Ende. Grundsätzlich gilt: Was nicht kaputt ist, sollte man nicht reparieren, und was man hier lernt, sollte man für sein nächstes Projekt aufbewahren.</li>
  </ul>
  <p>Lassen Sie uns nun weitergehen und einige allgemeine Tipps für das Schreiben guter <span class="notranslate">GML</span> <span class="notranslate">code</span> betrachten, die Sie jederzeit anwenden können...</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Programmierstil</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Wenn es darum geht, <span class="notranslate">code</span> zu schreiben, hat jeder seinen eigenen <em>Stil</em>. Der Stil, in dem Sie programmieren, ist die Art und Weise, wie Sie Ihre Klammern setzen, wie Sie die Zeilen einrücken, wie Sie Variablen deklarieren und benennen usw., und er ist entscheidend dafür, dass Ihre <span class="notranslate">code</span> klar und für andere Menschen lesbar ist (und für Ihr zukünftiges Ich, wenn Sie nach einer Zeit, in der Sie an etwas anderem gearbeitet haben, zu diesem Projekt zurückkehren müssen).</p>
    <p class="dropspot">Es gibt viele, viele <a href="http://en.wikipedia.org/wiki/Programming_style">Programmierstile</a>, und einige würden behaupten, dass ihr Stil der beste ist, aber die Wahrheit ist, dass fast jeder Stil in Ordnung ist, solange man ihn <strong>konsequent </strong>verwendet und <em>klar </em>und <em>deutlich </em>ist, was alles ist und tut.</p>
    <p class="dropspot"><img>Das obige Bild ist ein Beispiel für eine Funktionsdeklaration in einer <span class="notranslate">script</span>, um die oben genannten Punkte zu veranschaulichen. Sie können sehen, dass die Kommentare im JSDoc-Stil verwendet werden, um klar zu erklären, was alles getan wird, und der Kodierungsstil ist konsistent, mit 4 Leerzeichen Einrückungen, Unterstrichen für lokale Variablen, protokollierte Ausgaben usw.</p>
    <p class="dropspot">Beachten Sie auch, dass der <span class="notranslate">script</span> -Editor Ihnen zwar erlaubt, <span class="notranslate">code</span> an jeder der offenen/geschlossenen Klammern zu falten, Sie aber <span class="inline">#region</span> und <span class="inline">#endregion</span> Tags verwenden können, um Teile Ihres <span class="notranslate">code</span> abzutrennen und die Lesbarkeit erheblich zu verbessern, insbesondere bei größeren <span class="notranslate">scripts</span>, die mehrere Funktionen enthalten. Regionen können auch kommentiert werden (siehe den Abschnitt "Editieren" auf dieser Seite im Handbuch):</p>
    <p class="dropspot"><img>Wenn Sie <span class="notranslate">code</span> schreiben, sollten Sie sich darüber im Klaren sein, dass <span data-keyref="GameMaker Name">GameMaker</span> beim Kompilieren Ihres fertigen Spiels Kommentare entfernt, unnötige Zeilenumbrüche und Leerzeichen entfernt, Konstante/Makro/Enum-Werte ersetzt und im Allgemeinen Ihre <span class="notranslate">code</span> als Teil des Prozesses komprimiert. Das bedeutet, dass Sie so viel Leerraum um Ihre <span class="notranslate">code</span> herum einfügen können, wie Sie möchten, und Sie müssen sich nicht darum kümmern, Ihre Kommentare kurz zu halten oder sie nur sparsam zu verwenden.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Lokale Variablen verwenden</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Um beim obigen Punkt über den Programmierstil zu bleiben: Viele Anfänger versuchen, so viel wie möglich in eine Zeile von <span class="notranslate">code</span> zu packen. Zum Beispiel:</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">Es ist zwar nicht völlig unleserlich, aber ineffizient (die Funktion <span class="inline">point_direction()</span> wird z. B. zweimal aufgerufen), unübersichtlich und umständlich. Es wäre viel besser ausgedrückt als:</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br />
      var local_x = x + lengthdir_x(100, p_dir);<br />
      var local_y = y + lengthdir_y(100, p_dir);<br />
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">Der Speicher- und Ressourcenbedarf für die Erstellung dieser lokalen Variablen ist vernachlässigbar und wird bei weitem durch den unmittelbaren Nutzen aufgewogen, den Sie (oder jeder andere, der die <span class="notranslate">code</span> später liest) aus der Übersichtlichkeit ziehen. Die gleiche Idee sollte auch auf Funktionen angewendet werden, bei denen Sie den Eingabevariablen sinnvolle Namen zuweisen und klare Formatierungen und lokale Variablen verwenden sollten, um sie so lesbar wie möglich zu machen.</p>
    <p class="dropspot">Lokale Variablen sind im Spiel schnell zu verarbeiten, also machen Sie das Beste daraus, und wenn ein Ausdruck in einem <span class="notranslate">code</span> Block oder <span class="notranslate">script</span> zwei- oder mehrmals vorkommt, denken Sie darüber nach, eine lokale Variable dafür zu erstellen. Bei der Verwendung der <a class="glossterm" data-glossterm="YoYo Compiler (YYC)" href="#">YoYo <span class="notranslate">Compiler</span> (YYC)</a> Targets, wenn Sie <span class="inline">global</span> oder Instanzvariablen mehrmals in einer Funktion oder einem <span class="notranslate">code</span> Block referenzieren, ist es besonders vorteilhaft, sie einer lokalen Variable am Anfang Ihres <span class="notranslate">code</span> zuzuweisen und dann auf diese lokale Variable zu referenzieren, da dies eine viel bessere Leistung bringt.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Arrays</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Overview/Arrays.htm">Arrays</a> sind schnell zu verwenden und benötigen weniger Speicher als Datenstrukturen, können aber noch weiter optimiert werden. Wenn Sie ein Array erstellen, wird ihm entsprechend seiner Größe Speicher zugewiesen. Daher sollten Sie versuchen, ein Array zunächst auf seine maximale Größe zu initialisieren, auch wenn Sie es erst später füllen wollen. Wenn Sie zum Beispiel wissen, dass Sie ein Array für maximal 100 Werte benötigen, würden Sie es gleich auf 100 Slots initialisieren, indem Sie die <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a> Funktion:</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">Dadurch wird der Speicher in einem &quot;Stück&quot; zugewiesen, wobei alle Array-Werte auf den Standardwert 0 gesetzt werden. Dies hilft, die Dinge schnell zu halten, da sonst jedes Mal, wenn Sie dem Array einen neuen Wert hinzufügen, der gesamte Speicher wieder neu zugewiesen werden muss.</p>
    <p class="note"><span class="note">HINWEIS</span> Für das HTML5-Ziel gilt die Zuweisung von Arrays auf diese Weise nicht und Ihre Arrays sollten für dieses Ziel von 0 initialisiert werden! Sie können dies einfach handhaben, indem Sie z. B. die os_browser-Variable überprüfen:</p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br />
        {<br />
            array_create(100, 0);<br />
        }<br />
        else<br />
        {<br />
            for (var i = 0; i &lt; 100; ++i;)<br />
            {<br />
                array[i] = 0;<br />
            }<br />
        }</span></p>
    <p class="dropspot">Sie können auch den mit einem Array verbundenen Speicher freigeben, indem Sie die verwendete Variable auf 0 setzen. Um also das Array aus dem obigen Beispiel <span class="notranslate">code</span> zu löschen, würden Sie einfach verwenden:</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">Beachten Sie auch, dass Arrays <strong>per Referenz übergeben</strong> werden, aber bei einer Änderung das gesamte Array kopieren (dieses Verhalten wird <strong>copy on write</strong> genannt). Wenn Sie also ein Array an eine Funktion übergeben, übergeben Sie einen <em>Verweis </em>auf das ursprüngliche Array und alle Werte, die daraus gelesen werden, stammen aus der ursprünglichen Quelle. Das ist schön und schnell, aber wenn Sie einen der Array-Werte ändern müssen, wird das Array selbst zum Zeitpunkt des Schreibens dupliziert und alle vorgenommenen Änderungen <strong>müssen von der Funktion zurückgegeben werden, sonst gehen sie verloren</strong>. Das ist viel langsamer und verbraucht mehr Speicher, also seien Sie vorsichtig, wie Sie Arrays in Funktionen verwenden.</p>
    <p class="dropspot">Sie können dieses Kopieren beim Schreiben jedoch vermeiden, indem Sie den speziellen <a href="../GameMaker_Language/GML_Overview/Accessors.htm">Array-Accessor</a> <span class="inline">@</span> verwenden, da dieser direkten Zugriff auf das zugrunde liegende Array ermöglicht. Zum Beispiel:</p>
    <p class="code">// Call a function, passing our array<br />
      my_function(my_array);</p>
    <p class="code">// The function looks like this:<br />
      <br />
      function my_function(_a)<br />
      {<br />
          // The array will be copied and the copy modified,<br />
          // requiring you to use &quot;return _a&quot;, later<br />
          _a[0] = 100;<br />
      <br />
          // This will modify the ORIGINAL array directly and<br />
          // does not require it to be returned<br />
          _a[@ 0] = 100;<br />
      }
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Daten-Strukturen</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">In <span data-keyref="GameMaker Name">GameMaker</span> wurden die <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">Datenstrukturen</a> so optimiert, dass sie viel schneller sind als in früheren Versionen von <span class="notranslate">GameMaker</span>. Sie müssen immer noch aufgeräumt (zerstört) werden, wenn sie nicht benutzt werden, um Speicher freizugeben, und sie können immer noch langsamer sein als z.B. Arrays, aber die Benutzerfreundlichkeit und die zusätzlichen Funktionen für den Umgang mit den Daten, die sie enthalten, können den minimalen Geschwindigkeitsunterschied oft aufwiegen, also haben Sie keine Angst, sie in Ihren Spielen zu benutzen.</p>
    <p class="dropspot">Es ist anzumerken, dass von allen Datenstrukturen vor allem DS-Maps blitzschnell sind, sowohl beim Lesen als auch beim Schreiben, was sie zu einer hervorragenden Option für alle Arten von Aufgaben macht.</p>
    <p class="dropspot">Zuvor haben wir <a href="../GameMaker_Language/GML_Overview/Accessors.htm">Accessors</a> für Arrays erwähnt, aber sie sind auch für Datenstrukturen verfügbar, was dazu beitragen kann, Ihre <span class="notranslate">code</span> aufzuräumen und sie viel leichter lesbar zu machen.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Kollisionen</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Es gibt <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">mehrere Möglichkeiten, mit Kollisionen</a> in <span data-keyref="GameMaker Name">GameMaker</span> <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">umzugehen</a>, und die meisten von ihnen sind mit einem gewissen zusätzlichen CPU-Overhead verbunden. Die Funktionen <span class="inline">collision_</span> und <span class="inline">point_</span>, <span class="inline">place_</span> und <span class="inline">instance_</span> sind alle auf <a class="glossterm" data-glossterm="Begrenzungsrechteck" href="#">Bounding-Box-Prüfungen</a> mit allen Instanzen eines bestimmten Typs im Raum angewiesen, und obwohl die Engine einige Optimierungen eingebaut hat, um diese Prüfungen zu begrenzen, sind Kollisionen nie die effizienteste Sache, mit der man umgehen kann. Wenn Sie anfangen, präzise Kollisionen zu verwenden, wird die Leistung auch merklich schlechter, da Sie nicht nur Bounding-Box-Prüfungen durchführen, sondern auch Prüfungen pro Pixel, was in der Tat sehr langsam ist.</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">Das heißt nicht, dass Sie diese Funktionen nicht nutzen sollten, denn sie können sehr praktisch sein. Sie sollten jedoch wissen, welche Funktionen Sie wann verwenden sollten, da sie alle leicht unterschiedlich funktionieren und unterschiedlich schnell sind. Als grobe Faustregel gilt, dass die Funktionen <span class="inline">place_</span> schneller sind als die Funktionen <span class="inline">instance_</span>, die wiederum schneller sind als die Funktionen <span class="inline">collision_</span> und <span class="inline">point_</span>. Lesen Sie also die Seiten im Handbuch für jede dieser Funktionsarten und stellen Sie sicher, dass Sie die für die jeweilige Situation am besten geeignete auswählen.</p>
    <p class="dropspot">Alternativ können Sie auch ein<strong> kachelbasiertes Kollisionssystem</strong> erstellen, das mit den <a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">Tilemap-Funktionen</a> oder sogar mit einem benutzerdefinierten 2D-Array oder DS-Gitter erstellt werden kann. Diese sind sehr schnell und erhöhen die Geschwindigkeit Ihres Spiels. Wenn Sie jedoch unregelmäßiges Gelände oder Wände und Objekte verwenden, die nicht an einem Raster ausgerichtet sind, sind sie möglicherweise nicht geeignet. Ein sehr einfaches Tutorial zu Tilemap-Kollisionen finden Sie unter dem folgenden Videolink</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">Kachelkollisionen in <span data-keyref="GameMaker Name">GameMaker</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Texturvertauschungen und Vertex-Batches</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">Wenn Sie <span class="notranslate">switch</span> auf dem <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>Debug Overlay</strong></a>aufrufen, werden Sie feststellen, dass beim Testen zwei Zahlen in Klammern am oberen Bildschirmrand angezeigt werden. Die erste Zahl ist die Anzahl der <strong>Texturwechsel </strong>, die durchgeführt werden, und die zweite ist die Anzahl der <strong>Vertex-Batches</strong>. Diese Zahlen werden von einer Reihe von Faktoren beeinflusst, und man wird sie nie auf (0) (0) senken können, da die Engine bei jedem Schritt ein oder zwei davon benötigt, aber man sollte versuchen, diese Werte so niedrig wie möglich zu halten.</p>
    <p class="dropspot"><img>Der beste und effizienteste Weg für Texturtausch ist, die Speicherung von <span class="notranslate">sprites</span> und Hintergründen auf der Texturseite zu optimieren. Dies geschieht über die <a href="../The_Asset_Editors/Sprites.htm">Sprite-Eigenschaften</a>, und Sie können Texturseiten im <a href="../Settings/Texture_Groups.htm">Texturgruppeneditor</a> erstellen. Wenn Sie eine Reihe von Bildern haben, die nur im Hauptmenü verwendet werden (zum Beispiel), dann legen Sie sie auf einer separaten <a href="../Settings/Texture_Information/Texture_Pages.htm">Texturseite</a> zusammen. Das Gleiche gilt, wenn Sie stufenspezifische Bilder haben, oder den Spieler und die Feinde usw. Grundsätzlich sollten Sie die Texturen nach Verwendungszweck gruppieren, um den Austausch von Texturen so weit wie möglich zu reduzieren. Um den <a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a> zu optimieren, können Sie außerdem die verschiedenen <a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">Prefetch- und Flush-Funktionen</a> verwenden, um Texturen nach Bedarf aus dem Speicher zu laden und zu entfernen.</p>
    <p class="note"><span class="note">HINWEIS</span> Wie bereits zu Beginn dieser Seite erwähnt, sollten Sie sich nicht zu viele Gedanken über Textur-Swaps machen, wenn Ihr Spiel mit einer ordentlichen FPS läuft... vor allem, wenn Sie Projekte auf den Desktop-Zielen erstellen. Diese Optimierungen eignen sich am besten für große Spiele oder für Low-End-Mobilgeräte, und wenn sie falsch eingesetzt werden, können sie die Leistung sogar negativ beeinflussen.</p>
    <p class="dropspot">Vertex-Informationen werden zum Zeichnen in &quot;Stapeln&quot; an die GPU gesendet, und im Allgemeinen gilt: je größer der Stapel, desto besser. Das &quot;Aufbrechen&quot; des Stapels sollte also beim Zeichnen vermieden werden, da dies die Anzahl der an den Grafikprozessor gesendeten Vertex-Stapel erhöht. Es gibt eine Reihe von Dingen, die den Stapel unterbrechen. Die wichtigsten sind <strong>Mischmodi</strong>, das Ändern des <strong>Shaders</strong>, das Ändern einer Uniform für einen Shader, bevor etwas gezeichnet wird, und das Zeichnen mit den eingebauten Formen und Primitiven.</p>
    <p class="dropspot">Wenn Sie also eine Reihe von Geschossinstanzen haben, die mit dem Mischmodus <span class="inline">bm_add</span> gezeichnet werden - zum Beispiel - werden Sie einen neuen Vertex-Stapel für jede einzelne erstellen, was definitiv eine schlechte Sache ist! Stattdessen sollten Sie ein Controller-Objekt in Ihrem Spiel haben, das alle Kugeln zeichnet, etwa so:</p>
    <p class="code">gpu_set_blendmode(bm_add);<br />
      <br />
      with (obj_BULLET)<br />
      {<br />
          draw_self();<br />
      }<br />
      <br />
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">HINWEIS</span>: Dies gilt nicht nur für die Verwendung von <span class="inline" style="font-size: 14px">bm_add</span> - jede Änderung der Überblendung unterbricht den Stapel und führt zu Leistungseinbußen.</p>
    <p class="dropspot">Auf diese Weise werden alle Kugeln im selben Stapel gezeichnet. Ein geschickter Einsatz der Funktionen <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>, <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>, und <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a> kann die Leistung erheblich verbessern und kann je nach Bedarf in Ihrem Projekt aktiviert/deaktiviert werden <span class="notranslate">code</span>, obwohl sie nicht für alle Arten von Grafiken oder Projekten geeignet sind.</p>
    <p class="note"><span class="note">HINWEIS</span> Wenn du nicht möchtest, dass die Instanz sich selbst zeichnet, wenn du einen Controller auf diese Weise verwendest, kannst du einfach einen Kommentar in das Draw-Ereignis einfügen, um das Standardzeichnen zu unterdrücken, oder die Instanz unsichtbar machen (obwohl dies verhindert, dass alle <span class="notranslate">code</span> für die Instanz in allen Draw-Ereignissen laufen).</p>
    <p class="dropspot">Eine weitere Möglichkeit, diese Zahlen zu reduzieren, besteht darin, die Option " <strong>Separate Texturseite"</strong> für <span class="notranslate">sprites</span> zu deaktivieren, sofern dies nicht unbedingt erforderlich ist. Jedes Bild, das auf diese Weise gespeichert wird, wird an eine eigene Texturseite gesendet und anders gepackt, so dass es besser ist, diese Bilder auf einer normalen Texturseite zu haben. Sie können dann die UVS-Koordinaten mit der Funktion <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> Funktion die UVS-Koordinaten abrufen und sie in Variablen für die spätere Verwendung speichern. Es kann eine kleine Menge an zusätzlichem <span class="notranslate">code</span> sein, aber der Gewinn, den Sie erhalten, ist es wert. Beachten Sie, dass diese Methode keine Texturwiederholungen zulässt!</p>
    <p class="dropspot">Wie bei all diesen Tipps gilt auch hier: Wenn es Ihnen das Leben erschwert, sie zu ändern, und Ihr Spiel trotzdem gut läuft, sollten Sie sich nicht zu viele Gedanken darüber machen...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Partikel</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">Partikel</a> bieten eine sehr schnelle und effiziente Möglichkeit, dynamische Effekte in Ihrem Spiel zu erstellen, und im Allgemeinen bieten sie eine gute Leistung. Es ist jedoch anzumerken, dass die Verwendung von additivem Blending, Alpha-Blending und Color-Blending für die Partikel die Leistung beeinträchtigen kann, insbesondere bei mobilen Zielen. Insbesondere das additive Blending kann die Vertex-Batches stark erhöhen und sollte daher mit Vorsicht eingesetzt werden.</p>
    <p class="dropspot">Beachten Sie, dass auf dem Nicht-WebGL-HTML5-Ziel mehrfarbige, verblassende Partikel eine Menge Bild-Caching erfordern und sehr langsam sein werden. Da jedoch Partikel <span class="notranslate">sprites</span> animiert werden können, können Sie eine animierte <span class="notranslate">sprite</span> erstellen, die Unterbilder hat, die Farbe ändern und dann, dass für die Partikel stattdessen verwenden. Es wird immer noch wie ein allmählicher Farbwechsel aussehen, aber nicht die ständige Erstellung von <span class="notranslate">cache</span> Bildern erfordern.</p>
    <p class="dropspot">Weitere Informationen über Partikel finden Sie auf der Seite <a href="Guide_To_Using_Particles.htm">Leitfaden zur Verwendung von Partikeln</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Oberflächen</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Zum Schluss wollen wir noch kurz auf die Verwendung von <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">Oberflächen</a> eingehen, da <span data-keyref="GameMaker Name">GameMaker</span> eine ziemlich bedeutende Optimierung für die Verwendung von Oberflächen in Ihren Spielen bietet: die Möglichkeit, <span class="notranslate">switch</span> den <strong>Tiefenpuffer</strong> ein- und auszuschalten.</p>
    <p class="dropspot">Wenn Sie wie gewohnt Oberflächen verwenden, erstellt <span data-keyref="GameMaker Name">GameMaker</span> eine Oberfläche und eine dazugehörige Tiefenangabe <span class="notranslate">buffer</span>, um eine korrekte Tiefensortierung zu gewährleisten, wenn Sie etwas in 3D zeichnen. Für die meisten 2D-Spiele ist diese zusätzliche Tiefe <span class="notranslate">buffer</span> jedoch nicht erforderlich und nimmt daher zusätzlichen Speicherplatz und Verarbeitungszeit in Anspruch, die für andere Dinge verwendet werden könnten. An dieser Stelle kommt die Funktion <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a> ins Spiel kommt...</p>
    <p class="dropspot">Diese Funktion kann aufgerufen werden, bevor Sie eine Oberfläche erstellen, um die Erzeugung der Tiefe <span class="notranslate">buffer</span> zu deaktivieren, und alle Oberflächen, die danach erstellt werden, haben keine Tiefe <span class="notranslate">buffer</span> für sie erstellt. Sie können diese Funktion je nach Bedarf aktivieren/deaktivieren und sie sogar einmal zu Beginn des Spiels aufrufen, um die Tiefenerzeugung <span class="notranslate">buffers</span> für alle nachfolgenden Oberflächenaufrufe zu deaktivieren (und in den meisten 2D-Spielen ist das in Ordnung). Es wird keinen großen Leistungsschub geben, aber es ist sicherlich etwas, das man im Hinterkopf behalten sollte, wenn das Spiel stark von Oberflächen abhängt, und es könnte verhindern, dass dem Spiel auf Geräten mit geringerer Leistung der Speicher ausgeht.</p>
  </div>
  <p> </p>
  <p>Abgesehen von den oben genannten Hauptpunkten gibt es noch andere, allgemeinere Dinge, die die Leistung verbessern können und die ebenfalls als &quot;gute Praktiken&quot; gelten:</p>
  <ul class="colour">
    <li>Scheuen Sie sich nicht, die trigonometrischen Funktionen zu verwenden, da sie (entgegen der landläufigen Meinung) ziemlich schnell sind, insbesondere im Vergleich zu Teilchen, Kollisionen, Strings usw...</li>
    <li> <span class="notranslate">code</span> nicht in die Draw-Ereignisse einfügen, die nicht zum Zeichnen von Dingen dienen</li>
    <li>einen Alarm verwenden, um <span class="notranslate">code</span> aufzurufen, der nicht bei jedem Schritt aufgerufen werden muss (anstatt dies einfach in das Step-Ereignis einzufügen)</li>
  </ul>
  <p>Aber wie wir bereits zu Beginn der Seite erwähnt haben, sind all diese Optimierungen optional, und wenn Ihr Spiel mit 60 Vertex-Batches, 80 Textur-Swaps, additivem Blending usw. gut läuft, dann machen Sie sich nicht allzu viele Gedanken darüber! Behalten Sie diese Dinge einfach im Hinterkopf, wenn Sie Ihr nächstes Spiel programmieren...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
        <div style="float:right">Weiter: <a href="The_File_System.htm">Das Dateisystem</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->
</body>
</html>