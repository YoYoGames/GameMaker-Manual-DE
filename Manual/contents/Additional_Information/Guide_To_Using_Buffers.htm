<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Leitfaden zur Verwendung von Puffern</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Leitfaden zur Verwendung von Puffern</h1>
  <p>Ein <span class="notranslate">buffer</span> (in der Programmierung) ist im Grunde ein Speicherplatz im Systemspeicher, der dazu dient, kleine Datenpakete für so ziemlich alles zu speichern (zum Beispiel: Datenübertragung, Kollisionen, Farbdaten usw.). Da er sich im Systemspeicher befindet, ist der Zugriff darauf sehr schnell, und ein <span class="notranslate">buffer</span> wird im Allgemeinen für sehr kurzfristige Speicherungen verwendet, z. B. für den Empfang von Netzwerkinformationen vor deren Verarbeitung oder für die Speicherung eines Kontrollpunkts im Spiel (dies wird in dem Beispiel weiter unten auf der Seite erklärt).</p>
  <p><img>Puffer werden erstellt, indem ein in <span class="glossextra">Byte</span> berechneter Speicherplatz im Systemspeicher zugewiesen wird, der dann für Ihr Spiel reserviert wird, solange Ihr Spiel läuft oder bis Sie die <span class="notranslate">buffer</span> mit der entsprechenden Funktion löschen (alle Funktionen von <span class="notranslate">GML</span> <span class="notranslate">buffer</span> finden Sie <a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">hier</a>). Das bedeutet, dass auch dann, wenn Ihr Spiel nicht im Fokus ist (z. B. auf einem mobilen Gerät, wenn Sie einen Anruf entgegennehmen, wird das Spiel in den Hintergrund gestellt), die <span class="notranslate">buffer</span> immer noch existiert, aber wenn das Spiel geschlossen oder neu gestartet wird, geht die <span class="notranslate">buffer</span> verloren.</p>
  <p class="note"><strong>HINWEIS</strong>: Durch einen Neustart des Spiels wird die <span class="notranslate">buffer</span> nicht gelöscht oder gelöscht! Aber es wird jeden weiteren Zugriff auf die zuvor erstellte <span class="notranslate">buffer</span> verhindern, da der ID-Handle verloren gegangen ist, was zu einem Speicherleck führt, das Ihr Spiel schließlich zum Absturz bringt. Wenn Sie also ein Spiel neu starten, denken Sie daran, zuerst alle <span class="notranslate">buffers</span> zu löschen.</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span> erlaubt die Erstellung von vier verschiedenen <span class="notranslate">buffer</span> Typen. Der Grund dafür ist, dass <span class="notranslate">buffers</span> als hochoptimiertes temporäres Speichermedium konzipiert ist und Sie daher einen <span class="notranslate">buffer</span> erstellen sollten, der zu der Art von Daten passt, die Sie dort speichern möchten, da es sonst zu Fehlern oder Engpässen in Ihrem <span class="notranslate">code</span> kommen kann. Bevor wir dies näher erläutern, schauen wir uns die vier verfügbaren <span class="notranslate">buffer</span> Typen an (definiert als <strong>Konstanten </strong>in <span class="notranslate">GML</span>):</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Konstante</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fixed</span></td>
        <td><br>
          Eine <span class="notranslate">buffer</span> mit einer festen Größe in Bytes. Die Größe wird bei der Erstellung von <span class="notranslate">buffer</span> festgelegt und kann nicht mehr geändert werden.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_grow</span></td>
        <td><br>
          Eine <span class="notranslate">buffer</span>, die dynamisch <i>wächst</i>, wenn Daten hinzugefügt werden. Sie legen ihn mit einer Anfangsgröße an (die in etwa der Größe der zu speichernden Daten entsprechen sollte), und dann wird er erweitert, um weitere Daten aufzunehmen, die diese Anfangsgröße überschreiten.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_wrap</span></td>
        <td><br>
          Eine <span class="notranslate">buffer</span>, in der die Daten <i>umbrochen</i> werden. Wenn die hinzugefügten Daten die Grenze der Größe von <span class="notranslate">buffer</span> erreichen, wird die überschriebene Datei wieder an den Anfang von <span class="notranslate">buffer</span> gesetzt, und das weitere Schreiben wird von diesem Punkt an fortgesetzt.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fast</span></td>
        <td><br>
          Es handelt sich um eine spezielle &quot;abgespeckte&quot; <span class="notranslate">buffer</span>, die extrem schnell zu lesen/schreiben ist. Es kann jedoch nur mit <span class="inline"><span class="inline">buffer_u8</span> Datentypen verwendet werden und muss 1 Byte ausgerichtet sein. (Informationen zu <b>Datentypen</b> und <b>Byte-Alignment</b> finden Sie weiter unten auf dieser Seite).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Dies sind die <span class="notranslate">buffer</span> Typen, die Ihnen bei der Verwendung von <span data-keyref="GameMaker Name">GameMaker</span> zur Verfügung stehen. Welchen Sie wählen, hängt stark von der Verwendung ab, die Sie wünschen. Eine wachsende <span class="notranslate">buffer</span> würde zum Beispiel für die Speicherung eines &quot;Schnappschusses&quot; von Daten verwendet, um ein Spiel zu speichern, da Sie die tatsächliche Datenmenge nicht kennen, die darin gespeichert werden soll, oder eine schnelle <span class="notranslate">buffer</span> würde verwendet werden, wenn Sie wissen, dass die Werte, mit denen Sie arbeiten, alle zwischen 0 und 255 oder -128 und 127 liegen, zum Beispiel bei der Verarbeitung von <a class="glossterm" data-glossterm="ARGB" href="#">ARGB-Daten</a> aus einem Bild.</p>
  <p><img>Bei der Erstellung einer <span class="notranslate">buffer</span> sollten Sie immer versuchen, sie in einer Größe zu erstellen, die dem Typ entspricht, wobei die allgemeine Regel lautet, dass sie so erstellt werden sollte, dass sie die maximale Größe der Daten, die sie speichern soll, aufnehmen kann, und im Zweifelsfall ein grow <span class="notranslate">buffer</span> verwenden, um Überschreibungsfehler zu vermeiden.</p>
  <p>Die eigentliche <span class="notranslate">code</span> zur Erstellung einer <span class="notranslate">buffer</span> würde etwa so aussehen:</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p><br>
    Das würde eine feste <span class="notranslate">buffer</span> von 16384 Bytes und byte-aligned zu 2 erstellen, mit der Funktion, die einen eindeutigen ID-Wert zurückgibt, der in einer Variable für spätere Referenzierung dieser <span class="notranslate">buffer</span> gespeichert wird.</p>
  <p>Wenn Sie Daten auf <span class="notranslate">buffer</span> lesen und schreiben, tun Sie dies in &quot;Datenpaketen&quot;, die durch ihren &quot;Datentyp&quot; definiert sind. Der &quot;Datentyp&quot; legt die Anzahl der Bytes fest, die innerhalb von <span class="notranslate">buffer</span> für den zu schreibenden Wert zugewiesen werden, und es ist wichtig, dass Sie dies richtig machen, da Sie sonst sehr seltsame Ergebnisse (oder sogar Fehler) für Ihre <span class="notranslate">code</span> erhalten.</p>
  <p>Puffer werden <strong>sequentiell</strong> beschrieben (und ausgelesen), d. h. ein Datenelement wird nach dem anderen geschrieben, wobei jedes Datenelement einen bestimmten Typ hat. Das bedeutet, dass Sie sich idealerweise immer bewusst sein sollten, welche Daten Sie in <span class="notranslate">buffer</span> schreiben. Diese Datentypen werden in <span class="notranslate">GML</span> durch die folgenden Konstanten definiert:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Datentyp Konstante</th>
        <th>Bytes</th>
        <th>Beschreibung</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>1</td>
        <td><br>
          Eine 8-Bit-Ganzzahl ohne Vorzeichen. Dies ist ein positiver Wert von 0 bis 255.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>1</td>
        <td><br>
          Eine 8-Bit-Ganzzahl mit Vorzeichen. Dies kann ein positiver oder negativer Wert von -128 bis 127 sein (0 wird als positiv eingestuft).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>2</td>
        <td><br>
          Eine 16-Bit-Ganzzahl ohne Vorzeichen. Dies ist ein positiver Wert von 0 - 65.535.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>2</td>
        <td><br>
          Eine ganze Zahl mit Vorzeichen und 16 Bit. Dies kann ein positiver oder negativer Wert zwischen -32.768 und 32.767 sein (0 wird als positiv eingestuft).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>2</td>
        <td><br>
          Eine 16-Bit-Gleitkommazahl. Dies kann ein positiver oder negativer Wert innerhalb des Bereichs von +/- 65504 sein. <b>(Wird derzeit nicht unterstützt!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>4</td>
        <td><br>
          Eine 32-Bit-Ganzzahl ohne Vorzeichen. Dies ist ein positiver Wert von 0 bis 4.294.967.295.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>4</td>
        <td><br>
          Eine ganze Zahl mit Vorzeichen und 32 Bit. Dies kann ein positiver oder negativer Wert zwischen -2.147.483.648 und 2.147.483.647 sein (0 wird als positiv eingestuft).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>4</td>
        <td><br>
          Eine 32-Bit-Gleitkommazahl. Dies kann ein positiver oder negativer Wert innerhalb des Bereichs von +/-16777216 sein.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>8</td>
        <td><br>
          Ein 64bit Ganzzahlwert ohne Vorzeichen.<b>(Wird derzeit nicht von allen <span class="notranslate">buffer</span> Funktionen unterstützt!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>8</td>
        <td><br>
          Eine 64-Bit-Gleitkommazahl.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>1</td>
        <td><br>
          Ein boolescher Wert. Kann nur entweder 1 oder 0 sein (<span class="inline">true</span> oder <span class="inline">false</span>)</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>K.A.</td>
        <td><br>
          Dies ist eine UTF-8-Zeichenkette mit Null-Terminierung (0x00). Grundsätzlich wird eine <span class="notranslate">GameMaker</span> Zeichenkette in die <span class="notranslate">buffer</span> ausgegeben und am Ende wird eine 0 angehängt.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Angenommen, Sie haben eine <span class="notranslate">buffer</span> erstellt und möchten Informationen in diese Datei schreiben, dann würden Sie etwa den folgenden Code verwenden:</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br />
    buffer_write(buff, buffer_bool, global.Music);<br />
    buffer_write(buff, buffer_s16, obj_Player.x);<br />
    buffer_write(buff, buffer_s16, obj_Player.y);<br />
    buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>Wenn Sie sich das obige Beispiel ansehen, können Sie sehen, dass Sie verschiedene Datentypen gleichzeitig in <span class="notranslate">buffer</span> schreiben können (Sie sind nur auf einen bestimmten Datentyp beschränkt, wenn Sie den <em>schnellen </em>Puffertyp verwenden), und diese Daten werden der Reihe nach in <span class="notranslate">buffer</span> eingefügt (obwohl ihre tatsächliche Position in <span class="notranslate">buffer</span> von ihrer Byte-Ausrichtung abhängt, die weiter unten erklärt wird). Dies gilt auch für das Lesen von Informationen aus <span class="notranslate">buffer</span>, und im Fall des obigen Beispiels würden Sie aus <span class="notranslate">buffer</span> in der gleichen Reihenfolge lesen, in der Sie die Daten geschrieben haben, wobei Sie auf den gleichen Datentyp achten, z. B:</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br />
    global.Music = buffer_read(buff, buffer_bool);<br />
    obj_Player.x = buffer_read(buff, buffer_s16);<br />
    obj_Player.y = buffer_read(buff, buffer_s16);<br />
    global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>Wie Sie sehen, lesen Sie die Informationen in der gleichen Reihenfolge aus, in der Sie sie in die <span class="notranslate">buffer</span> einlesen. Weitere Informationen über das Hinzufügen und Entfernen von Daten aus der <span class="notranslate">buffer</span> finden Sie in den nachstehenden Beispielen.</p>
  <p>Wenn Sie diese Seite durchgelesen haben, werden Sie Hinweise auf die <strong>Byte-Ausrichtung </strong>einer <span class="notranslate">buffer</span> gesehen haben. Dies bezieht sich im Wesentlichen auf die Position, an der neue Daten innerhalb einer bestimmten <span class="notranslate">buffer</span> gespeichert werden. Wie funktioniert das? Bei einer an einem Byte ausgerichteten <span class="notranslate">buffer</span> wird jedes Datenelement nacheinander in die <span class="notranslate">buffer</span> geschrieben, wobei jedes neue Datenelement direkt nach dem vorherigen hinzugefügt wird. Bei einer an 2 Bytes ausgerichteten <span class="notranslate">buffer</span> werden die Daten jedoch in Intervallen von 2 Bytes geschrieben, so dass selbst bei einem anfänglichen Schreibvorgang von 1 Byte der nächste Schreibvorgang an zwei Bytes ausgerichtet wird:</p>
  <p><img>Wenn also Ihre Byte-Ausrichtung auf, sagen wir, 4 Byte eingestellt ist und Sie ein einzelnes Datenstück schreiben, das 1 Byte groß ist, und dann einen <span class="notranslate">buffer</span> <strong>tell </strong> machen (ein tell holt die aktuelle Position zum Lesen/Schreiben für die <span class="notranslate">buffer</span>), erhalten Sie einen <strong>Offset </strong>von 1 Byte (der Offset ist in diesem Fall die Anzahl der Bytes vom Anfang der <span class="notranslate">buffer</span> bis zur aktuellen Lese-/Schreibposition).</p>
  <p>Wenn Sie jedoch ein weiteres Stück Daten schreiben, das ebenfalls 1 Byte groß ist, und <em>dann </em>ein <span class="notranslate">buffer</span> tell durchführen, erhalten Sie einen Offset von 5 Byte (obwohl Sie nur 2 Byte Daten geschrieben haben), da die Ausrichtung die Daten aufgefüllt hat, um sie an der 4-Byte-Ausrichtung <span class="notranslate">buffer</span> auszurichten.</p>
  <p>Grundsätzlich bedeutet dies, dass die Ausrichtung sich nur darauf auswirkt <em>, wohin </em>etwas geschrieben wird. Wenn Sie also ein <span class="notranslate">buffer</span> tell ausführen, nachdem Sie etwas geschrieben haben, wird die aktuelle Schreibposition zurückgegeben, die unmittelbar auf die Daten folgt, die Sie zuvor geschrieben haben. Beachten Sie jedoch, dass <span class="notranslate">buffer</span> die Schreibposition intern auf das nächste Vielfache der Ausrichtungsgröße verschiebt, bevor die Daten tatsächlich geschrieben werden, wenn Sie dann ein weiteres Stück Daten schreiben.</p>
  <p>Im Folgenden finden Sie einige Beispiele für die Verwendung von <span class="notranslate">buffers</span> in einem Projekt:</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Puffer Kontrollpunkt</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Ein einfaches Beispiel dafür, wie eine <span class="notranslate">buffer</span> in einem <span data-keyref="GameMaker Name">GameMaker-Spiel</span> für eine beliebige <span class="notranslate">platform</span> verwendet werden kann, ist die Funktion <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>. Diese Funktion macht einen &quot;Schnappschuss&quot; des aktuellen Spielzustands und speichert ihn auf einer vordefinierten <span class="notranslate">buffer</span>, die dann gelesen werden kann, um das Spiel an diesem Punkt wieder zu laden.</p>
    <p class="note"><strong>HINWEIS</strong>: Diese Funktion ist sehr begrenzt und ist für Anfänger gedacht, um ein Kontrollpunktsystem schnell zum Laufen zu bringen. Fortgeschrittene Benutzer ziehen es vielleicht vor, ihr eigenes System mit Hilfe der Dateifunktionen auf <span class="notranslate">code</span> zu speichern, da das Spiel keine der dynamischen Ressourcen speichert, die Sie zur Laufzeit erstellen können, wie Datenstrukturen, Oberflächen, hinzugefügte <span class="notranslate">sprites</span>, etc.</p>
    <p class="dropspot">Als erstes müssen wir ein neues Objekt erstellen, um das Speichern und Laden zu steuern, also erstellen Sie eines und geben ihm ein <strong>Create Event</strong>. In dieses Ereignis könnten Sie den folgenden Code einfügen:</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br />
      StateSaved = false;</p>
    <p class="dropspot">Die erste Zeile erstellt eine wachsende <span class="notranslate">buffer</span> (da wir die endgültige Größe der gespeicherten Daten nicht kennen) von 1024 Byte und ausgerichtet auf 1 Byte. Anschließend wird eine Variable erstellt, mit der überprüft wird, ob das Spiel gespeichert wurde oder nicht (diese wird zum Laden verwendet).</p>
    <p class="dropspot">Als Nächstes fügen wir ein <strong>Keypress-Ereignis</strong> (zum Beispiel) hinzu, bei dem wir den aktuellen Spielzustand in dem erstellten Puffer speichern:</p>
    <p class="code">StateSaved = true;<br />
      buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
      game_save_buffer(SaveBuffer);</p>
    <p class="dropspot">Im obigen Beispiel wird die Kontrollvariable zunächst auf <span class="inline">true </span> gesetzt (damit diese beim Speichern des Spiels auf <span class="notranslate">buffer</span> gespeichert wird) und dann zum Anfang von <span class="notranslate">buffer</span> gesucht, bevor der aktuelle Speicherstand in die Variable geschrieben wird. Warum benutzen wir <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>? Nun, wie bereits auf dieser Seite erwähnt, liest und schreibt man in ein <span class="notranslate">buffer</span> ab der letzten Position, an der Daten hinzugefügt wurden. Das bedeutet, wenn Sie <span class="notranslate">buffer</span> nicht auf den Anfang zurücksetzen, werden Sie beim Speichern die Daten an der aktuellen Lese-/Schreibposition von <span class="notranslate">buffer</span> in <span class="notranslate">buffer</span> einfügen. Wir verwenden also die Funktion <span class="inline">buffer_seek()</span>, um den Tell an den Anfang von <span class="notranslate">buffer</span> zu setzen.</p>
    <p class="dropspot">Wir haben jetzt den aktuellen Spielzustand auf <span class="notranslate">buffer</span> gespeichert. Der nächste Schritt wäre <span class="notranslate">code</span>, wie man ihn lädt, wahrscheinlich in einem anderen <strong>Keypress-Event</strong>:</p>
    <p class="code">if StateSaved<br />
      {<br />
          buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
          game_load_buffer(SaveBuffer);<br />
      }</p>
    <p class="dropspot">Das Spiel wird dann am Ende der Veranstaltung geladen, in der Sie die oben genannte <span class="notranslate">code</span> platzieren.</p>
    <p class="note"><strong>HINWEIS</strong>: Dies ist nur für die Verwendung im selben Raum gedacht und nicht für die Erstellung kompletter Spielstände, nachdem das Spiel geschlossen oder neu gestartet wurde!</p>
    <p class="dropspot">Die letzte Sache, die dem Controller-Objekt hinzugefügt werden sollte, ist ein &quot;Aufräumen&quot; <span class="notranslate">code</span>. <span class="notranslate">Buffers</span> wird im Speicher gespeichert und wenn man nicht aufräumt, wenn man mit ihnen fertig ist, kann es zu Speicherlecks kommen, die schließlich zum Lag und zum Absturz des Spiels führen. Daher würden Sie wahrscheinlich ein <strong>Raum-Ende-Ereignis</strong> (aus der Kategorie <strong>Andere</strong> Ereignisse) mit hinzufügen:</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">Dieses Objekt kann nun in einem Raum platziert werden und auf Tastendruck den Raumzustand von einer <span class="notranslate">buffer</span> speichern und laden.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Netzwerk-Puffer</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Wenn Sie mit den <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">GameMaker-Netzwerkfunktionen</a> arbeiten, müssen Sie <span class="notranslate">buffers</span> verwenden, um das Datenpaket zu erstellen, das über die Netzwerkverbindung gesendet wird. Dieses Beispiel soll zeigen, wie das gemacht wird, aber aufgrund des Umfangs der Netzwerkmöglichkeiten soll es nur zeigen, wie man die <span class="notranslate">buffers</span> selbst benutzt, und nicht das komplette Netzwerksystem.</p>
    <p class="dropspot">Das erste, was wir zeigen werden, ist die Erstellung und Verwendung eines <span class="notranslate">buffer</span> für die Client-Seite der Netzwerkverbindung. Diese <span class="notranslate">buffer</span> wird verwendet, um kleine Datenpakete zu erstellen, die dann an die <span class="notranslate">server</span> gesendet werden können. Im <strong>Create Event</strong> einer Instanz würden wir also eine <span class="notranslate">buffer</span> wie folgt zuweisen:</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">Wir machen die <span class="notranslate">buffer</span> klein (256 Bytes) - da sie nicht für die Speicherung großer Datenmengen gedacht ist -, dann machen wir sie zu einem grow <span class="notranslate">buffer</span>, um sicherzustellen, dass keine Fehler auftreten, falls wir zu irgendeinem Zeitpunkt mehr Daten senden müssen, und die Ausrichtung wird der Einfachheit halber auf eins gesetzt.</p>
    <p class="dropspot">Nehmen wir nun an, dass unser Client Daten an <span class="notranslate">server</span> senden soll. Dazu müssen wir ein <span class="notranslate">buffer</span> &quot;Paket&quot; erstellen, und in diesem Beispiel werden wir ein <strong>Tastendruck-Ereignis</strong> senden, z. B. wenn der Spieler den <em>linken Pfeil </em>drückt, um sich im Spiel zu bewegen. Dazu schreiben wir zuerst die notwendigen Daten in die <span class="notranslate">buffer</span> und senden sie dann ab:</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
      buffer_write(buff, buffer_u8, 1);<br />
      buffer_write(buff, buffer_s16, vk_left);<br />
      buffer_write(buff, buffer_bool, true);<br />
      network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">Bevor wir in die <span class="notranslate">buffer</span> schreiben, haben wir den &quot;tell&quot; an den Anfang der <span class="notranslate">buffer</span> gesetzt, da das Netzwerk die Daten immer vom Anfang einer <span class="notranslate">buffer</span> übernimmt. Wir schreiben dann den Prüfwert (dieser wird von der <span class="notranslate">server</span> verwendet, um die Art des zu verarbeitenden Ereignisses zu bestimmen), dann die verwendete Taste und dann den Zustand der Taste (in diesem Fall true für gedrückt). Diese <span class="notranslate">buffer</span> wird dann als Datenpaket von der Netzwerkfunktion gesendet. Beachten Sie, dass wir nicht die gesamte <span class="notranslate">buffer</span> senden! Wir senden nur die geschriebenen Daten und verwenden die Funktion buffer_tell, um die aktuelle Lese-/Schreibposition des <span class="notranslate">buffer</span> zurückzugeben (denken Sie daran, dass das Schreiben auf <span class="notranslate">buffer</span> den &quot;tell&quot; an das Ende des Geschriebenen verschiebt). Dies geschieht einfach, um zu vermeiden, dass mehr Bytes als nötig gesendet werden.</p>
    <p class="dropspot">Was ist mit dem Empfang der Daten auf <span class="notranslate">server</span>? Das empfangene Datenpaket muss in <span class="notranslate">buffer</span> auf <span class="notranslate">server</span> geschrieben und dann zur Aktualisierung des Spiels verwendet werden. Hierfür würden wir das <a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">Networking Asynchronous Event</a> im Network Controller Objekt des <span class="notranslate">server</span> verwenden, wie diese vereinfachte <span class="notranslate">code</span> unten zeigt:</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br />
      if (cmd == buffer_read(buff, buffer_u8)) <br />
      {<br />
          key = buffer_read(buff, buffer_s16);<br />
          key_state = buffer_read(buff, buffer_bool);<br />
      }</p>
    <p class="dropspot">Das asynchrone Ereignis enthält eine spezielle temporäre DS-Karte <span class="inline">async_load</span> (sie wird am Ende des Ereignisses automatisch aus dem Speicher entfernt), die je nach Art der aus dem Netz eingehenden Daten unterschiedliche Informationen enthält. In diesem Fall gehen wir davon aus, dass die Karte überprüft wurde und es sich um ein <span class="notranslate">buffer</span> Datenpaket handelt, das von einem Client gesendet wurde. Wir überprüfen nun das erste Datenpaket auf <span class="notranslate">buffer</span>, um festzustellen, welche Art von Ereignis gesendet wurde - in diesem Fall steht der Wert &quot;1&quot; für ein Tastenereignis. Bei der Codierung dieser Dinge sollten Sie jedoch zur Vereinfachung Konstanten definieren, die diese Werte aufnehmen - und dann die gedrückte Taste und ihren Zustand speichern (<span class="inline">true</span> = gedrückt, <span class="inline">false</span> = losgelassen). Diese Informationen werden dann verwendet, um alle Clients mit dem neuen Status des sendenden Client-Spielers zu aktualisieren.</p>
    <p class="note"><strong>HINWEIS</strong>: Die <span class="notranslate">buffer</span>, die aus der DS-Map erstellt wird, wird am Ende des asynchronen Netzwerkereignisses automatisch entfernt, so dass hier keine Notwendigkeit besteht, <span class="inline" style="font-size: 14px">buffer_delete()</span> zu verwenden.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Zurück: <a href="Additional_Information.htm">Zusätzliche Informationen</a></div>
        <div style="float:right">Nächste: <a href="Bitwise_Operators.htm">Bitweise Operatoren</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Alle Rechte vorbehalten</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->
</body>
</html>